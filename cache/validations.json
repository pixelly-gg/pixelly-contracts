{
  "version": "3.2",
  "log": [
    {
      "SafeMath": {
        "src": "contracts/library/SafeMath.sol:5",
        "version": {
          "withMetadata": "25b813288c40d5963312c5ef6e94bde28e7e77c95c5c659d5cd2666878dd6b20",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MerkleProof": {
        "src": "@openzeppelin/contracts/cryptography/MerkleProof.sol:8",
        "version": {
          "withMetadata": "e4c1a7894a06b1c2edf4951f92346a8c87ca32adf7ffd354954ba1e9195a9b23",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/introspection/ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin/contracts/introspection/ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin/contracts/introspection/ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts/library/IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/library/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:21",
        "version": {
          "withMetadata": "6159e5b8b162df16ddf823478e6d2f5f1c6289fe3985e922be50f8f8ba411d0b",
          "withoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033",
          "linkedWithoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)5400_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4777_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)5400_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)5400_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)5014_storage"
                }
              ]
            },
            "t_struct(Set)5014_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4777_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)4459_storage"
                }
              ]
            },
            "t_struct(Map)4459_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)4451_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)4451_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)4451_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721Holder.sol:13",
        "version": {
          "withMetadata": "392be09826fc835d08e8d319baddb8e3dc10707ec5af5dd6ecc847bb9d816d6a",
          "withoutMetadata": "137df6a6efa04ae24dbffb1da379b99cbf88bb7fa99ca9af2db6ad24197185b0",
          "linkedWithoutMetadata": "137df6a6efa04ae24dbffb1da379b99cbf88bb7fa99ca9af2db6ad24197185b0"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin/contracts/utils/EnumerableMap.sol:29",
        "version": {
          "withMetadata": "33db0abc4b4d1da32aed25dc771cc00a3efa31fff5d6d984c64d230b001e4165",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "4f51efe115648bafc40e8dcb6d91da10d2c3805f4d3f7a23f58ceb3aa49f6aac",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/utils/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "74ef6d7234587add3006addc68209e5df580602fb30a593c7df5114b91053bef",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Oracle": {
        "src": "contracts/Oracle/Oracle.sol:14",
        "version": {
          "withMetadata": "3c0730c03bad63b29055bd007504087505d0e3ab3799caea082b25acd5212256",
          "withoutMetadata": "1c5bac7ebe8ffd0a679123716d693a0b78694a611d7782724a31e900927b84be",
          "linkedWithoutMetadata": "1c5bac7ebe8ffd0a679123716d693a0b78694a611d7782724a31e900927b84be"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "FixedPoint",
          "SafeMath",
          "EnumerableSet",
          "UniswapV2Library",
          "OracleLibrary"
        ],
        "methods": [
          "(address,address)",
          "update(address,address)",
          "updateBlockInfo()",
          "getQuantity(address,uint256)",
          "getAveragePrice(address)",
          "getCurrentPrice(address)",
          "getLpTokenValue(address,uint256)",
          "getAverageBlockTime()",
          "addRouterToken(address)",
          "delRouterToken(address)",
          "getRouterTokenLength()",
          "isRouterToken(address)",
          "getRouterToken(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Oracle",
            "src": "contracts/Oracle/Oracle.sol:39"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Oracle/Oracle.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "anchorToken",
            "src": "contracts/Oracle/Oracle.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Oracle",
              "label": "_routerTokens",
              "type": "t_struct(AddressSet)5279_storage",
              "src": "contracts/Oracle/Oracle.sol:18"
            },
            {
              "contract": "Oracle",
              "label": "blockInfo",
              "type": "t_struct(BlockInfo)5748_storage",
              "src": "contracts/Oracle/Oracle.sol:34"
            },
            {
              "contract": "Oracle",
              "label": "pairObservations",
              "type": "t_mapping(t_address,t_struct(Observation)5743_storage)",
              "src": "contracts/Oracle/Oracle.sol:37"
            }
          ],
          "types": {
            "t_struct(AddressSet)5279_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)5014_storage"
                }
              ]
            },
            "t_struct(Set)5014_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(BlockInfo)5748_storage": {
              "label": "struct Oracle.BlockInfo",
              "members": [
                {
                  "label": "height",
                  "type": "t_uint256"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Observation)5743_storage)": {
              "label": "mapping(address => struct Oracle.Observation)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Observation)5743_storage": {
              "label": "struct Oracle.Observation",
              "members": [
                {
                  "label": "timestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "price0Cumulative",
                  "type": "t_uint256"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyAddressRegistry": {
        "src": "contracts/PixellyAddressRegistry.sol:8",
        "version": {
          "withMetadata": "d2348568e5bc8e68a2e8d1edb1c46baff3c22d0075ea955c9c34c9647b3248e7",
          "withoutMetadata": "29450f2c353009483451469a387cce8f426e742b1ebe166fcfe4167d19d3601b",
          "linkedWithoutMetadata": "29450f2c353009483451469a387cce8f426e742b1ebe166fcfe4167d19d3601b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updatePixelly(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PixellyAddressRegistry",
              "label": "pixellyNFT",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:12"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:15"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:18"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:21"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:24"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:27"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:30"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:33"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:36"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyArtFactory": {
        "src": "contracts/PixellyArtFactory.sol:8",
        "version": {
          "withMetadata": "55650c9d1899154f9bd502b654c623e153439aa7cda5d446086ce710ca86e0ce",
          "withoutMetadata": "95e6c482d7c2dd93b6ad5be4270412300e3630a0b9263e8438a499c347fae2d6",
          "linkedWithoutMetadata": "95e6c482d7c2dd93b6ad5be4270412300e3630a0b9263e8438a499c347fae2d6"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyArtFactory",
            "src": "contracts/PixellyArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyArtFactory.sol:14"
            },
            {
              "contract": "PixellyArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyArtFactory.sol:17"
            },
            {
              "contract": "PixellyArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/PixellyArtFactory.sol:20"
            },
            {
              "contract": "PixellyArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyArtFactory.sol:23"
            },
            {
              "contract": "PixellyArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyArtFactory.sol:26"
            },
            {
              "contract": "PixellyArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/PixellyArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyArtFactoryPrivate": {
        "src": "contracts/PixellyArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "6929a3424f76580ef886846ae786a294a852d72be69f932d07ad67b835c909f9",
          "withoutMetadata": "cb4f36bb02c3f9bdd61ffa54f50eb18d1a5e292cb4e34746301b65d5f1abf57d",
          "linkedWithoutMetadata": "cb4f36bb02c3f9bdd61ffa54f50eb18d1a5e292cb4e34746301b65d5f1abf57d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyArtFactoryPrivate",
            "src": "contracts/PixellyArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyArtFactoryPrivate.sol:14"
            },
            {
              "contract": "PixellyArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyArtFactoryPrivate.sol:17"
            },
            {
              "contract": "PixellyArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/PixellyArtFactoryPrivate.sol:20"
            },
            {
              "contract": "PixellyArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyArtFactoryPrivate.sol:23"
            },
            {
              "contract": "PixellyArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyArtFactoryPrivate.sol:26"
            },
            {
              "contract": "PixellyArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/PixellyArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts/PixellyArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "d41a22734631030536ad7e75efaaa80e798928fb5a398d2b7e5213c62cbefe9e",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PixellyArtTradable": {
        "src": "contracts/PixellyArtTradable.sol:22",
        "version": {
          "withMetadata": "984589630bed349fa321419c1d3321e33636168adf44fbbecb7ad11216891c3e",
          "withoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b",
          "linkedWithoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyArtTradable",
            "src": "contracts/PixellyArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/PixellyArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/PixellyArtTradable.sol:28"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/PixellyArtTradable.sol:31"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/PixellyArtTradable.sol:33"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/PixellyArtTradable.sol:34"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/PixellyArtTradable.sol:37"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/PixellyArtTradable.sol:39"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyArtTradable.sol:41"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyArtTradable.sol:43"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyArtTradable.sol:45"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts/PixellyArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "c8b92a6d7568252f950c7b0a36b418f2d159fd8c41a09dec94e29dcc03813cd9",
          "withoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d",
          "linkedWithoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)7630)",
              "src": "contracts/PixellyArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)7630)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)7630": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyArtTradablePrivate": {
        "src": "contracts/PixellyArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "9dd8a89b6d4646f67b116ea25571da78fa750c37356757979c6fcf4c7bcd342d",
          "withoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9",
          "linkedWithoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyArtTradablePrivate",
            "src": "contracts/PixellyArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/PixellyArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/PixellyArtTradablePrivate.sol:28"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/PixellyArtTradablePrivate.sol:31"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/PixellyArtTradablePrivate.sol:33"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/PixellyArtTradablePrivate.sol:34"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/PixellyArtTradablePrivate.sol:37"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/PixellyArtTradablePrivate.sol:39"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyArtTradablePrivate.sol:41"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyArtTradablePrivate.sol:43"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyArtTradablePrivate.sol:45"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPixellyAddressRegistry": {
        "src": "contracts/PixellyPriceFeed.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPixellyBundleMarketplace": {
        "src": "contracts/PixellyMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPixellyMarketplace": {
        "src": "contracts/PixellyBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPixellyTokenRegistry": {
        "src": "contracts/PixellyPriceFeed.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PixellyAuction": {
        "src": "contracts/PixellyAuction.sol:56",
        "version": {
          "withMetadata": "4b546cd12991c1aa37c97f6343361cf50f0a2ce350ae0fd35920c33cfacd7a04",
          "withoutMetadata": "79c283fbefc3a2f6c7d809e8a21ca36d9972d179296d40dbddc28d44f78fa86f",
          "linkedWithoutMetadata": "79c283fbefc3a2f6c7d809e8a21ca36d9972d179296d40dbddc28d44f78fa86f"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "resultFailedAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)",
          "operatorSlot()",
          "operator()",
          "setOperator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts/PixellyAuction.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts/PixellyAuction.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts/PixellyAuction.sol:163"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)8154_storage))",
              "src": "contracts/PixellyAuction.sol:151"
            },
            {
              "contract": "PixellyAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)8161_storage))",
              "src": "contracts/PixellyAuction.sol:154"
            },
            {
              "contract": "PixellyAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts/PixellyAuction.sol:157"
            },
            {
              "contract": "PixellyAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts/PixellyAuction.sol:160"
            },
            {
              "contract": "PixellyAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyAuction.sol:163"
            },
            {
              "contract": "PixellyAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyAuction.sol:166"
            },
            {
              "contract": "PixellyAuction",
              "label": "addressRegistry",
              "type": "t_contract(IPixellyAddressRegistry)7959",
              "src": "contracts/PixellyAuction.sol:169"
            },
            {
              "contract": "PixellyAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts/PixellyAuction.sol:172"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)8154_storage))": {
              "label": "mapping(address => mapping(uint256 => struct PixellyAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)8154_storage)": {
              "label": "mapping(uint256 => struct PixellyAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)8154_storage": {
              "label": "struct PixellyAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)8161_storage))": {
              "label": "mapping(address => mapping(uint256 => struct PixellyAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)8161_storage)": {
              "label": "mapping(uint256 => struct PixellyAuction.HighestBid)"
            },
            "t_struct(HighestBid)8161_storage": {
              "label": "struct PixellyAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IPixellyAddressRegistry)7959": {
              "label": "contract IPixellyAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyBundleMarketplace": {
        "src": "contracts/PixellyBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "c19755395edca8d3f50c150c1f3ed5391fb1fb74954bf4950834e92a5cff6319",
          "withoutMetadata": "1ebe0e848d5792f8c946e1936742a012092283d33886e629fffcdf5071cc7203",
          "linkedWithoutMetadata": "1ebe0e848d5792f8c946e1936742a012092283d33886e629fffcdf5071cc7203"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20Upgradeable",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PixellyBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)10238_storage))",
              "src": "contracts/PixellyBundleMarketplace.sol:106"
            },
            {
              "contract": "PixellyBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/PixellyBundleMarketplace.sol:109"
            },
            {
              "contract": "PixellyBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)5194_storage))",
              "src": "contracts/PixellyBundleMarketplace.sol:111"
            },
            {
              "contract": "PixellyBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts/PixellyBundleMarketplace.sol:113"
            },
            {
              "contract": "PixellyBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts/PixellyBundleMarketplace.sol:115"
            },
            {
              "contract": "PixellyBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)10245_storage))",
              "src": "contracts/PixellyBundleMarketplace.sol:118"
            },
            {
              "contract": "PixellyBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyBundleMarketplace.sol:121"
            },
            {
              "contract": "PixellyBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyBundleMarketplace.sol:124"
            },
            {
              "contract": "PixellyBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IPixellyAddressRegistry)10101",
              "src": "contracts/PixellyBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)10238_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct PixellyBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)10238_storage)": {
              "label": "mapping(bytes32 => struct PixellyBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)10238_storage": {
              "label": "struct PixellyBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)5194_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)5194_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)5194_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)5014_storage"
                }
              ]
            },
            "t_struct(Set)5014_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)10245_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct PixellyBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10245_storage)": {
              "label": "mapping(address => struct PixellyBundleMarketplace.Offer)"
            },
            "t_struct(Offer)10245_storage": {
              "label": "struct PixellyBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20Upgradeable)825"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)825": {
              "label": "contract IERC20Upgradeable"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IPixellyAddressRegistry)10101": {
              "label": "contract IPixellyAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPixellyAuction": {
        "src": "contracts/PixellyMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPixellyNFTFactory": {
        "src": "contracts/PixellyMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPixellyPriceFeed": {
        "src": "contracts/PixellyMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wETH()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PixellyMarketplace": {
        "src": "contracts/PixellyMarketplace.sol:71",
        "version": {
          "withMetadata": "7000acebd6aa609e82f41af3bea1e90969b2991a0cb39c2bffac97f1876e6d5a",
          "withoutMetadata": "14a55ad71772e728a7010dcd6383134a54e5e05078087267179684107b16312a",
          "linkedWithoutMetadata": "14a55ad71772e728a7010dcd6383134a54e5e05078087267179684107b16312a"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "buyItemWithQuantity(address,uint256,address,address,uint256)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)",
          "operatorSlot()",
          "operator()",
          "setOperator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PixellyMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts/PixellyMarketplace.sol:151"
            },
            {
              "contract": "PixellyMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts/PixellyMarketplace.sol:154"
            },
            {
              "contract": "PixellyMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)12375_storage)))",
              "src": "contracts/PixellyMarketplace.sol:157"
            },
            {
              "contract": "PixellyMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)12384_storage)))",
              "src": "contracts/PixellyMarketplace.sol:161"
            },
            {
              "contract": "PixellyMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts/PixellyMarketplace.sol:165"
            },
            {
              "contract": "PixellyMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyMarketplace.sol:168"
            },
            {
              "contract": "PixellyMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)12391_storage)",
              "src": "contracts/PixellyMarketplace.sol:171"
            },
            {
              "contract": "PixellyMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IPixellyAddressRegistry)12205",
              "src": "contracts/PixellyMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)12375_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct PixellyMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)12375_storage))": {
              "label": "mapping(uint256 => mapping(address => struct PixellyMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)12375_storage)": {
              "label": "mapping(address => struct PixellyMarketplace.Listing)"
            },
            "t_struct(Listing)12375_storage": {
              "label": "struct PixellyMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)12384_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct PixellyMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)12384_storage))": {
              "label": "mapping(uint256 => mapping(address => struct PixellyMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)12384_storage)": {
              "label": "mapping(address => struct PixellyMarketplace.Offer)"
            },
            "t_struct(Offer)12384_storage": {
              "label": "struct PixellyMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)2748"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)2748": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)12391_storage)": {
              "label": "mapping(address => struct PixellyMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)12391_storage": {
              "label": "struct PixellyMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IPixellyAddressRegistry)12205": {
              "label": "contract IPixellyAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyNFT": {
        "src": "contracts/PixellyNFT.sol:9",
        "version": {
          "withMetadata": "e2574c527499ea4a16647db1a416de3f8132e8d37a3535730cd268642679b9c0",
          "withoutMetadata": "8dc1445090413c29eecb5b03157e8b3734871b86b00c4a5a8a37515725a0889b",
          "linkedWithoutMetadata": "8dc1445090413c29eecb5b03157e8b3734871b86b00c4a5a8a37515725a0889b"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyNFT",
            "src": "contracts/PixellyNFT.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyNFT",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts/PixellyNFT.sol:26"
            },
            {
              "contract": "PixellyNFT",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/PixellyNFT.sol:29"
            },
            {
              "contract": "PixellyNFT",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyNFT.sol:32"
            },
            {
              "contract": "PixellyNFT",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyNFT.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyNFTFactory": {
        "src": "contracts/PixellyNFTFactory.sol:8",
        "version": {
          "withMetadata": "b44777c0b4ea1be0f9b39ec3ac4938c4eee625d71bb2b98835ced8e0b587d0e4",
          "withoutMetadata": "1bf3089b91c9d3f015e3939aa67a9a46dbe45b5c7712e9a1e1704da6d949feca",
          "linkedWithoutMetadata": "1bf3089b91c9d3f015e3939aa67a9a46dbe45b5c7712e9a1e1704da6d949feca"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyNFTFactory",
            "src": "contracts/PixellyNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/PixellyNFTFactory.sol:14"
            },
            {
              "contract": "PixellyNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyNFTFactory.sol:17"
            },
            {
              "contract": "PixellyNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyNFTFactory.sol:20"
            },
            {
              "contract": "PixellyNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/PixellyNFTFactory.sol:23"
            },
            {
              "contract": "PixellyNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyNFTFactory.sol:26"
            },
            {
              "contract": "PixellyNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyNFTFactory.sol:29"
            },
            {
              "contract": "PixellyNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/PixellyNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyNFTFactoryPrivate": {
        "src": "contracts/PixellyNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "3b80be27b92c8c6412bdef027df045a3be77bb7d37e62b1aa7088c90127476f3",
          "withoutMetadata": "dd67ccbd7907a4dd0bfad36f06418da3712518931bbd34a529e707b0ff1a34d7",
          "linkedWithoutMetadata": "dd67ccbd7907a4dd0bfad36f06418da3712518931bbd34a529e707b0ff1a34d7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyNFTFactoryPrivate",
            "src": "contracts/PixellyNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/PixellyNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "PixellyNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "PixellyNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "PixellyNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/PixellyNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "PixellyNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "PixellyNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "PixellyNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/PixellyNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyNFTTradable": {
        "src": "contracts/PixellyNFTTradable.sol:12",
        "version": {
          "withMetadata": "b8a39f94022bb641b4fd5ba2c82cc3c6df1e7e2058fda2b87401a0be34ea0010",
          "withoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b",
          "linkedWithoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyNFTTradable",
            "src": "contracts/PixellyNFTTradable.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/PixellyNFTTradable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/PixellyNFTTradable.sol:23"
            },
            {
              "contract": "PixellyNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyNFTTradable.sol:24"
            },
            {
              "contract": "PixellyNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyNFTTradable.sol:25"
            },
            {
              "contract": "PixellyNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/PixellyNFTTradable.sol:26"
            },
            {
              "contract": "PixellyNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyNFTTradable.sol:29"
            },
            {
              "contract": "PixellyNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyNFTTradable.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyNFTTradablePrivate": {
        "src": "contracts/PixellyNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "620b7e630417ea1005b8f0bf4d23323bb64345ac411cb8359c59021bb57474a6",
          "withoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9",
          "linkedWithoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyNFTTradablePrivate",
            "src": "contracts/PixellyNFTTradablePrivate.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/PixellyNFTTradablePrivate.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/PixellyNFTTradablePrivate.sol:23"
            },
            {
              "contract": "PixellyNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyNFTTradablePrivate.sol:24"
            },
            {
              "contract": "PixellyNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyNFTTradablePrivate.sol:25"
            },
            {
              "contract": "PixellyNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/PixellyNFTTradablePrivate.sol:26"
            },
            {
              "contract": "PixellyNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyNFTTradablePrivate.sol:29"
            },
            {
              "contract": "PixellyNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyNFTTradablePrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts/PixellyPriceFeed.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getCurrentPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PixellyPriceFeed": {
        "src": "contracts/PixellyPriceFeed.sol:20",
        "version": {
          "withMetadata": "45235b39da5ca92f994f317b44612677a1b65ba4bfade15160550e916d1be43d",
          "withoutMetadata": "af0495f81f0bf030d7bdf20ee5c54b8ef6bd33e7a6dc68354e12fd3a2395d54b",
          "linkedWithoutMetadata": "af0495f81f0bf030d7bdf20ee5c54b8ef6bd33e7a6dc68354e12fd3a2395d54b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyPriceFeed",
            "src": "contracts/PixellyPriceFeed.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/PixellyPriceFeed.sol:22"
            },
            {
              "contract": "PixellyPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts/PixellyPriceFeed.sol:25"
            },
            {
              "contract": "PixellyPriceFeed",
              "label": "wETH",
              "type": "t_address",
              "src": "contracts/PixellyPriceFeed.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyTokenRegistry": {
        "src": "contracts/PixellyTokenRegistry.sol:7",
        "version": {
          "withMetadata": "6ec6bf62fad3a0d0cd7fc05fce4aa80007f519b87ec671ac5a0326e9c190a193",
          "withoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86",
          "linkedWithoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PixellyTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/PixellyTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeSharingSystem": {
        "src": "contracts/Rewards/FeeSharingSystem.sol:15",
        "version": {
          "withMetadata": "f1298073490d69f76907f6faef2fabea82d8055993bf047ed36f6639e4965ae4",
          "withoutMetadata": "b775e3deca608a305eecc097f62b1192491d7a892b8a51f890570d883330d955",
          "linkedWithoutMetadata": "b775e3deca608a305eecc097f62b1192491d7a892b8a51f890570d883330d955"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ReentrancyGuard"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "deposit(uint256,bool)",
          "harvest()",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "updateRewards(uint256,uint256)",
          "calculatePendingRewards(address)",
          "calculateSharesValueInTART(address)",
          "calculateSharePriceInTART()",
          "lastRewardBlock()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeSharingSystem",
            "src": "contracts/Rewards/FeeSharingSystem.sol:76"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pixellyToken",
            "src": "contracts/Rewards/FeeSharingSystem.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/Rewards/FeeSharingSystem.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenDistributor",
            "src": "contracts/Rewards/FeeSharingSystem.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeSharingSystem",
              "label": "currentRewardPerBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:34"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "lastRewardAdjustment",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:37"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "lastUpdateBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:40"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "periodEndBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:43"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:46"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "totalShares",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:49"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)16410_storage)",
              "src": "contracts/Rewards/FeeSharingSystem.sol:51"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)16410_storage)": {
              "label": "mapping(address => struct FeeSharingSystem.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)16410_storage": {
              "label": "struct FeeSharingSystem.UserInfo",
              "members": [
                {
                  "label": "shares",
                  "type": "t_uint256"
                },
                {
                  "label": "userRewardPerTokenPaid",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyToken": {
        "src": "contracts/Rewards/PIxellyToken.sol:13",
        "version": {
          "withMetadata": "099e03306273cfb3d0a1ae90a618247217af63f7045221e237318d026e677ad2",
          "withoutMetadata": "099e03306273cfb3d0a1ae90a618247217af63f7045221e237318d026e677ad2",
          "linkedWithoutMetadata": "099e03306273cfb3d0a1ae90a618247217af63f7045221e237318d026e677ad2"
        },
        "inherit": [
          "IPixellyToken",
          "Ownable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,uint256)",
          "mint(address,uint256)",
          "SUPPLY_CAP()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyToken",
            "src": "contracts/Rewards/PIxellyToken.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_SUPPLY_CAP",
            "src": "contracts/Rewards/PIxellyToken.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StakingPoolForUniswapV2Tokens": {
        "src": "contracts/Rewards/PixellyStaking.sol:16",
        "version": {
          "withMetadata": "8881f47a8674406d9b7e89ec45f408013232ffd9c848c5a61705629f38b2c9b0",
          "withoutMetadata": "21a58aac2d8a5fbe04019ccba9220d57a41329a064c266f24f6f94ac97547e28",
          "linkedWithoutMetadata": "21a58aac2d8a5fbe04019ccba9220d57a41329a064c266f24f6f94ac97547e28"
        },
        "inherit": [
          "ReentrancyGuard",
          "Pausable",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "deposit(uint256)",
          "harvest()",
          "emergencyWithdraw()",
          "withdraw(uint256)",
          "adminRewardWithdraw(uint256)",
          "pause()",
          "unpause()",
          "updateRewardPerBlockAndEndBlock(uint256,uint256)",
          "calculatePendingRewards(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StakingPoolForUniswapV2Tokens",
            "src": "contracts/Rewards/PixellyStaking.sol:77"
          },
          {
            "kind": "state-variable-immutable",
            "name": "looksRareToken",
            "src": "contracts/Rewards/PixellyStaking.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "stakedToken",
            "src": "contracts/Rewards/PixellyStaking.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "START_BLOCK",
            "src": "contracts/Rewards/PixellyStaking.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "accTokenPerShare",
              "type": "t_uint256",
              "src": "contracts/Rewards/PixellyStaking.sol:37"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "endBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/PixellyStaking.sol:40"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "lastRewardBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/PixellyStaking.sol:43"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "rewardPerBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/PixellyStaking.sol:46"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)17293_storage)",
              "src": "contracts/Rewards/PixellyStaking.sol:49"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)17293_storage)": {
              "label": "mapping(address => struct StakingPoolForUniswapV2Tokens.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)17293_storage": {
              "label": "struct StakingPoolForUniswapV2Tokens.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PrivateSaleWithFeeSharing": {
        "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:15",
        "version": {
          "withMetadata": "ceba687a870c4a0de3373418f381175178c5a413f72be68ab1275cd175042110",
          "withoutMetadata": "ceba687a870c4a0de3373418f381175178c5a413f72be68ab1275cd175042110",
          "linkedWithoutMetadata": "ceba687a870c4a0de3373418f381175178c5a413f72be68ab1275cd175042110"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256)",
          "deposit()",
          "harvest()",
          "withdraw()",
          "updateSalePhaseToWithdraw()",
          "removeUserFromWhitelist(address)",
          "setAllocationCostPerTier(uint8,uint256)",
          "setBlockForWithdrawal(uint256)",
          "setPriceOfETHInTART(uint256)",
          "updateSalePhase(uint8)",
          "withdrawCommittedAmount()",
          "whitelistUsers(address[],uint8)",
          "calculatePendingRewards(address)",
          "getMaxAmountTARTToDistribute()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PrivateSaleWithFeeSharing",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:87"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pixellyToken",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "MAX_BLOCK_FOR_WITHDRAWAL",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TOTAL_TART_DISTRIBUTED",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "currentPhase",
              "type": "t_enum(SalePhase)18039",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:47"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "blockForWithdrawal",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:50"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "priceOfETHInTART",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:53"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "totalAmountCommitted",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:56"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "totalRewardTokensDistributedToStakers",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:59"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "allocationCostPerTier",
              "type": "t_mapping(t_uint8,t_uint256)",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:62"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "numberOfParticipantsForATier",
              "type": "t_mapping(t_uint8,t_uint256)",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:65"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)18048_storage)",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:68"
            }
          ],
          "types": {
            "t_enum(SalePhase)18039": {
              "label": "enum PrivateSaleWithFeeSharing.SalePhase",
              "members": [
                "Pending",
                "Deposit",
                "Over",
                "Staking",
                "Withdraw"
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_struct(UserInfo)18048_storage)": {
              "label": "mapping(address => struct PrivateSaleWithFeeSharing.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)18048_storage": {
              "label": "struct PrivateSaleWithFeeSharing.UserInfo",
              "members": [
                {
                  "label": "rewardsDistributedToAccount",
                  "type": "t_uint256"
                },
                {
                  "label": "tier",
                  "type": "t_uint8"
                },
                {
                  "label": "hasDeposited",
                  "type": "t_bool"
                },
                {
                  "label": "hasWithdrawn",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TokenDistributor": {
        "src": "contracts/Rewards/TokenDistributor.sol:14",
        "version": {
          "withMetadata": "ea5f9e1ca8d908bbe3bd9fe654aa0d1e3eddd7cd933cbeec4dc5b1165e1799ea",
          "withoutMetadata": "ea5f9e1ca8d908bbe3bd9fe654aa0d1e3eddd7cd933cbeec4dc5b1165e1799ea",
          "linkedWithoutMetadata": "ea5f9e1ca8d908bbe3bd9fe654aa0d1e3eddd7cd933cbeec4dc5b1165e1799ea"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256[],uint256[],uint256[],uint256)",
          "deposit(uint256)",
          "harvestAndCompound()",
          "updatePool()",
          "withdraw(uint256)",
          "withdrawAll()",
          "calculatePendingRewards(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenDistributor",
            "src": "contracts/Rewards/TokenDistributor.sol:95"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pixellyToken",
            "src": "contracts/Rewards/TokenDistributor.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenSplitter",
            "src": "contracts/Rewards/TokenDistributor.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "NUMBER_PERIODS",
            "src": "contracts/Rewards/TokenDistributor.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "START_BLOCK",
            "src": "contracts/Rewards/TokenDistributor.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TokenDistributor",
              "label": "accTokenPerShare",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:43"
            },
            {
              "contract": "TokenDistributor",
              "label": "currentPhase",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:46"
            },
            {
              "contract": "TokenDistributor",
              "label": "endBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:49"
            },
            {
              "contract": "TokenDistributor",
              "label": "lastRewardBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:52"
            },
            {
              "contract": "TokenDistributor",
              "label": "rewardPerBlockForOthers",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:55"
            },
            {
              "contract": "TokenDistributor",
              "label": "rewardPerBlockForStaking",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:58"
            },
            {
              "contract": "TokenDistributor",
              "label": "totalAmountStaked",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:61"
            },
            {
              "contract": "TokenDistributor",
              "label": "stakingPeriod",
              "type": "t_mapping(t_uint256,t_struct(StakingPeriod)18993_storage)",
              "src": "contracts/Rewards/TokenDistributor.sol:63"
            },
            {
              "contract": "TokenDistributor",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)18998_storage)",
              "src": "contracts/Rewards/TokenDistributor.sol:65"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(StakingPeriod)18993_storage)": {
              "label": "mapping(uint256 => struct TokenDistributor.StakingPeriod)"
            },
            "t_struct(StakingPeriod)18993_storage": {
              "label": "struct TokenDistributor.StakingPeriod",
              "members": [
                {
                  "label": "rewardPerBlockForStaking",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardPerBlockForOthers",
                  "type": "t_uint256"
                },
                {
                  "label": "periodLengthInBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(UserInfo)18998_storage)": {
              "label": "mapping(address => struct TokenDistributor.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)18998_storage": {
              "label": "struct TokenDistributor.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TokenSplitter": {
        "src": "contracts/Rewards/TokenSplitter.sol:12",
        "version": {
          "withMetadata": "a42e5b325c931346fc9dd8c23942a83bdcd2cba2c528326321602203cf5f2d3e",
          "withoutMetadata": "a72fe2722efcb83b302ab8c65b86a72a0043ab2f90a95e72df7db26685c5d30c",
          "linkedWithoutMetadata": "a72fe2722efcb83b302ab8c65b86a72a0043ab2f90a95e72df7db26685c5d30c"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address[],uint256[],address)",
          "releaseTokens(address)",
          "updateSharesOwner(address,address)",
          "calculatePendingRewards(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenSplitter",
            "src": "contracts/Rewards/TokenSplitter.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TOTAL_SHARES",
            "src": "contracts/Rewards/TokenSplitter.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pixellyToken",
            "src": "contracts/Rewards/TokenSplitter.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TokenSplitter",
              "label": "totalTokensDistributed",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenSplitter.sol:25"
            },
            {
              "contract": "TokenSplitter",
              "label": "accountInfo",
              "type": "t_mapping(t_address,t_struct(AccountInfo)19982_storage)",
              "src": "contracts/Rewards/TokenSplitter.sol:27"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(AccountInfo)19982_storage)": {
              "label": "mapping(address => struct TokenSplitter.AccountInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(AccountInfo)19982_storage": {
              "label": "struct TokenSplitter.AccountInfo",
              "members": [
                {
                  "label": "shares",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensDistributedToAccount",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TradingRewardsDistributor": {
        "src": "contracts/Rewards/TradingRewardsDistributor.sol:14",
        "version": {
          "withMetadata": "f12cc56e7581b81927640afab7ec38652696ab24f5f4fac349c1c99e64dc4fbd",
          "withoutMetadata": "aeb227c4ce8e33f363d4db12442cb4d0a30c70681a89208c207e175dcc0bd53e",
          "linkedWithoutMetadata": "aeb227c4ce8e33f363d4db12442cb4d0a30c70681a89208c207e175dcc0bd53e"
        },
        "inherit": [
          "Ownable",
          "ReentrancyGuard",
          "Pausable",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "MerkleProof"
        ],
        "methods": [
          "(address)",
          "claim(uint256,bytes32[])",
          "updateTradingRewards(bytes32,uint256)",
          "pauseDistribution()",
          "unpauseDistribution()",
          "withdrawTokenRewards(uint256)",
          "canClaim(address,uint256,bytes32[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TradingRewardsDistributor",
            "src": "contracts/Rewards/TradingRewardsDistributor.sol:55"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pixellyToken",
            "src": "contracts/Rewards/TradingRewardsDistributor.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TradingRewardsDistributor",
              "label": "currentRewardRound",
              "type": "t_uint256",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:22"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "lastPausedTimestamp",
              "type": "t_uint256",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:25"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "maximumAmountPerUserInCurrentTree",
              "type": "t_uint256",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:28"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "amountClaimedByUser",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:31"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "merkleRootOfRewardRound",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:34"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "merkleRootUsed",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:37"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "hasUserClaimedForRewardRound",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VestingContractWithFeeSharing": {
        "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:13",
        "version": {
          "withMetadata": "1507bcce7755ee8b2d4f06c322ecfa02291dba290c752fa579653f34246fa7ca",
          "withoutMetadata": "05681e687243b327ed1e56ba240b0180e209aaf089ce4b7afdd1639661b2c1b4",
          "linkedWithoutMetadata": "05681e687243b327ed1e56ba240b0180e209aaf089ce4b7afdd1639661b2c1b4"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(uint256,uint256,uint256,uint256,address)",
          "unlockLooksRareToken()",
          "withdrawOtherCurrency(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingContractWithFeeSharing",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pixellyToken",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "NUMBER_UNLOCK_PERIODS",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "STANDARD_AMOUNT_UNLOCKED_AT_EACH_UNLOCK",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "START_BLOCK",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "VESTING_BETWEEN_PERIODS_IN_BLOCKS",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingContractWithFeeSharing",
              "label": "maxAmountToWithdrawForNextPeriod",
              "type": "t_uint256",
              "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:31"
            },
            {
              "contract": "VestingContractWithFeeSharing",
              "label": "nextBlockForUnlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:34"
            },
            {
              "contract": "VestingContractWithFeeSharing",
              "label": "numberPastUnlocks",
              "type": "t_uint256",
              "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPixellyToken": {
        "src": "contracts/Rewards/interfaces/IPixellyToken.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "SUPPLY_CAP()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts/Upgrades/AdminUpgradeabilityProxy.sol:15",
        "version": {
          "withMetadata": "4badfe636dd239bcc6a113bd6f6c39e93a2dc07f9cd76fbc4d3c25f61a615c28",
          "withoutMetadata": "4badfe636dd239bcc6a113bd6f6c39e93a2dc07f9cd76fbc4d3c25f61a615c28",
          "linkedWithoutMetadata": "4badfe636dd239bcc6a113bd6f6c39e93a2dc07f9cd76fbc4d3c25f61a615c28"
        },
        "inherit": [
          "UpgradeableProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts/Upgrades/AdminUpgradeabilityProxy.sol:25"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/Upgrades/AdminUpgradeabilityProxy.sol:103"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts/Upgrades/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "728d862716ecfeb529e266cc3d304b4481ebce475bc539b4b434e3ce8549686f",
          "withoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72",
          "linkedWithoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeableProxy": {
        "src": "contracts/Upgrades/UpgradeableProxy.sol:17",
        "version": {
          "withMetadata": "a3d5dc7b576d487bacf1eca88509c9a9aa5c42515e53d325ceaabf217b1b5b35",
          "withoutMetadata": "a3d5dc7b576d487bacf1eca88509c9a9aa5c42515e53d325ceaabf217b1b5b35",
          "linkedWithoutMetadata": "a3d5dc7b576d487bacf1eca88509c9a9aa5c42515e53d325ceaabf217b1b5b35"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableProxy",
            "src": "contracts/Upgrades/UpgradeableProxy.sol:24"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts/library/ERC1155.sol:12",
        "version": {
          "withMetadata": "4f7758aaf073d8af6ccf5183c389c2ba027b6318cc8a4327960c62c6a224cf32",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/library/ERC1155.sol:26"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/library/ERC1155.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts/library/ERC1155Metadata.sol:10",
        "version": {
          "withMetadata": "22f0def7dd847734397d8ab2c9784174764a320bb281b7979b2f41f91fa3c1b8",
          "withoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021",
          "linkedWithoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts/library/ERC1155Metadata.sol:13"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts/library/ERC1155MintBurn.sol:10",
        "version": {
          "withMetadata": "aac939b704517d1f2525b44a9d409c32b3a5006b70cb84f471fce96b07236e5a",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC2981": {
        "src": "contracts/library/ERC2981.sol:10",
        "inherit": [
          "IERC2981RoyaltySetter",
          "IERC2981Royalties",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC2981Base": {
        "src": "contracts/library/ERC2981Base.sol:9",
        "inherit": [
          "IERC2981Royalties",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC2981Base",
              "label": "_royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)22413_storage))",
              "src": "contracts/library/ERC2981Base.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)22413_storage))": {
              "label": "mapping(address => mapping(uint256 => struct ERC2981Base.RoyaltyInfo))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)22413_storage)": {
              "label": "mapping(uint256 => struct ERC2981Base.RoyaltyInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(RoyaltyInfo)22413_storage": {
              "label": "struct ERC2981Base.RoyaltyInfo",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "royaltyPercent",
                  "type": "t_uint16"
                }
              ]
            },
            "t_uint16": {
              "label": "uint16"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC2981PerTokenRoyalties": {
        "src": "contracts/library/ERC2981PerTokenRoyalties.sol:7",
        "inherit": [
          "ERC2981",
          "IERC2981RoyaltySetter",
          "IERC2981Royalties",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "setDefaultRoyalty(address,uint16)",
          "setTokenRoyalty(uint256,address,uint16)",
          "royaltyInfo(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC2981PerTokenRoyalties",
              "label": "_royalties",
              "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)22367_storage)",
              "src": "contracts/library/ERC2981PerTokenRoyalties.sol:8"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)22367_storage)": {
              "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(RoyaltyInfo)22367_storage": {
              "label": "struct ERC2981.RoyaltyInfo",
              "members": [
                {
                  "label": "recipient",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint24"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_uint24": {
              "label": "uint24"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FixedPoint": {
        "src": "contracts/library/FixedPoint.sol:5",
        "version": {
          "withMetadata": "f5773288aa3b9fda6e316692ed3901b39e186144700422723a2cbf42bb2fe13f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts/library/IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC2981Royalties": {
        "src": "contracts/library/IERC2981Royalties.sol:7",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "royaltyInfo(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC2981RoyaltySetter": {
        "src": "contracts/library/IERC2981RoyaltySetter.sol:7",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "setDefaultRoyalty(address,uint16)",
          "setTokenRoyalty(uint256,address,uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/library/IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/library/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OracleLibrary": {
        "src": "contracts/library/OracleLibrary.sol:8",
        "version": {
          "withMetadata": "2776d44382c9e82295df8a51f02b5c9bf77ba74d223ea93bc75cbcf6e4cfb7da",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "FixedPoint"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/library/UniswapV2Library.sol:7",
        "version": {
          "withMetadata": "a941831ccfa4a17fdf81e3e7dc42eac6c3e9a04425a650395b981061415ab890",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts/mock/BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "aeb75caf3cbcefdadbf3c2db47487279b791171da64320e6a01c9670219ccd0a",
          "withoutMetadata": "f16feedc84b2c164217f0a3c0c7c7ef7e7ec09984915c9f9601de051c36efdcb",
          "linkedWithoutMetadata": "f16feedc84b2c164217f0a3c0c7c7ef7e7ec09984915c9f9601de051c36efdcb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts/mock/BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(PixellyAuction)10073",
              "src": "contracts/mock/BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(PixellyAuction)10073": {
              "label": "contract PixellyAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:7",
        "version": {
          "withMetadata": "f6bf27ebe525638474b4b3d6c79ce37fa1a36fade0b92465b899194e8b783f9a",
          "withoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957",
          "linkedWithoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockPixellyAuction": {
        "src": "contracts/mock/MockPixellyAuction.sol:7",
        "version": {
          "withMetadata": "c6b0d0c9ce2b87c559061fa6343695a59bd668d310e642281b82514ef00ccfc4",
          "withoutMetadata": "2727f080d84e34316cf6b732ba0596d54c5c003f4d0bd0bcf5ff98489fd2f09e",
          "linkedWithoutMetadata": "2727f080d84e34316cf6b732ba0596d54c5c003f4d0bd0bcf5ff98489fd2f09e"
        },
        "inherit": [
          "PixellyAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "setTime(uint256)",
          "increaseTime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MockPixellyAuction",
              "label": "time",
              "type": "t_uint256",
              "src": "contracts/mock/MockPixellyAuction.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyAuctionMock": {
        "src": "contracts/mock/PixellyAuctionMock.sol:7",
        "version": {
          "withMetadata": "e93abbd3bb093782c2ac835d8a2c6da9f07b5d3d2f7a5cb5fcb6b69a1ddd770d",
          "withoutMetadata": "2bfc14b255500e3df0b8c38c011b9b8297ea45314885314870ca6d760f93e377",
          "linkedWithoutMetadata": "2bfc14b255500e3df0b8c38c011b9b8297ea45314885314870ca6d760f93e377"
        },
        "inherit": [
          "PixellyAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PixellyAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts/mock/PixellyAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "contracts/library/SafeMath.sol:5",
        "version": {
          "withMetadata": "25b813288c40d5963312c5ef6e94bde28e7e77c95c5c659d5cd2666878dd6b20",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MerkleProof": {
        "src": "@openzeppelin/contracts/cryptography/MerkleProof.sol:8",
        "version": {
          "withMetadata": "e4c1a7894a06b1c2edf4951f92346a8c87ca32adf7ffd354954ba1e9195a9b23",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/introspection/ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin/contracts/introspection/ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin/contracts/introspection/ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts/library/IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/library/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:21",
        "version": {
          "withMetadata": "6159e5b8b162df16ddf823478e6d2f5f1c6289fe3985e922be50f8f8ba411d0b",
          "withoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033",
          "linkedWithoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)5400_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4777_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)5400_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)5400_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)5014_storage"
                }
              ]
            },
            "t_struct(Set)5014_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4777_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)4459_storage"
                }
              ]
            },
            "t_struct(Map)4459_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)4451_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)4451_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)4451_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721Holder.sol:13",
        "version": {
          "withMetadata": "392be09826fc835d08e8d319baddb8e3dc10707ec5af5dd6ecc847bb9d816d6a",
          "withoutMetadata": "137df6a6efa04ae24dbffb1da379b99cbf88bb7fa99ca9af2db6ad24197185b0",
          "linkedWithoutMetadata": "137df6a6efa04ae24dbffb1da379b99cbf88bb7fa99ca9af2db6ad24197185b0"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin/contracts/utils/EnumerableMap.sol:29",
        "version": {
          "withMetadata": "33db0abc4b4d1da32aed25dc771cc00a3efa31fff5d6d984c64d230b001e4165",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "4f51efe115648bafc40e8dcb6d91da10d2c3805f4d3f7a23f58ceb3aa49f6aac",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/utils/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "74ef6d7234587add3006addc68209e5df580602fb30a593c7df5114b91053bef",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Oracle": {
        "src": "contracts/Oracle/Oracle.sol:14",
        "version": {
          "withMetadata": "3c0730c03bad63b29055bd007504087505d0e3ab3799caea082b25acd5212256",
          "withoutMetadata": "1c5bac7ebe8ffd0a679123716d693a0b78694a611d7782724a31e900927b84be",
          "linkedWithoutMetadata": "1c5bac7ebe8ffd0a679123716d693a0b78694a611d7782724a31e900927b84be"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "FixedPoint",
          "SafeMath",
          "EnumerableSet",
          "UniswapV2Library",
          "OracleLibrary"
        ],
        "methods": [
          "(address,address)",
          "update(address,address)",
          "updateBlockInfo()",
          "getQuantity(address,uint256)",
          "getAveragePrice(address)",
          "getCurrentPrice(address)",
          "getLpTokenValue(address,uint256)",
          "getAverageBlockTime()",
          "addRouterToken(address)",
          "delRouterToken(address)",
          "getRouterTokenLength()",
          "isRouterToken(address)",
          "getRouterToken(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Oracle",
            "src": "contracts/Oracle/Oracle.sol:39"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Oracle/Oracle.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "anchorToken",
            "src": "contracts/Oracle/Oracle.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Oracle",
              "label": "_routerTokens",
              "type": "t_struct(AddressSet)5279_storage",
              "src": "contracts/Oracle/Oracle.sol:18"
            },
            {
              "contract": "Oracle",
              "label": "blockInfo",
              "type": "t_struct(BlockInfo)5748_storage",
              "src": "contracts/Oracle/Oracle.sol:34"
            },
            {
              "contract": "Oracle",
              "label": "pairObservations",
              "type": "t_mapping(t_address,t_struct(Observation)5743_storage)",
              "src": "contracts/Oracle/Oracle.sol:37"
            }
          ],
          "types": {
            "t_struct(AddressSet)5279_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)5014_storage"
                }
              ]
            },
            "t_struct(Set)5014_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(BlockInfo)5748_storage": {
              "label": "struct Oracle.BlockInfo",
              "members": [
                {
                  "label": "height",
                  "type": "t_uint256"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Observation)5743_storage)": {
              "label": "mapping(address => struct Oracle.Observation)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Observation)5743_storage": {
              "label": "struct Oracle.Observation",
              "members": [
                {
                  "label": "timestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "price0Cumulative",
                  "type": "t_uint256"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyAddressRegistry": {
        "src": "contracts/PixellyAddressRegistry.sol:8",
        "version": {
          "withMetadata": "d2348568e5bc8e68a2e8d1edb1c46baff3c22d0075ea955c9c34c9647b3248e7",
          "withoutMetadata": "29450f2c353009483451469a387cce8f426e742b1ebe166fcfe4167d19d3601b",
          "linkedWithoutMetadata": "29450f2c353009483451469a387cce8f426e742b1ebe166fcfe4167d19d3601b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updatePixelly(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PixellyAddressRegistry",
              "label": "pixellyNFT",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:12"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:15"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:18"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:21"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:24"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:27"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:30"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:33"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:36"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyArtFactory": {
        "src": "contracts/PixellyArtFactory.sol:8",
        "version": {
          "withMetadata": "55650c9d1899154f9bd502b654c623e153439aa7cda5d446086ce710ca86e0ce",
          "withoutMetadata": "95e6c482d7c2dd93b6ad5be4270412300e3630a0b9263e8438a499c347fae2d6",
          "linkedWithoutMetadata": "95e6c482d7c2dd93b6ad5be4270412300e3630a0b9263e8438a499c347fae2d6"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyArtFactory",
            "src": "contracts/PixellyArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyArtFactory.sol:14"
            },
            {
              "contract": "PixellyArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyArtFactory.sol:17"
            },
            {
              "contract": "PixellyArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/PixellyArtFactory.sol:20"
            },
            {
              "contract": "PixellyArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyArtFactory.sol:23"
            },
            {
              "contract": "PixellyArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyArtFactory.sol:26"
            },
            {
              "contract": "PixellyArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/PixellyArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyArtFactoryPrivate": {
        "src": "contracts/PixellyArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "6929a3424f76580ef886846ae786a294a852d72be69f932d07ad67b835c909f9",
          "withoutMetadata": "cb4f36bb02c3f9bdd61ffa54f50eb18d1a5e292cb4e34746301b65d5f1abf57d",
          "linkedWithoutMetadata": "cb4f36bb02c3f9bdd61ffa54f50eb18d1a5e292cb4e34746301b65d5f1abf57d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyArtFactoryPrivate",
            "src": "contracts/PixellyArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyArtFactoryPrivate.sol:14"
            },
            {
              "contract": "PixellyArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyArtFactoryPrivate.sol:17"
            },
            {
              "contract": "PixellyArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/PixellyArtFactoryPrivate.sol:20"
            },
            {
              "contract": "PixellyArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyArtFactoryPrivate.sol:23"
            },
            {
              "contract": "PixellyArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyArtFactoryPrivate.sol:26"
            },
            {
              "contract": "PixellyArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/PixellyArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts/PixellyArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "d41a22734631030536ad7e75efaaa80e798928fb5a398d2b7e5213c62cbefe9e",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PixellyArtTradable": {
        "src": "contracts/PixellyArtTradable.sol:22",
        "version": {
          "withMetadata": "984589630bed349fa321419c1d3321e33636168adf44fbbecb7ad11216891c3e",
          "withoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b",
          "linkedWithoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyArtTradable",
            "src": "contracts/PixellyArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/PixellyArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/PixellyArtTradable.sol:28"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/PixellyArtTradable.sol:31"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/PixellyArtTradable.sol:33"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/PixellyArtTradable.sol:34"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/PixellyArtTradable.sol:37"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/PixellyArtTradable.sol:39"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyArtTradable.sol:41"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyArtTradable.sol:43"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyArtTradable.sol:45"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts/PixellyArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "c8b92a6d7568252f950c7b0a36b418f2d159fd8c41a09dec94e29dcc03813cd9",
          "withoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d",
          "linkedWithoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)7630)",
              "src": "contracts/PixellyArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)7630)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)7630": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyArtTradablePrivate": {
        "src": "contracts/PixellyArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "9dd8a89b6d4646f67b116ea25571da78fa750c37356757979c6fcf4c7bcd342d",
          "withoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9",
          "linkedWithoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyArtTradablePrivate",
            "src": "contracts/PixellyArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/PixellyArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/PixellyArtTradablePrivate.sol:28"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/PixellyArtTradablePrivate.sol:31"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/PixellyArtTradablePrivate.sol:33"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/PixellyArtTradablePrivate.sol:34"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/PixellyArtTradablePrivate.sol:37"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/PixellyArtTradablePrivate.sol:39"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyArtTradablePrivate.sol:41"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyArtTradablePrivate.sol:43"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyArtTradablePrivate.sol:45"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPixellyAddressRegistry": {
        "src": "contracts/PixellyPriceFeed.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPixellyBundleMarketplace": {
        "src": "contracts/PixellyMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPixellyMarketplace": {
        "src": "contracts/PixellyBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPixellyTokenRegistry": {
        "src": "contracts/PixellyPriceFeed.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PixellyAuction": {
        "src": "contracts/PixellyAuction.sol:56",
        "version": {
          "withMetadata": "4b546cd12991c1aa37c97f6343361cf50f0a2ce350ae0fd35920c33cfacd7a04",
          "withoutMetadata": "79c283fbefc3a2f6c7d809e8a21ca36d9972d179296d40dbddc28d44f78fa86f",
          "linkedWithoutMetadata": "79c283fbefc3a2f6c7d809e8a21ca36d9972d179296d40dbddc28d44f78fa86f"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "resultFailedAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)",
          "operatorSlot()",
          "operator()",
          "setOperator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts/PixellyAuction.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts/PixellyAuction.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts/PixellyAuction.sol:163"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)8154_storage))",
              "src": "contracts/PixellyAuction.sol:151"
            },
            {
              "contract": "PixellyAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)8161_storage))",
              "src": "contracts/PixellyAuction.sol:154"
            },
            {
              "contract": "PixellyAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts/PixellyAuction.sol:157"
            },
            {
              "contract": "PixellyAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts/PixellyAuction.sol:160"
            },
            {
              "contract": "PixellyAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyAuction.sol:163"
            },
            {
              "contract": "PixellyAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyAuction.sol:166"
            },
            {
              "contract": "PixellyAuction",
              "label": "addressRegistry",
              "type": "t_contract(IPixellyAddressRegistry)7959",
              "src": "contracts/PixellyAuction.sol:169"
            },
            {
              "contract": "PixellyAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts/PixellyAuction.sol:172"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)8154_storage))": {
              "label": "mapping(address => mapping(uint256 => struct PixellyAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)8154_storage)": {
              "label": "mapping(uint256 => struct PixellyAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)8154_storage": {
              "label": "struct PixellyAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)8161_storage))": {
              "label": "mapping(address => mapping(uint256 => struct PixellyAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)8161_storage)": {
              "label": "mapping(uint256 => struct PixellyAuction.HighestBid)"
            },
            "t_struct(HighestBid)8161_storage": {
              "label": "struct PixellyAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IPixellyAddressRegistry)7959": {
              "label": "contract IPixellyAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyBundleMarketplace": {
        "src": "contracts/PixellyBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "c19755395edca8d3f50c150c1f3ed5391fb1fb74954bf4950834e92a5cff6319",
          "withoutMetadata": "1ebe0e848d5792f8c946e1936742a012092283d33886e629fffcdf5071cc7203",
          "linkedWithoutMetadata": "1ebe0e848d5792f8c946e1936742a012092283d33886e629fffcdf5071cc7203"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20Upgradeable",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PixellyBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)10238_storage))",
              "src": "contracts/PixellyBundleMarketplace.sol:106"
            },
            {
              "contract": "PixellyBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/PixellyBundleMarketplace.sol:109"
            },
            {
              "contract": "PixellyBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)5194_storage))",
              "src": "contracts/PixellyBundleMarketplace.sol:111"
            },
            {
              "contract": "PixellyBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts/PixellyBundleMarketplace.sol:113"
            },
            {
              "contract": "PixellyBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts/PixellyBundleMarketplace.sol:115"
            },
            {
              "contract": "PixellyBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)10245_storage))",
              "src": "contracts/PixellyBundleMarketplace.sol:118"
            },
            {
              "contract": "PixellyBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyBundleMarketplace.sol:121"
            },
            {
              "contract": "PixellyBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyBundleMarketplace.sol:124"
            },
            {
              "contract": "PixellyBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IPixellyAddressRegistry)10101",
              "src": "contracts/PixellyBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)10238_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct PixellyBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)10238_storage)": {
              "label": "mapping(bytes32 => struct PixellyBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)10238_storage": {
              "label": "struct PixellyBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)5194_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)5194_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)5194_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)5014_storage"
                }
              ]
            },
            "t_struct(Set)5014_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)10245_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct PixellyBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10245_storage)": {
              "label": "mapping(address => struct PixellyBundleMarketplace.Offer)"
            },
            "t_struct(Offer)10245_storage": {
              "label": "struct PixellyBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20Upgradeable)825"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)825": {
              "label": "contract IERC20Upgradeable"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IPixellyAddressRegistry)10101": {
              "label": "contract IPixellyAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPixellyAuction": {
        "src": "contracts/PixellyMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPixellyNFTFactory": {
        "src": "contracts/PixellyMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPixellyPriceFeed": {
        "src": "contracts/PixellyMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wETH()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PixellyMarketplace": {
        "src": "contracts/PixellyMarketplace.sol:71",
        "version": {
          "withMetadata": "7000acebd6aa609e82f41af3bea1e90969b2991a0cb39c2bffac97f1876e6d5a",
          "withoutMetadata": "14a55ad71772e728a7010dcd6383134a54e5e05078087267179684107b16312a",
          "linkedWithoutMetadata": "14a55ad71772e728a7010dcd6383134a54e5e05078087267179684107b16312a"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "buyItemWithQuantity(address,uint256,address,address,uint256)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)",
          "operatorSlot()",
          "operator()",
          "setOperator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PixellyMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts/PixellyMarketplace.sol:151"
            },
            {
              "contract": "PixellyMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts/PixellyMarketplace.sol:154"
            },
            {
              "contract": "PixellyMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)12375_storage)))",
              "src": "contracts/PixellyMarketplace.sol:157"
            },
            {
              "contract": "PixellyMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)12384_storage)))",
              "src": "contracts/PixellyMarketplace.sol:161"
            },
            {
              "contract": "PixellyMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts/PixellyMarketplace.sol:165"
            },
            {
              "contract": "PixellyMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyMarketplace.sol:168"
            },
            {
              "contract": "PixellyMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)12391_storage)",
              "src": "contracts/PixellyMarketplace.sol:171"
            },
            {
              "contract": "PixellyMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IPixellyAddressRegistry)12205",
              "src": "contracts/PixellyMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)12375_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct PixellyMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)12375_storage))": {
              "label": "mapping(uint256 => mapping(address => struct PixellyMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)12375_storage)": {
              "label": "mapping(address => struct PixellyMarketplace.Listing)"
            },
            "t_struct(Listing)12375_storage": {
              "label": "struct PixellyMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)12384_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct PixellyMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)12384_storage))": {
              "label": "mapping(uint256 => mapping(address => struct PixellyMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)12384_storage)": {
              "label": "mapping(address => struct PixellyMarketplace.Offer)"
            },
            "t_struct(Offer)12384_storage": {
              "label": "struct PixellyMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)2748"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)2748": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)12391_storage)": {
              "label": "mapping(address => struct PixellyMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)12391_storage": {
              "label": "struct PixellyMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IPixellyAddressRegistry)12205": {
              "label": "contract IPixellyAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyNFT": {
        "src": "contracts/PixellyNFT.sol:9",
        "version": {
          "withMetadata": "e2574c527499ea4a16647db1a416de3f8132e8d37a3535730cd268642679b9c0",
          "withoutMetadata": "8dc1445090413c29eecb5b03157e8b3734871b86b00c4a5a8a37515725a0889b",
          "linkedWithoutMetadata": "8dc1445090413c29eecb5b03157e8b3734871b86b00c4a5a8a37515725a0889b"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyNFT",
            "src": "contracts/PixellyNFT.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyNFT",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts/PixellyNFT.sol:26"
            },
            {
              "contract": "PixellyNFT",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/PixellyNFT.sol:29"
            },
            {
              "contract": "PixellyNFT",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyNFT.sol:32"
            },
            {
              "contract": "PixellyNFT",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyNFT.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyNFTFactory": {
        "src": "contracts/PixellyNFTFactory.sol:8",
        "version": {
          "withMetadata": "b44777c0b4ea1be0f9b39ec3ac4938c4eee625d71bb2b98835ced8e0b587d0e4",
          "withoutMetadata": "1bf3089b91c9d3f015e3939aa67a9a46dbe45b5c7712e9a1e1704da6d949feca",
          "linkedWithoutMetadata": "1bf3089b91c9d3f015e3939aa67a9a46dbe45b5c7712e9a1e1704da6d949feca"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyNFTFactory",
            "src": "contracts/PixellyNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/PixellyNFTFactory.sol:14"
            },
            {
              "contract": "PixellyNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyNFTFactory.sol:17"
            },
            {
              "contract": "PixellyNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyNFTFactory.sol:20"
            },
            {
              "contract": "PixellyNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/PixellyNFTFactory.sol:23"
            },
            {
              "contract": "PixellyNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyNFTFactory.sol:26"
            },
            {
              "contract": "PixellyNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyNFTFactory.sol:29"
            },
            {
              "contract": "PixellyNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/PixellyNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyNFTFactoryPrivate": {
        "src": "contracts/PixellyNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "3b80be27b92c8c6412bdef027df045a3be77bb7d37e62b1aa7088c90127476f3",
          "withoutMetadata": "dd67ccbd7907a4dd0bfad36f06418da3712518931bbd34a529e707b0ff1a34d7",
          "linkedWithoutMetadata": "dd67ccbd7907a4dd0bfad36f06418da3712518931bbd34a529e707b0ff1a34d7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyNFTFactoryPrivate",
            "src": "contracts/PixellyNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/PixellyNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "PixellyNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "PixellyNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "PixellyNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/PixellyNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "PixellyNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "PixellyNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "PixellyNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/PixellyNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyNFTTradable": {
        "src": "contracts/PixellyNFTTradable.sol:12",
        "version": {
          "withMetadata": "b8a39f94022bb641b4fd5ba2c82cc3c6df1e7e2058fda2b87401a0be34ea0010",
          "withoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b",
          "linkedWithoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyNFTTradable",
            "src": "contracts/PixellyNFTTradable.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/PixellyNFTTradable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/PixellyNFTTradable.sol:23"
            },
            {
              "contract": "PixellyNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyNFTTradable.sol:24"
            },
            {
              "contract": "PixellyNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyNFTTradable.sol:25"
            },
            {
              "contract": "PixellyNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/PixellyNFTTradable.sol:26"
            },
            {
              "contract": "PixellyNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyNFTTradable.sol:29"
            },
            {
              "contract": "PixellyNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyNFTTradable.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyNFTTradablePrivate": {
        "src": "contracts/PixellyNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "620b7e630417ea1005b8f0bf4d23323bb64345ac411cb8359c59021bb57474a6",
          "withoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9",
          "linkedWithoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyNFTTradablePrivate",
            "src": "contracts/PixellyNFTTradablePrivate.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/PixellyNFTTradablePrivate.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/PixellyNFTTradablePrivate.sol:23"
            },
            {
              "contract": "PixellyNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyNFTTradablePrivate.sol:24"
            },
            {
              "contract": "PixellyNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyNFTTradablePrivate.sol:25"
            },
            {
              "contract": "PixellyNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/PixellyNFTTradablePrivate.sol:26"
            },
            {
              "contract": "PixellyNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyNFTTradablePrivate.sol:29"
            },
            {
              "contract": "PixellyNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyNFTTradablePrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts/PixellyPriceFeed.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getCurrentPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PixellyPriceFeed": {
        "src": "contracts/PixellyPriceFeed.sol:20",
        "version": {
          "withMetadata": "45235b39da5ca92f994f317b44612677a1b65ba4bfade15160550e916d1be43d",
          "withoutMetadata": "af0495f81f0bf030d7bdf20ee5c54b8ef6bd33e7a6dc68354e12fd3a2395d54b",
          "linkedWithoutMetadata": "af0495f81f0bf030d7bdf20ee5c54b8ef6bd33e7a6dc68354e12fd3a2395d54b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyPriceFeed",
            "src": "contracts/PixellyPriceFeed.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/PixellyPriceFeed.sol:22"
            },
            {
              "contract": "PixellyPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts/PixellyPriceFeed.sol:25"
            },
            {
              "contract": "PixellyPriceFeed",
              "label": "wETH",
              "type": "t_address",
              "src": "contracts/PixellyPriceFeed.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyTokenRegistry": {
        "src": "contracts/PixellyTokenRegistry.sol:7",
        "version": {
          "withMetadata": "6ec6bf62fad3a0d0cd7fc05fce4aa80007f519b87ec671ac5a0326e9c190a193",
          "withoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86",
          "linkedWithoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PixellyTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/PixellyTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeSharingSystem": {
        "src": "contracts/Rewards/FeeSharingSystem.sol:15",
        "version": {
          "withMetadata": "f1298073490d69f76907f6faef2fabea82d8055993bf047ed36f6639e4965ae4",
          "withoutMetadata": "b775e3deca608a305eecc097f62b1192491d7a892b8a51f890570d883330d955",
          "linkedWithoutMetadata": "b775e3deca608a305eecc097f62b1192491d7a892b8a51f890570d883330d955"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ReentrancyGuard"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "deposit(uint256,bool)",
          "harvest()",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "updateRewards(uint256,uint256)",
          "calculatePendingRewards(address)",
          "calculateSharesValueInTART(address)",
          "calculateSharePriceInTART()",
          "lastRewardBlock()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeSharingSystem",
            "src": "contracts/Rewards/FeeSharingSystem.sol:76"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pixellyToken",
            "src": "contracts/Rewards/FeeSharingSystem.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/Rewards/FeeSharingSystem.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenDistributor",
            "src": "contracts/Rewards/FeeSharingSystem.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeSharingSystem",
              "label": "currentRewardPerBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:34"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "lastRewardAdjustment",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:37"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "lastUpdateBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:40"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "periodEndBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:43"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:46"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "totalShares",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:49"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)16410_storage)",
              "src": "contracts/Rewards/FeeSharingSystem.sol:51"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)16410_storage)": {
              "label": "mapping(address => struct FeeSharingSystem.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)16410_storage": {
              "label": "struct FeeSharingSystem.UserInfo",
              "members": [
                {
                  "label": "shares",
                  "type": "t_uint256"
                },
                {
                  "label": "userRewardPerTokenPaid",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyToken": {
        "src": "contracts/Rewards/PIxellyToken.sol:13",
        "version": {
          "withMetadata": "099e03306273cfb3d0a1ae90a618247217af63f7045221e237318d026e677ad2",
          "withoutMetadata": "099e03306273cfb3d0a1ae90a618247217af63f7045221e237318d026e677ad2",
          "linkedWithoutMetadata": "099e03306273cfb3d0a1ae90a618247217af63f7045221e237318d026e677ad2"
        },
        "inherit": [
          "IPixellyToken",
          "Ownable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,uint256)",
          "mint(address,uint256)",
          "SUPPLY_CAP()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyToken",
            "src": "contracts/Rewards/PIxellyToken.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_SUPPLY_CAP",
            "src": "contracts/Rewards/PIxellyToken.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StakingPoolForUniswapV2Tokens": {
        "src": "contracts/Rewards/PixellyStaking.sol:16",
        "version": {
          "withMetadata": "8881f47a8674406d9b7e89ec45f408013232ffd9c848c5a61705629f38b2c9b0",
          "withoutMetadata": "21a58aac2d8a5fbe04019ccba9220d57a41329a064c266f24f6f94ac97547e28",
          "linkedWithoutMetadata": "21a58aac2d8a5fbe04019ccba9220d57a41329a064c266f24f6f94ac97547e28"
        },
        "inherit": [
          "ReentrancyGuard",
          "Pausable",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "deposit(uint256)",
          "harvest()",
          "emergencyWithdraw()",
          "withdraw(uint256)",
          "adminRewardWithdraw(uint256)",
          "pause()",
          "unpause()",
          "updateRewardPerBlockAndEndBlock(uint256,uint256)",
          "calculatePendingRewards(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StakingPoolForUniswapV2Tokens",
            "src": "contracts/Rewards/PixellyStaking.sol:77"
          },
          {
            "kind": "state-variable-immutable",
            "name": "looksRareToken",
            "src": "contracts/Rewards/PixellyStaking.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "stakedToken",
            "src": "contracts/Rewards/PixellyStaking.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "START_BLOCK",
            "src": "contracts/Rewards/PixellyStaking.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "accTokenPerShare",
              "type": "t_uint256",
              "src": "contracts/Rewards/PixellyStaking.sol:37"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "endBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/PixellyStaking.sol:40"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "lastRewardBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/PixellyStaking.sol:43"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "rewardPerBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/PixellyStaking.sol:46"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)17293_storage)",
              "src": "contracts/Rewards/PixellyStaking.sol:49"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)17293_storage)": {
              "label": "mapping(address => struct StakingPoolForUniswapV2Tokens.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)17293_storage": {
              "label": "struct StakingPoolForUniswapV2Tokens.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PrivateSaleWithFeeSharing": {
        "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:15",
        "version": {
          "withMetadata": "ceba687a870c4a0de3373418f381175178c5a413f72be68ab1275cd175042110",
          "withoutMetadata": "ceba687a870c4a0de3373418f381175178c5a413f72be68ab1275cd175042110",
          "linkedWithoutMetadata": "ceba687a870c4a0de3373418f381175178c5a413f72be68ab1275cd175042110"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256)",
          "deposit()",
          "harvest()",
          "withdraw()",
          "updateSalePhaseToWithdraw()",
          "removeUserFromWhitelist(address)",
          "setAllocationCostPerTier(uint8,uint256)",
          "setBlockForWithdrawal(uint256)",
          "setPriceOfETHInTART(uint256)",
          "updateSalePhase(uint8)",
          "withdrawCommittedAmount()",
          "whitelistUsers(address[],uint8)",
          "calculatePendingRewards(address)",
          "getMaxAmountTARTToDistribute()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PrivateSaleWithFeeSharing",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:87"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pixellyToken",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "MAX_BLOCK_FOR_WITHDRAWAL",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TOTAL_TART_DISTRIBUTED",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "currentPhase",
              "type": "t_enum(SalePhase)18039",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:47"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "blockForWithdrawal",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:50"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "priceOfETHInTART",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:53"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "totalAmountCommitted",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:56"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "totalRewardTokensDistributedToStakers",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:59"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "allocationCostPerTier",
              "type": "t_mapping(t_uint8,t_uint256)",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:62"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "numberOfParticipantsForATier",
              "type": "t_mapping(t_uint8,t_uint256)",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:65"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)18048_storage)",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:68"
            }
          ],
          "types": {
            "t_enum(SalePhase)18039": {
              "label": "enum PrivateSaleWithFeeSharing.SalePhase",
              "members": [
                "Pending",
                "Deposit",
                "Over",
                "Staking",
                "Withdraw"
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_struct(UserInfo)18048_storage)": {
              "label": "mapping(address => struct PrivateSaleWithFeeSharing.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)18048_storage": {
              "label": "struct PrivateSaleWithFeeSharing.UserInfo",
              "members": [
                {
                  "label": "rewardsDistributedToAccount",
                  "type": "t_uint256"
                },
                {
                  "label": "tier",
                  "type": "t_uint8"
                },
                {
                  "label": "hasDeposited",
                  "type": "t_bool"
                },
                {
                  "label": "hasWithdrawn",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TokenDistributor": {
        "src": "contracts/Rewards/TokenDistributor.sol:14",
        "version": {
          "withMetadata": "ea5f9e1ca8d908bbe3bd9fe654aa0d1e3eddd7cd933cbeec4dc5b1165e1799ea",
          "withoutMetadata": "ea5f9e1ca8d908bbe3bd9fe654aa0d1e3eddd7cd933cbeec4dc5b1165e1799ea",
          "linkedWithoutMetadata": "ea5f9e1ca8d908bbe3bd9fe654aa0d1e3eddd7cd933cbeec4dc5b1165e1799ea"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256[],uint256[],uint256[],uint256)",
          "deposit(uint256)",
          "harvestAndCompound()",
          "updatePool()",
          "withdraw(uint256)",
          "withdrawAll()",
          "calculatePendingRewards(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenDistributor",
            "src": "contracts/Rewards/TokenDistributor.sol:95"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pixellyToken",
            "src": "contracts/Rewards/TokenDistributor.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenSplitter",
            "src": "contracts/Rewards/TokenDistributor.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "NUMBER_PERIODS",
            "src": "contracts/Rewards/TokenDistributor.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "START_BLOCK",
            "src": "contracts/Rewards/TokenDistributor.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TokenDistributor",
              "label": "accTokenPerShare",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:43"
            },
            {
              "contract": "TokenDistributor",
              "label": "currentPhase",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:46"
            },
            {
              "contract": "TokenDistributor",
              "label": "endBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:49"
            },
            {
              "contract": "TokenDistributor",
              "label": "lastRewardBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:52"
            },
            {
              "contract": "TokenDistributor",
              "label": "rewardPerBlockForOthers",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:55"
            },
            {
              "contract": "TokenDistributor",
              "label": "rewardPerBlockForStaking",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:58"
            },
            {
              "contract": "TokenDistributor",
              "label": "totalAmountStaked",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:61"
            },
            {
              "contract": "TokenDistributor",
              "label": "stakingPeriod",
              "type": "t_mapping(t_uint256,t_struct(StakingPeriod)18993_storage)",
              "src": "contracts/Rewards/TokenDistributor.sol:63"
            },
            {
              "contract": "TokenDistributor",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)18998_storage)",
              "src": "contracts/Rewards/TokenDistributor.sol:65"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(StakingPeriod)18993_storage)": {
              "label": "mapping(uint256 => struct TokenDistributor.StakingPeriod)"
            },
            "t_struct(StakingPeriod)18993_storage": {
              "label": "struct TokenDistributor.StakingPeriod",
              "members": [
                {
                  "label": "rewardPerBlockForStaking",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardPerBlockForOthers",
                  "type": "t_uint256"
                },
                {
                  "label": "periodLengthInBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(UserInfo)18998_storage)": {
              "label": "mapping(address => struct TokenDistributor.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)18998_storage": {
              "label": "struct TokenDistributor.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TokenSplitter": {
        "src": "contracts/Rewards/TokenSplitter.sol:12",
        "version": {
          "withMetadata": "a42e5b325c931346fc9dd8c23942a83bdcd2cba2c528326321602203cf5f2d3e",
          "withoutMetadata": "a72fe2722efcb83b302ab8c65b86a72a0043ab2f90a95e72df7db26685c5d30c",
          "linkedWithoutMetadata": "a72fe2722efcb83b302ab8c65b86a72a0043ab2f90a95e72df7db26685c5d30c"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address[],uint256[],address)",
          "releaseTokens(address)",
          "updateSharesOwner(address,address)",
          "calculatePendingRewards(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenSplitter",
            "src": "contracts/Rewards/TokenSplitter.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TOTAL_SHARES",
            "src": "contracts/Rewards/TokenSplitter.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pixellyToken",
            "src": "contracts/Rewards/TokenSplitter.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TokenSplitter",
              "label": "totalTokensDistributed",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenSplitter.sol:25"
            },
            {
              "contract": "TokenSplitter",
              "label": "accountInfo",
              "type": "t_mapping(t_address,t_struct(AccountInfo)19982_storage)",
              "src": "contracts/Rewards/TokenSplitter.sol:27"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(AccountInfo)19982_storage)": {
              "label": "mapping(address => struct TokenSplitter.AccountInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(AccountInfo)19982_storage": {
              "label": "struct TokenSplitter.AccountInfo",
              "members": [
                {
                  "label": "shares",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensDistributedToAccount",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TradingRewardsDistributor": {
        "src": "contracts/Rewards/TradingRewardsDistributor.sol:14",
        "version": {
          "withMetadata": "f12cc56e7581b81927640afab7ec38652696ab24f5f4fac349c1c99e64dc4fbd",
          "withoutMetadata": "aeb227c4ce8e33f363d4db12442cb4d0a30c70681a89208c207e175dcc0bd53e",
          "linkedWithoutMetadata": "aeb227c4ce8e33f363d4db12442cb4d0a30c70681a89208c207e175dcc0bd53e"
        },
        "inherit": [
          "Ownable",
          "ReentrancyGuard",
          "Pausable",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "MerkleProof"
        ],
        "methods": [
          "(address)",
          "claim(uint256,bytes32[])",
          "updateTradingRewards(bytes32,uint256)",
          "pauseDistribution()",
          "unpauseDistribution()",
          "withdrawTokenRewards(uint256)",
          "canClaim(address,uint256,bytes32[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TradingRewardsDistributor",
            "src": "contracts/Rewards/TradingRewardsDistributor.sol:55"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pixellyToken",
            "src": "contracts/Rewards/TradingRewardsDistributor.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TradingRewardsDistributor",
              "label": "currentRewardRound",
              "type": "t_uint256",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:22"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "lastPausedTimestamp",
              "type": "t_uint256",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:25"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "maximumAmountPerUserInCurrentTree",
              "type": "t_uint256",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:28"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "amountClaimedByUser",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:31"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "merkleRootOfRewardRound",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:34"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "merkleRootUsed",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:37"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "hasUserClaimedForRewardRound",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VestingContractWithFeeSharing": {
        "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:13",
        "version": {
          "withMetadata": "1507bcce7755ee8b2d4f06c322ecfa02291dba290c752fa579653f34246fa7ca",
          "withoutMetadata": "05681e687243b327ed1e56ba240b0180e209aaf089ce4b7afdd1639661b2c1b4",
          "linkedWithoutMetadata": "05681e687243b327ed1e56ba240b0180e209aaf089ce4b7afdd1639661b2c1b4"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(uint256,uint256,uint256,uint256,address)",
          "unlockLooksRareToken()",
          "withdrawOtherCurrency(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingContractWithFeeSharing",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pixellyToken",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "NUMBER_UNLOCK_PERIODS",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "STANDARD_AMOUNT_UNLOCKED_AT_EACH_UNLOCK",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "START_BLOCK",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "VESTING_BETWEEN_PERIODS_IN_BLOCKS",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingContractWithFeeSharing",
              "label": "maxAmountToWithdrawForNextPeriod",
              "type": "t_uint256",
              "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:31"
            },
            {
              "contract": "VestingContractWithFeeSharing",
              "label": "nextBlockForUnlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:34"
            },
            {
              "contract": "VestingContractWithFeeSharing",
              "label": "numberPastUnlocks",
              "type": "t_uint256",
              "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPixellyToken": {
        "src": "contracts/Rewards/interfaces/IPixellyToken.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "SUPPLY_CAP()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts/Upgrades/AdminUpgradeabilityProxy.sol:15",
        "version": {
          "withMetadata": "4badfe636dd239bcc6a113bd6f6c39e93a2dc07f9cd76fbc4d3c25f61a615c28",
          "withoutMetadata": "4badfe636dd239bcc6a113bd6f6c39e93a2dc07f9cd76fbc4d3c25f61a615c28",
          "linkedWithoutMetadata": "4badfe636dd239bcc6a113bd6f6c39e93a2dc07f9cd76fbc4d3c25f61a615c28"
        },
        "inherit": [
          "UpgradeableProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts/Upgrades/AdminUpgradeabilityProxy.sol:25"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/Upgrades/AdminUpgradeabilityProxy.sol:103"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts/Upgrades/ProxyAdmin.sol:12",
        "version": {
          "withMetadata": "1954982f6a72b966f742746d1595f28fc3bd58519d941cf5ee396174b30e0adb",
          "withoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72",
          "linkedWithoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "contracts/Upgrades/TransparentUpgradeableProxy.sol:28",
        "version": {
          "withMetadata": "e2c7b2b9cab3651e98e65ccbcfa48e3c6a1d2be60b2b3ae650ebd6578f87b2dc",
          "withoutMetadata": "e2c7b2b9cab3651e98e65ccbcfa48e3c6a1d2be60b2b3ae650ebd6578f87b2dc",
          "linkedWithoutMetadata": "e2c7b2b9cab3651e98e65ccbcfa48e3c6a1d2be60b2b3ae650ebd6578f87b2dc"
        },
        "inherit": [
          "UpgradeableProxy",
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "contracts/Upgrades/TransparentUpgradeableProxy.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeableProxy": {
        "src": "contracts/Upgrades/UpgradeableProxy.sol:17",
        "version": {
          "withMetadata": "a3d5dc7b576d487bacf1eca88509c9a9aa5c42515e53d325ceaabf217b1b5b35",
          "withoutMetadata": "a3d5dc7b576d487bacf1eca88509c9a9aa5c42515e53d325ceaabf217b1b5b35",
          "linkedWithoutMetadata": "a3d5dc7b576d487bacf1eca88509c9a9aa5c42515e53d325ceaabf217b1b5b35"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableProxy",
            "src": "contracts/Upgrades/UpgradeableProxy.sol:24"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts/library/ERC1155.sol:12",
        "version": {
          "withMetadata": "4f7758aaf073d8af6ccf5183c389c2ba027b6318cc8a4327960c62c6a224cf32",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/library/ERC1155.sol:26"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/library/ERC1155.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts/library/ERC1155Metadata.sol:10",
        "version": {
          "withMetadata": "22f0def7dd847734397d8ab2c9784174764a320bb281b7979b2f41f91fa3c1b8",
          "withoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021",
          "linkedWithoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts/library/ERC1155Metadata.sol:13"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts/library/ERC1155MintBurn.sol:10",
        "version": {
          "withMetadata": "aac939b704517d1f2525b44a9d409c32b3a5006b70cb84f471fce96b07236e5a",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC2981": {
        "src": "contracts/library/ERC2981.sol:10",
        "inherit": [
          "IERC2981RoyaltySetter",
          "IERC2981Royalties",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC2981Base": {
        "src": "contracts/library/ERC2981Base.sol:9",
        "inherit": [
          "IERC2981Royalties",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC2981Base",
              "label": "_royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)22618_storage))",
              "src": "contracts/library/ERC2981Base.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)22618_storage))": {
              "label": "mapping(address => mapping(uint256 => struct ERC2981Base.RoyaltyInfo))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)22618_storage)": {
              "label": "mapping(uint256 => struct ERC2981Base.RoyaltyInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(RoyaltyInfo)22618_storage": {
              "label": "struct ERC2981Base.RoyaltyInfo",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "royaltyPercent",
                  "type": "t_uint16"
                }
              ]
            },
            "t_uint16": {
              "label": "uint16"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC2981PerTokenRoyalties": {
        "src": "contracts/library/ERC2981PerTokenRoyalties.sol:7",
        "inherit": [
          "ERC2981",
          "IERC2981RoyaltySetter",
          "IERC2981Royalties",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "setDefaultRoyalty(address,uint16)",
          "setTokenRoyalty(uint256,address,uint16)",
          "royaltyInfo(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC2981PerTokenRoyalties",
              "label": "_royalties",
              "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)22572_storage)",
              "src": "contracts/library/ERC2981PerTokenRoyalties.sol:8"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)22572_storage)": {
              "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(RoyaltyInfo)22572_storage": {
              "label": "struct ERC2981.RoyaltyInfo",
              "members": [
                {
                  "label": "recipient",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint24"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_uint24": {
              "label": "uint24"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FixedPoint": {
        "src": "contracts/library/FixedPoint.sol:5",
        "version": {
          "withMetadata": "f5773288aa3b9fda6e316692ed3901b39e186144700422723a2cbf42bb2fe13f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts/library/IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC2981Royalties": {
        "src": "contracts/library/IERC2981Royalties.sol:7",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "royaltyInfo(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC2981RoyaltySetter": {
        "src": "contracts/library/IERC2981RoyaltySetter.sol:7",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "setDefaultRoyalty(address,uint16)",
          "setTokenRoyalty(uint256,address,uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/library/IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/library/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OracleLibrary": {
        "src": "contracts/library/OracleLibrary.sol:8",
        "version": {
          "withMetadata": "2776d44382c9e82295df8a51f02b5c9bf77ba74d223ea93bc75cbcf6e4cfb7da",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "FixedPoint"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/library/UniswapV2Library.sol:7",
        "version": {
          "withMetadata": "a941831ccfa4a17fdf81e3e7dc42eac6c3e9a04425a650395b981061415ab890",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts/mock/BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "aeb75caf3cbcefdadbf3c2db47487279b791171da64320e6a01c9670219ccd0a",
          "withoutMetadata": "f16feedc84b2c164217f0a3c0c7c7ef7e7ec09984915c9f9601de051c36efdcb",
          "linkedWithoutMetadata": "f16feedc84b2c164217f0a3c0c7c7ef7e7ec09984915c9f9601de051c36efdcb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts/mock/BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(PixellyAuction)10073",
              "src": "contracts/mock/BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(PixellyAuction)10073": {
              "label": "contract PixellyAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:7",
        "version": {
          "withMetadata": "f6bf27ebe525638474b4b3d6c79ce37fa1a36fade0b92465b899194e8b783f9a",
          "withoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957",
          "linkedWithoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockPixellyAuction": {
        "src": "contracts/mock/MockPixellyAuction.sol:7",
        "version": {
          "withMetadata": "c6b0d0c9ce2b87c559061fa6343695a59bd668d310e642281b82514ef00ccfc4",
          "withoutMetadata": "2727f080d84e34316cf6b732ba0596d54c5c003f4d0bd0bcf5ff98489fd2f09e",
          "linkedWithoutMetadata": "2727f080d84e34316cf6b732ba0596d54c5c003f4d0bd0bcf5ff98489fd2f09e"
        },
        "inherit": [
          "PixellyAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "setTime(uint256)",
          "increaseTime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MockPixellyAuction",
              "label": "time",
              "type": "t_uint256",
              "src": "contracts/mock/MockPixellyAuction.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyAuctionMock": {
        "src": "contracts/mock/PixellyAuctionMock.sol:7",
        "version": {
          "withMetadata": "e93abbd3bb093782c2ac835d8a2c6da9f07b5d3d2f7a5cb5fcb6b69a1ddd770d",
          "withoutMetadata": "2bfc14b255500e3df0b8c38c011b9b8297ea45314885314870ca6d760f93e377",
          "linkedWithoutMetadata": "2bfc14b255500e3df0b8c38c011b9b8297ea45314885314870ca6d760f93e377"
        },
        "inherit": [
          "PixellyAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PixellyAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts/mock/PixellyAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "WTENET": {
        "src": "contracts/WTENET.sol:18",
        "version": {
          "withMetadata": "8523d47b0f4f6500df02c551b9bb234154143d60623cd98505d5a26c2da8ded9",
          "withoutMetadata": "905ce9da8ccc5f980e0a18e62d14bcac887acae9f617f4108e9456482d21c41e",
          "linkedWithoutMetadata": "905ce9da8ccc5f980e0a18e62d14bcac887acae9f617f4108e9456482d21c41e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "name",
            "src": "contracts/WTENET.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "symbol",
            "src": "contracts/WTENET.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "decimals",
            "src": "contracts/WTENET.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WTENET",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/WTENET.sol:19"
            },
            {
              "contract": "WTENET",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/WTENET.sol:20"
            },
            {
              "contract": "WTENET",
              "label": "decimals",
              "type": "t_uint8",
              "src": "contracts/WTENET.sol:21"
            },
            {
              "contract": "WTENET",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WTENET.sol:28"
            },
            {
              "contract": "WTENET",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/WTENET.sol:29"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "contracts/library/SafeMath.sol:5",
        "version": {
          "withMetadata": "25b813288c40d5963312c5ef6e94bde28e7e77c95c5c659d5cd2666878dd6b20",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MerkleProof": {
        "src": "@openzeppelin/contracts/cryptography/MerkleProof.sol:8",
        "version": {
          "withMetadata": "e4c1a7894a06b1c2edf4951f92346a8c87ca32adf7ffd354954ba1e9195a9b23",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/introspection/ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin/contracts/introspection/ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin/contracts/introspection/ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts/library/IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/library/IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:21",
        "version": {
          "withMetadata": "6159e5b8b162df16ddf823478e6d2f5f1c6289fe3985e922be50f8f8ba411d0b",
          "withoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033",
          "linkedWithoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)5400_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4777_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)5400_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)5400_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)5014_storage"
                }
              ]
            },
            "t_struct(Set)5014_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4777_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)4459_storage"
                }
              ]
            },
            "t_struct(Map)4459_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)4451_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)4451_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)4451_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721Holder.sol:13",
        "version": {
          "withMetadata": "392be09826fc835d08e8d319baddb8e3dc10707ec5af5dd6ecc847bb9d816d6a",
          "withoutMetadata": "137df6a6efa04ae24dbffb1da379b99cbf88bb7fa99ca9af2db6ad24197185b0",
          "linkedWithoutMetadata": "137df6a6efa04ae24dbffb1da379b99cbf88bb7fa99ca9af2db6ad24197185b0"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin/contracts/utils/EnumerableMap.sol:29",
        "version": {
          "withMetadata": "33db0abc4b4d1da32aed25dc771cc00a3efa31fff5d6d984c64d230b001e4165",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "4f51efe115648bafc40e8dcb6d91da10d2c3805f4d3f7a23f58ceb3aa49f6aac",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/utils/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "74ef6d7234587add3006addc68209e5df580602fb30a593c7df5114b91053bef",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Oracle": {
        "src": "contracts/Oracle/Oracle.sol:14",
        "version": {
          "withMetadata": "3c0730c03bad63b29055bd007504087505d0e3ab3799caea082b25acd5212256",
          "withoutMetadata": "1c5bac7ebe8ffd0a679123716d693a0b78694a611d7782724a31e900927b84be",
          "linkedWithoutMetadata": "1c5bac7ebe8ffd0a679123716d693a0b78694a611d7782724a31e900927b84be"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "FixedPoint",
          "SafeMath",
          "EnumerableSet",
          "UniswapV2Library",
          "OracleLibrary"
        ],
        "methods": [
          "(address,address)",
          "update(address,address)",
          "updateBlockInfo()",
          "getQuantity(address,uint256)",
          "getAveragePrice(address)",
          "getCurrentPrice(address)",
          "getLpTokenValue(address,uint256)",
          "getAverageBlockTime()",
          "addRouterToken(address)",
          "delRouterToken(address)",
          "getRouterTokenLength()",
          "isRouterToken(address)",
          "getRouterToken(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Oracle",
            "src": "contracts/Oracle/Oracle.sol:39"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Oracle/Oracle.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "anchorToken",
            "src": "contracts/Oracle/Oracle.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Oracle",
              "label": "_routerTokens",
              "type": "t_struct(AddressSet)5279_storage",
              "src": "contracts/Oracle/Oracle.sol:18"
            },
            {
              "contract": "Oracle",
              "label": "blockInfo",
              "type": "t_struct(BlockInfo)5748_storage",
              "src": "contracts/Oracle/Oracle.sol:34"
            },
            {
              "contract": "Oracle",
              "label": "pairObservations",
              "type": "t_mapping(t_address,t_struct(Observation)5743_storage)",
              "src": "contracts/Oracle/Oracle.sol:37"
            }
          ],
          "types": {
            "t_struct(AddressSet)5279_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)5014_storage"
                }
              ]
            },
            "t_struct(Set)5014_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(BlockInfo)5748_storage": {
              "label": "struct Oracle.BlockInfo",
              "members": [
                {
                  "label": "height",
                  "type": "t_uint256"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Observation)5743_storage)": {
              "label": "mapping(address => struct Oracle.Observation)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Observation)5743_storage": {
              "label": "struct Oracle.Observation",
              "members": [
                {
                  "label": "timestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "price0Cumulative",
                  "type": "t_uint256"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyAddressRegistry": {
        "src": "contracts/PixellyAddressRegistry.sol:8",
        "version": {
          "withMetadata": "d2348568e5bc8e68a2e8d1edb1c46baff3c22d0075ea955c9c34c9647b3248e7",
          "withoutMetadata": "29450f2c353009483451469a387cce8f426e742b1ebe166fcfe4167d19d3601b",
          "linkedWithoutMetadata": "29450f2c353009483451469a387cce8f426e742b1ebe166fcfe4167d19d3601b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updatePixelly(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PixellyAddressRegistry",
              "label": "pixellyNFT",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:12"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:15"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:18"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:21"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:24"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:27"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:30"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:33"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:36"
            },
            {
              "contract": "PixellyAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts/PixellyAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyArtFactory": {
        "src": "contracts/PixellyArtFactory.sol:8",
        "version": {
          "withMetadata": "55650c9d1899154f9bd502b654c623e153439aa7cda5d446086ce710ca86e0ce",
          "withoutMetadata": "95e6c482d7c2dd93b6ad5be4270412300e3630a0b9263e8438a499c347fae2d6",
          "linkedWithoutMetadata": "95e6c482d7c2dd93b6ad5be4270412300e3630a0b9263e8438a499c347fae2d6"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyArtFactory",
            "src": "contracts/PixellyArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyArtFactory.sol:14"
            },
            {
              "contract": "PixellyArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyArtFactory.sol:17"
            },
            {
              "contract": "PixellyArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/PixellyArtFactory.sol:20"
            },
            {
              "contract": "PixellyArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyArtFactory.sol:23"
            },
            {
              "contract": "PixellyArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyArtFactory.sol:26"
            },
            {
              "contract": "PixellyArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/PixellyArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyArtFactoryPrivate": {
        "src": "contracts/PixellyArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "6929a3424f76580ef886846ae786a294a852d72be69f932d07ad67b835c909f9",
          "withoutMetadata": "cb4f36bb02c3f9bdd61ffa54f50eb18d1a5e292cb4e34746301b65d5f1abf57d",
          "linkedWithoutMetadata": "cb4f36bb02c3f9bdd61ffa54f50eb18d1a5e292cb4e34746301b65d5f1abf57d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyArtFactoryPrivate",
            "src": "contracts/PixellyArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyArtFactoryPrivate.sol:14"
            },
            {
              "contract": "PixellyArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyArtFactoryPrivate.sol:17"
            },
            {
              "contract": "PixellyArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/PixellyArtFactoryPrivate.sol:20"
            },
            {
              "contract": "PixellyArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyArtFactoryPrivate.sol:23"
            },
            {
              "contract": "PixellyArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyArtFactoryPrivate.sol:26"
            },
            {
              "contract": "PixellyArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/PixellyArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts/PixellyArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "d41a22734631030536ad7e75efaaa80e798928fb5a398d2b7e5213c62cbefe9e",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PixellyArtTradable": {
        "src": "contracts/PixellyArtTradable.sol:22",
        "version": {
          "withMetadata": "984589630bed349fa321419c1d3321e33636168adf44fbbecb7ad11216891c3e",
          "withoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b",
          "linkedWithoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyArtTradable",
            "src": "contracts/PixellyArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/PixellyArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/PixellyArtTradable.sol:28"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/PixellyArtTradable.sol:31"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/PixellyArtTradable.sol:33"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/PixellyArtTradable.sol:34"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/PixellyArtTradable.sol:37"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/PixellyArtTradable.sol:39"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyArtTradable.sol:41"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyArtTradable.sol:43"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyArtTradable.sol:45"
            },
            {
              "contract": "PixellyArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts/PixellyArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "c8b92a6d7568252f950c7b0a36b418f2d159fd8c41a09dec94e29dcc03813cd9",
          "withoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d",
          "linkedWithoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)7630)",
              "src": "contracts/PixellyArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)7630)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)7630": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyArtTradablePrivate": {
        "src": "contracts/PixellyArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "9dd8a89b6d4646f67b116ea25571da78fa750c37356757979c6fcf4c7bcd342d",
          "withoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9",
          "linkedWithoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyArtTradablePrivate",
            "src": "contracts/PixellyArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/PixellyArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/PixellyArtTradablePrivate.sol:28"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/PixellyArtTradablePrivate.sol:31"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/PixellyArtTradablePrivate.sol:33"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/PixellyArtTradablePrivate.sol:34"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/PixellyArtTradablePrivate.sol:37"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/PixellyArtTradablePrivate.sol:39"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyArtTradablePrivate.sol:41"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyArtTradablePrivate.sol:43"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyArtTradablePrivate.sol:45"
            },
            {
              "contract": "PixellyArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPixellyAddressRegistry": {
        "src": "contracts/PixellyPriceFeed.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPixellyBundleMarketplace": {
        "src": "contracts/PixellyMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPixellyMarketplace": {
        "src": "contracts/PixellyBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPixellyTokenRegistry": {
        "src": "contracts/PixellyPriceFeed.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PixellyAuction": {
        "src": "contracts/PixellyAuction.sol:56",
        "version": {
          "withMetadata": "4b546cd12991c1aa37c97f6343361cf50f0a2ce350ae0fd35920c33cfacd7a04",
          "withoutMetadata": "79c283fbefc3a2f6c7d809e8a21ca36d9972d179296d40dbddc28d44f78fa86f",
          "linkedWithoutMetadata": "79c283fbefc3a2f6c7d809e8a21ca36d9972d179296d40dbddc28d44f78fa86f"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "resultFailedAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)",
          "operatorSlot()",
          "operator()",
          "setOperator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts/PixellyAuction.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts/PixellyAuction.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts/PixellyAuction.sol:163"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)8154_storage))",
              "src": "contracts/PixellyAuction.sol:151"
            },
            {
              "contract": "PixellyAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)8161_storage))",
              "src": "contracts/PixellyAuction.sol:154"
            },
            {
              "contract": "PixellyAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts/PixellyAuction.sol:157"
            },
            {
              "contract": "PixellyAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts/PixellyAuction.sol:160"
            },
            {
              "contract": "PixellyAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyAuction.sol:163"
            },
            {
              "contract": "PixellyAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyAuction.sol:166"
            },
            {
              "contract": "PixellyAuction",
              "label": "addressRegistry",
              "type": "t_contract(IPixellyAddressRegistry)7959",
              "src": "contracts/PixellyAuction.sol:169"
            },
            {
              "contract": "PixellyAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts/PixellyAuction.sol:172"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)8154_storage))": {
              "label": "mapping(address => mapping(uint256 => struct PixellyAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)8154_storage)": {
              "label": "mapping(uint256 => struct PixellyAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)8154_storage": {
              "label": "struct PixellyAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)8161_storage))": {
              "label": "mapping(address => mapping(uint256 => struct PixellyAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)8161_storage)": {
              "label": "mapping(uint256 => struct PixellyAuction.HighestBid)"
            },
            "t_struct(HighestBid)8161_storage": {
              "label": "struct PixellyAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IPixellyAddressRegistry)7959": {
              "label": "contract IPixellyAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyBundleMarketplace": {
        "src": "contracts/PixellyBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "c19755395edca8d3f50c150c1f3ed5391fb1fb74954bf4950834e92a5cff6319",
          "withoutMetadata": "1ebe0e848d5792f8c946e1936742a012092283d33886e629fffcdf5071cc7203",
          "linkedWithoutMetadata": "1ebe0e848d5792f8c946e1936742a012092283d33886e629fffcdf5071cc7203"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20Upgradeable",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PixellyBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)10238_storage))",
              "src": "contracts/PixellyBundleMarketplace.sol:106"
            },
            {
              "contract": "PixellyBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/PixellyBundleMarketplace.sol:109"
            },
            {
              "contract": "PixellyBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)5194_storage))",
              "src": "contracts/PixellyBundleMarketplace.sol:111"
            },
            {
              "contract": "PixellyBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts/PixellyBundleMarketplace.sol:113"
            },
            {
              "contract": "PixellyBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts/PixellyBundleMarketplace.sol:115"
            },
            {
              "contract": "PixellyBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)10245_storage))",
              "src": "contracts/PixellyBundleMarketplace.sol:118"
            },
            {
              "contract": "PixellyBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyBundleMarketplace.sol:121"
            },
            {
              "contract": "PixellyBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyBundleMarketplace.sol:124"
            },
            {
              "contract": "PixellyBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IPixellyAddressRegistry)10101",
              "src": "contracts/PixellyBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)10238_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct PixellyBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)10238_storage)": {
              "label": "mapping(bytes32 => struct PixellyBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)10238_storage": {
              "label": "struct PixellyBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)5194_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)5194_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)5194_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)5014_storage"
                }
              ]
            },
            "t_struct(Set)5014_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)10245_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct PixellyBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10245_storage)": {
              "label": "mapping(address => struct PixellyBundleMarketplace.Offer)"
            },
            "t_struct(Offer)10245_storage": {
              "label": "struct PixellyBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20Upgradeable)825"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)825": {
              "label": "contract IERC20Upgradeable"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IPixellyAddressRegistry)10101": {
              "label": "contract IPixellyAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPixellyAuction": {
        "src": "contracts/PixellyMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPixellyNFTFactory": {
        "src": "contracts/PixellyMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPixellyPriceFeed": {
        "src": "contracts/PixellyMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wETH()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PixellyMarketplace": {
        "src": "contracts/PixellyMarketplace.sol:71",
        "version": {
          "withMetadata": "7000acebd6aa609e82f41af3bea1e90969b2991a0cb39c2bffac97f1876e6d5a",
          "withoutMetadata": "14a55ad71772e728a7010dcd6383134a54e5e05078087267179684107b16312a",
          "linkedWithoutMetadata": "14a55ad71772e728a7010dcd6383134a54e5e05078087267179684107b16312a"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "buyItemWithQuantity(address,uint256,address,address,uint256)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)",
          "operatorSlot()",
          "operator()",
          "setOperator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PixellyMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts/PixellyMarketplace.sol:151"
            },
            {
              "contract": "PixellyMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts/PixellyMarketplace.sol:154"
            },
            {
              "contract": "PixellyMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)12375_storage)))",
              "src": "contracts/PixellyMarketplace.sol:157"
            },
            {
              "contract": "PixellyMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)12384_storage)))",
              "src": "contracts/PixellyMarketplace.sol:161"
            },
            {
              "contract": "PixellyMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts/PixellyMarketplace.sol:165"
            },
            {
              "contract": "PixellyMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyMarketplace.sol:168"
            },
            {
              "contract": "PixellyMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)12391_storage)",
              "src": "contracts/PixellyMarketplace.sol:171"
            },
            {
              "contract": "PixellyMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IPixellyAddressRegistry)12205",
              "src": "contracts/PixellyMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)12375_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct PixellyMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)12375_storage))": {
              "label": "mapping(uint256 => mapping(address => struct PixellyMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)12375_storage)": {
              "label": "mapping(address => struct PixellyMarketplace.Listing)"
            },
            "t_struct(Listing)12375_storage": {
              "label": "struct PixellyMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)12384_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct PixellyMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)12384_storage))": {
              "label": "mapping(uint256 => mapping(address => struct PixellyMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)12384_storage)": {
              "label": "mapping(address => struct PixellyMarketplace.Offer)"
            },
            "t_struct(Offer)12384_storage": {
              "label": "struct PixellyMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)2748"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)2748": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)12391_storage)": {
              "label": "mapping(address => struct PixellyMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)12391_storage": {
              "label": "struct PixellyMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IPixellyAddressRegistry)12205": {
              "label": "contract IPixellyAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyNFT": {
        "src": "contracts/PixellyNFT.sol:10",
        "version": {
          "withMetadata": "5f8cc95b1cac3543d0865d190b3e72576805a0371e405de067b462b08ff04f22",
          "withoutMetadata": "f555b901cf34a2f9e1673316462a02e38635c8cdba8e5fce50fcb2997ad88c71",
          "linkedWithoutMetadata": "f555b901cf34a2f9e1673316462a02e38635c8cdba8e5fce50fcb2997ad88c71"
        },
        "inherit": [
          "Ownable",
          "ERC2981PerTokenRoyalties",
          "ERC2981",
          "IERC2981RoyaltySetter",
          "IERC2981Royalties",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string,address,uint256)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyNFT",
            "src": "contracts/PixellyNFT.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyNFT",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts/PixellyNFT.sol:26"
            },
            {
              "contract": "PixellyNFT",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/PixellyNFT.sol:29"
            },
            {
              "contract": "PixellyNFT",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyNFT.sol:32"
            },
            {
              "contract": "PixellyNFT",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyNFT.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyNFTFactory": {
        "src": "contracts/PixellyNFTFactory.sol:8",
        "version": {
          "withMetadata": "b44777c0b4ea1be0f9b39ec3ac4938c4eee625d71bb2b98835ced8e0b587d0e4",
          "withoutMetadata": "1bf3089b91c9d3f015e3939aa67a9a46dbe45b5c7712e9a1e1704da6d949feca",
          "linkedWithoutMetadata": "1bf3089b91c9d3f015e3939aa67a9a46dbe45b5c7712e9a1e1704da6d949feca"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyNFTFactory",
            "src": "contracts/PixellyNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/PixellyNFTFactory.sol:14"
            },
            {
              "contract": "PixellyNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyNFTFactory.sol:17"
            },
            {
              "contract": "PixellyNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyNFTFactory.sol:20"
            },
            {
              "contract": "PixellyNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/PixellyNFTFactory.sol:23"
            },
            {
              "contract": "PixellyNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyNFTFactory.sol:26"
            },
            {
              "contract": "PixellyNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyNFTFactory.sol:29"
            },
            {
              "contract": "PixellyNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/PixellyNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyNFTFactoryPrivate": {
        "src": "contracts/PixellyNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "3b80be27b92c8c6412bdef027df045a3be77bb7d37e62b1aa7088c90127476f3",
          "withoutMetadata": "dd67ccbd7907a4dd0bfad36f06418da3712518931bbd34a529e707b0ff1a34d7",
          "linkedWithoutMetadata": "dd67ccbd7907a4dd0bfad36f06418da3712518931bbd34a529e707b0ff1a34d7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyNFTFactoryPrivate",
            "src": "contracts/PixellyNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/PixellyNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "PixellyNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "PixellyNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "PixellyNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/PixellyNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "PixellyNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "PixellyNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "PixellyNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/PixellyNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyNFTTradable": {
        "src": "contracts/PixellyNFTTradable.sol:12",
        "version": {
          "withMetadata": "b8a39f94022bb641b4fd5ba2c82cc3c6df1e7e2058fda2b87401a0be34ea0010",
          "withoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b",
          "linkedWithoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyNFTTradable",
            "src": "contracts/PixellyNFTTradable.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/PixellyNFTTradable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/PixellyNFTTradable.sol:23"
            },
            {
              "contract": "PixellyNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyNFTTradable.sol:24"
            },
            {
              "contract": "PixellyNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyNFTTradable.sol:25"
            },
            {
              "contract": "PixellyNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/PixellyNFTTradable.sol:26"
            },
            {
              "contract": "PixellyNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyNFTTradable.sol:29"
            },
            {
              "contract": "PixellyNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyNFTTradable.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyNFTTradablePrivate": {
        "src": "contracts/PixellyNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "620b7e630417ea1005b8f0bf4d23323bb64345ac411cb8359c59021bb57474a6",
          "withoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9",
          "linkedWithoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyNFTTradablePrivate",
            "src": "contracts/PixellyNFTTradablePrivate.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/PixellyNFTTradablePrivate.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/PixellyNFTTradablePrivate.sol:23"
            },
            {
              "contract": "PixellyNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/PixellyNFTTradablePrivate.sol:24"
            },
            {
              "contract": "PixellyNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/PixellyNFTTradablePrivate.sol:25"
            },
            {
              "contract": "PixellyNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/PixellyNFTTradablePrivate.sol:26"
            },
            {
              "contract": "PixellyNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/PixellyNFTTradablePrivate.sol:29"
            },
            {
              "contract": "PixellyNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/PixellyNFTTradablePrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts/PixellyPriceFeed.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getCurrentPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PixellyPriceFeed": {
        "src": "contracts/PixellyPriceFeed.sol:20",
        "version": {
          "withMetadata": "45235b39da5ca92f994f317b44612677a1b65ba4bfade15160550e916d1be43d",
          "withoutMetadata": "af0495f81f0bf030d7bdf20ee5c54b8ef6bd33e7a6dc68354e12fd3a2395d54b",
          "linkedWithoutMetadata": "af0495f81f0bf030d7bdf20ee5c54b8ef6bd33e7a6dc68354e12fd3a2395d54b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyPriceFeed",
            "src": "contracts/PixellyPriceFeed.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PixellyPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/PixellyPriceFeed.sol:22"
            },
            {
              "contract": "PixellyPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts/PixellyPriceFeed.sol:25"
            },
            {
              "contract": "PixellyPriceFeed",
              "label": "wETH",
              "type": "t_address",
              "src": "contracts/PixellyPriceFeed.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyTokenRegistry": {
        "src": "contracts/PixellyTokenRegistry.sol:7",
        "version": {
          "withMetadata": "6ec6bf62fad3a0d0cd7fc05fce4aa80007f519b87ec671ac5a0326e9c190a193",
          "withoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86",
          "linkedWithoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PixellyTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/PixellyTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeSharingSystem": {
        "src": "contracts/Rewards/FeeSharingSystem.sol:15",
        "version": {
          "withMetadata": "f1298073490d69f76907f6faef2fabea82d8055993bf047ed36f6639e4965ae4",
          "withoutMetadata": "b775e3deca608a305eecc097f62b1192491d7a892b8a51f890570d883330d955",
          "linkedWithoutMetadata": "b775e3deca608a305eecc097f62b1192491d7a892b8a51f890570d883330d955"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ReentrancyGuard"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "deposit(uint256,bool)",
          "harvest()",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "updateRewards(uint256,uint256)",
          "calculatePendingRewards(address)",
          "calculateSharesValueInTART(address)",
          "calculateSharePriceInTART()",
          "lastRewardBlock()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeSharingSystem",
            "src": "contracts/Rewards/FeeSharingSystem.sol:76"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pixellyToken",
            "src": "contracts/Rewards/FeeSharingSystem.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/Rewards/FeeSharingSystem.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenDistributor",
            "src": "contracts/Rewards/FeeSharingSystem.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeSharingSystem",
              "label": "currentRewardPerBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:34"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "lastRewardAdjustment",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:37"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "lastUpdateBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:40"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "periodEndBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:43"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:46"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "totalShares",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:49"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)16445_storage)",
              "src": "contracts/Rewards/FeeSharingSystem.sol:51"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)16445_storage)": {
              "label": "mapping(address => struct FeeSharingSystem.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)16445_storage": {
              "label": "struct FeeSharingSystem.UserInfo",
              "members": [
                {
                  "label": "shares",
                  "type": "t_uint256"
                },
                {
                  "label": "userRewardPerTokenPaid",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyToken": {
        "src": "contracts/Rewards/PIxellyToken.sol:13",
        "version": {
          "withMetadata": "099e03306273cfb3d0a1ae90a618247217af63f7045221e237318d026e677ad2",
          "withoutMetadata": "099e03306273cfb3d0a1ae90a618247217af63f7045221e237318d026e677ad2",
          "linkedWithoutMetadata": "099e03306273cfb3d0a1ae90a618247217af63f7045221e237318d026e677ad2"
        },
        "inherit": [
          "IPixellyToken",
          "Ownable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,uint256)",
          "mint(address,uint256)",
          "SUPPLY_CAP()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PixellyToken",
            "src": "contracts/Rewards/PIxellyToken.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_SUPPLY_CAP",
            "src": "contracts/Rewards/PIxellyToken.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StakingPoolForUniswapV2Tokens": {
        "src": "contracts/Rewards/PixellyStaking.sol:16",
        "version": {
          "withMetadata": "8881f47a8674406d9b7e89ec45f408013232ffd9c848c5a61705629f38b2c9b0",
          "withoutMetadata": "21a58aac2d8a5fbe04019ccba9220d57a41329a064c266f24f6f94ac97547e28",
          "linkedWithoutMetadata": "21a58aac2d8a5fbe04019ccba9220d57a41329a064c266f24f6f94ac97547e28"
        },
        "inherit": [
          "ReentrancyGuard",
          "Pausable",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "deposit(uint256)",
          "harvest()",
          "emergencyWithdraw()",
          "withdraw(uint256)",
          "adminRewardWithdraw(uint256)",
          "pause()",
          "unpause()",
          "updateRewardPerBlockAndEndBlock(uint256,uint256)",
          "calculatePendingRewards(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StakingPoolForUniswapV2Tokens",
            "src": "contracts/Rewards/PixellyStaking.sol:77"
          },
          {
            "kind": "state-variable-immutable",
            "name": "looksRareToken",
            "src": "contracts/Rewards/PixellyStaking.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "stakedToken",
            "src": "contracts/Rewards/PixellyStaking.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "START_BLOCK",
            "src": "contracts/Rewards/PixellyStaking.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "accTokenPerShare",
              "type": "t_uint256",
              "src": "contracts/Rewards/PixellyStaking.sol:37"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "endBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/PixellyStaking.sol:40"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "lastRewardBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/PixellyStaking.sol:43"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "rewardPerBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/PixellyStaking.sol:46"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)17328_storage)",
              "src": "contracts/Rewards/PixellyStaking.sol:49"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)17328_storage)": {
              "label": "mapping(address => struct StakingPoolForUniswapV2Tokens.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)17328_storage": {
              "label": "struct StakingPoolForUniswapV2Tokens.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PrivateSaleWithFeeSharing": {
        "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:15",
        "version": {
          "withMetadata": "ceba687a870c4a0de3373418f381175178c5a413f72be68ab1275cd175042110",
          "withoutMetadata": "ceba687a870c4a0de3373418f381175178c5a413f72be68ab1275cd175042110",
          "linkedWithoutMetadata": "ceba687a870c4a0de3373418f381175178c5a413f72be68ab1275cd175042110"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256)",
          "deposit()",
          "harvest()",
          "withdraw()",
          "updateSalePhaseToWithdraw()",
          "removeUserFromWhitelist(address)",
          "setAllocationCostPerTier(uint8,uint256)",
          "setBlockForWithdrawal(uint256)",
          "setPriceOfETHInTART(uint256)",
          "updateSalePhase(uint8)",
          "withdrawCommittedAmount()",
          "whitelistUsers(address[],uint8)",
          "calculatePendingRewards(address)",
          "getMaxAmountTARTToDistribute()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PrivateSaleWithFeeSharing",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:87"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pixellyToken",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "MAX_BLOCK_FOR_WITHDRAWAL",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TOTAL_TART_DISTRIBUTED",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "currentPhase",
              "type": "t_enum(SalePhase)18074",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:47"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "blockForWithdrawal",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:50"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "priceOfETHInTART",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:53"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "totalAmountCommitted",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:56"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "totalRewardTokensDistributedToStakers",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:59"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "allocationCostPerTier",
              "type": "t_mapping(t_uint8,t_uint256)",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:62"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "numberOfParticipantsForATier",
              "type": "t_mapping(t_uint8,t_uint256)",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:65"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)18083_storage)",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:68"
            }
          ],
          "types": {
            "t_enum(SalePhase)18074": {
              "label": "enum PrivateSaleWithFeeSharing.SalePhase",
              "members": [
                "Pending",
                "Deposit",
                "Over",
                "Staking",
                "Withdraw"
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_struct(UserInfo)18083_storage)": {
              "label": "mapping(address => struct PrivateSaleWithFeeSharing.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)18083_storage": {
              "label": "struct PrivateSaleWithFeeSharing.UserInfo",
              "members": [
                {
                  "label": "rewardsDistributedToAccount",
                  "type": "t_uint256"
                },
                {
                  "label": "tier",
                  "type": "t_uint8"
                },
                {
                  "label": "hasDeposited",
                  "type": "t_bool"
                },
                {
                  "label": "hasWithdrawn",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TokenDistributor": {
        "src": "contracts/Rewards/TokenDistributor.sol:14",
        "version": {
          "withMetadata": "ea5f9e1ca8d908bbe3bd9fe654aa0d1e3eddd7cd933cbeec4dc5b1165e1799ea",
          "withoutMetadata": "ea5f9e1ca8d908bbe3bd9fe654aa0d1e3eddd7cd933cbeec4dc5b1165e1799ea",
          "linkedWithoutMetadata": "ea5f9e1ca8d908bbe3bd9fe654aa0d1e3eddd7cd933cbeec4dc5b1165e1799ea"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256[],uint256[],uint256[],uint256)",
          "deposit(uint256)",
          "harvestAndCompound()",
          "updatePool()",
          "withdraw(uint256)",
          "withdrawAll()",
          "calculatePendingRewards(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenDistributor",
            "src": "contracts/Rewards/TokenDistributor.sol:95"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pixellyToken",
            "src": "contracts/Rewards/TokenDistributor.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenSplitter",
            "src": "contracts/Rewards/TokenDistributor.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "NUMBER_PERIODS",
            "src": "contracts/Rewards/TokenDistributor.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "START_BLOCK",
            "src": "contracts/Rewards/TokenDistributor.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TokenDistributor",
              "label": "accTokenPerShare",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:43"
            },
            {
              "contract": "TokenDistributor",
              "label": "currentPhase",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:46"
            },
            {
              "contract": "TokenDistributor",
              "label": "endBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:49"
            },
            {
              "contract": "TokenDistributor",
              "label": "lastRewardBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:52"
            },
            {
              "contract": "TokenDistributor",
              "label": "rewardPerBlockForOthers",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:55"
            },
            {
              "contract": "TokenDistributor",
              "label": "rewardPerBlockForStaking",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:58"
            },
            {
              "contract": "TokenDistributor",
              "label": "totalAmountStaked",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:61"
            },
            {
              "contract": "TokenDistributor",
              "label": "stakingPeriod",
              "type": "t_mapping(t_uint256,t_struct(StakingPeriod)19028_storage)",
              "src": "contracts/Rewards/TokenDistributor.sol:63"
            },
            {
              "contract": "TokenDistributor",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)19033_storage)",
              "src": "contracts/Rewards/TokenDistributor.sol:65"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(StakingPeriod)19028_storage)": {
              "label": "mapping(uint256 => struct TokenDistributor.StakingPeriod)"
            },
            "t_struct(StakingPeriod)19028_storage": {
              "label": "struct TokenDistributor.StakingPeriod",
              "members": [
                {
                  "label": "rewardPerBlockForStaking",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardPerBlockForOthers",
                  "type": "t_uint256"
                },
                {
                  "label": "periodLengthInBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(UserInfo)19033_storage)": {
              "label": "mapping(address => struct TokenDistributor.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)19033_storage": {
              "label": "struct TokenDistributor.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TokenSplitter": {
        "src": "contracts/Rewards/TokenSplitter.sol:12",
        "version": {
          "withMetadata": "a42e5b325c931346fc9dd8c23942a83bdcd2cba2c528326321602203cf5f2d3e",
          "withoutMetadata": "a72fe2722efcb83b302ab8c65b86a72a0043ab2f90a95e72df7db26685c5d30c",
          "linkedWithoutMetadata": "a72fe2722efcb83b302ab8c65b86a72a0043ab2f90a95e72df7db26685c5d30c"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address[],uint256[],address)",
          "releaseTokens(address)",
          "updateSharesOwner(address,address)",
          "calculatePendingRewards(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenSplitter",
            "src": "contracts/Rewards/TokenSplitter.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TOTAL_SHARES",
            "src": "contracts/Rewards/TokenSplitter.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pixellyToken",
            "src": "contracts/Rewards/TokenSplitter.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TokenSplitter",
              "label": "totalTokensDistributed",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenSplitter.sol:25"
            },
            {
              "contract": "TokenSplitter",
              "label": "accountInfo",
              "type": "t_mapping(t_address,t_struct(AccountInfo)20017_storage)",
              "src": "contracts/Rewards/TokenSplitter.sol:27"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(AccountInfo)20017_storage)": {
              "label": "mapping(address => struct TokenSplitter.AccountInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(AccountInfo)20017_storage": {
              "label": "struct TokenSplitter.AccountInfo",
              "members": [
                {
                  "label": "shares",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensDistributedToAccount",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TradingRewardsDistributor": {
        "src": "contracts/Rewards/TradingRewardsDistributor.sol:14",
        "version": {
          "withMetadata": "f12cc56e7581b81927640afab7ec38652696ab24f5f4fac349c1c99e64dc4fbd",
          "withoutMetadata": "aeb227c4ce8e33f363d4db12442cb4d0a30c70681a89208c207e175dcc0bd53e",
          "linkedWithoutMetadata": "aeb227c4ce8e33f363d4db12442cb4d0a30c70681a89208c207e175dcc0bd53e"
        },
        "inherit": [
          "Ownable",
          "ReentrancyGuard",
          "Pausable",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "MerkleProof"
        ],
        "methods": [
          "(address)",
          "claim(uint256,bytes32[])",
          "updateTradingRewards(bytes32,uint256)",
          "pauseDistribution()",
          "unpauseDistribution()",
          "withdrawTokenRewards(uint256)",
          "canClaim(address,uint256,bytes32[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TradingRewardsDistributor",
            "src": "contracts/Rewards/TradingRewardsDistributor.sol:55"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pixellyToken",
            "src": "contracts/Rewards/TradingRewardsDistributor.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TradingRewardsDistributor",
              "label": "currentRewardRound",
              "type": "t_uint256",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:22"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "lastPausedTimestamp",
              "type": "t_uint256",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:25"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "maximumAmountPerUserInCurrentTree",
              "type": "t_uint256",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:28"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "amountClaimedByUser",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:31"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "merkleRootOfRewardRound",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:34"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "merkleRootUsed",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:37"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "hasUserClaimedForRewardRound",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VestingContractWithFeeSharing": {
        "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:13",
        "version": {
          "withMetadata": "1507bcce7755ee8b2d4f06c322ecfa02291dba290c752fa579653f34246fa7ca",
          "withoutMetadata": "05681e687243b327ed1e56ba240b0180e209aaf089ce4b7afdd1639661b2c1b4",
          "linkedWithoutMetadata": "05681e687243b327ed1e56ba240b0180e209aaf089ce4b7afdd1639661b2c1b4"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(uint256,uint256,uint256,uint256,address)",
          "unlockLooksRareToken()",
          "withdrawOtherCurrency(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingContractWithFeeSharing",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pixellyToken",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "NUMBER_UNLOCK_PERIODS",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "STANDARD_AMOUNT_UNLOCKED_AT_EACH_UNLOCK",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "START_BLOCK",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "VESTING_BETWEEN_PERIODS_IN_BLOCKS",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingContractWithFeeSharing",
              "label": "maxAmountToWithdrawForNextPeriod",
              "type": "t_uint256",
              "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:31"
            },
            {
              "contract": "VestingContractWithFeeSharing",
              "label": "nextBlockForUnlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:34"
            },
            {
              "contract": "VestingContractWithFeeSharing",
              "label": "numberPastUnlocks",
              "type": "t_uint256",
              "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPixellyToken": {
        "src": "contracts/Rewards/interfaces/IPixellyToken.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "SUPPLY_CAP()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts/Upgrades/AdminUpgradeabilityProxy.sol:15",
        "version": {
          "withMetadata": "4badfe636dd239bcc6a113bd6f6c39e93a2dc07f9cd76fbc4d3c25f61a615c28",
          "withoutMetadata": "4badfe636dd239bcc6a113bd6f6c39e93a2dc07f9cd76fbc4d3c25f61a615c28",
          "linkedWithoutMetadata": "4badfe636dd239bcc6a113bd6f6c39e93a2dc07f9cd76fbc4d3c25f61a615c28"
        },
        "inherit": [
          "UpgradeableProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts/Upgrades/AdminUpgradeabilityProxy.sol:25"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/Upgrades/AdminUpgradeabilityProxy.sol:103"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts/Upgrades/ProxyAdmin.sol:12",
        "version": {
          "withMetadata": "1954982f6a72b966f742746d1595f28fc3bd58519d941cf5ee396174b30e0adb",
          "withoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72",
          "linkedWithoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "contracts/Upgrades/TransparentUpgradeableProxy.sol:28",
        "version": {
          "withMetadata": "e2c7b2b9cab3651e98e65ccbcfa48e3c6a1d2be60b2b3ae650ebd6578f87b2dc",
          "withoutMetadata": "e2c7b2b9cab3651e98e65ccbcfa48e3c6a1d2be60b2b3ae650ebd6578f87b2dc",
          "linkedWithoutMetadata": "e2c7b2b9cab3651e98e65ccbcfa48e3c6a1d2be60b2b3ae650ebd6578f87b2dc"
        },
        "inherit": [
          "UpgradeableProxy",
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "contracts/Upgrades/TransparentUpgradeableProxy.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeableProxy": {
        "src": "contracts/Upgrades/UpgradeableProxy.sol:17",
        "version": {
          "withMetadata": "a3d5dc7b576d487bacf1eca88509c9a9aa5c42515e53d325ceaabf217b1b5b35",
          "withoutMetadata": "a3d5dc7b576d487bacf1eca88509c9a9aa5c42515e53d325ceaabf217b1b5b35",
          "linkedWithoutMetadata": "a3d5dc7b576d487bacf1eca88509c9a9aa5c42515e53d325ceaabf217b1b5b35"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableProxy",
            "src": "contracts/Upgrades/UpgradeableProxy.sol:24"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts/library/ERC1155.sol:12",
        "version": {
          "withMetadata": "4f7758aaf073d8af6ccf5183c389c2ba027b6318cc8a4327960c62c6a224cf32",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/library/ERC1155.sol:26"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/library/ERC1155.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts/library/ERC1155Metadata.sol:10",
        "version": {
          "withMetadata": "22f0def7dd847734397d8ab2c9784174764a320bb281b7979b2f41f91fa3c1b8",
          "withoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021",
          "linkedWithoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts/library/ERC1155Metadata.sol:13"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts/library/ERC1155MintBurn.sol:10",
        "version": {
          "withMetadata": "aac939b704517d1f2525b44a9d409c32b3a5006b70cb84f471fce96b07236e5a",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC2981": {
        "src": "contracts/library/ERC2981.sol:10",
        "inherit": [
          "IERC2981RoyaltySetter",
          "IERC2981Royalties",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC2981Base": {
        "src": "contracts/library/ERC2981Base.sol:9",
        "inherit": [
          "IERC2981Royalties",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC2981Base",
              "label": "_royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)22653_storage))",
              "src": "contracts/library/ERC2981Base.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)22653_storage))": {
              "label": "mapping(address => mapping(uint256 => struct ERC2981Base.RoyaltyInfo))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)22653_storage)": {
              "label": "mapping(uint256 => struct ERC2981Base.RoyaltyInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(RoyaltyInfo)22653_storage": {
              "label": "struct ERC2981Base.RoyaltyInfo",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "royaltyPercent",
                  "type": "t_uint16"
                }
              ]
            },
            "t_uint16": {
              "label": "uint16"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC2981PerTokenRoyalties": {
        "src": "contracts/library/ERC2981PerTokenRoyalties.sol:7",
        "inherit": [
          "ERC2981",
          "IERC2981RoyaltySetter",
          "IERC2981Royalties",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "setDefaultRoyalty(address,uint16)",
          "setTokenRoyalty(uint256,address,uint16)",
          "royaltyInfo(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC2981PerTokenRoyalties",
              "label": "_royalties",
              "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)22607_storage)",
              "src": "contracts/library/ERC2981PerTokenRoyalties.sol:8"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)22607_storage)": {
              "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(RoyaltyInfo)22607_storage": {
              "label": "struct ERC2981.RoyaltyInfo",
              "members": [
                {
                  "label": "recipient",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint24"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_uint24": {
              "label": "uint24"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FixedPoint": {
        "src": "contracts/library/FixedPoint.sol:5",
        "version": {
          "withMetadata": "f5773288aa3b9fda6e316692ed3901b39e186144700422723a2cbf42bb2fe13f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts/library/IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC2981Royalties": {
        "src": "contracts/library/IERC2981Royalties.sol:7",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "royaltyInfo(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC2981RoyaltySetter": {
        "src": "contracts/library/IERC2981RoyaltySetter.sol:7",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "setDefaultRoyalty(address,uint16)",
          "setTokenRoyalty(uint256,address,uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/library/IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/library/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OracleLibrary": {
        "src": "contracts/library/OracleLibrary.sol:8",
        "version": {
          "withMetadata": "2776d44382c9e82295df8a51f02b5c9bf77ba74d223ea93bc75cbcf6e4cfb7da",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "FixedPoint"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/library/UniswapV2Library.sol:7",
        "version": {
          "withMetadata": "a941831ccfa4a17fdf81e3e7dc42eac6c3e9a04425a650395b981061415ab890",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts/mock/BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "aeb75caf3cbcefdadbf3c2db47487279b791171da64320e6a01c9670219ccd0a",
          "withoutMetadata": "f16feedc84b2c164217f0a3c0c7c7ef7e7ec09984915c9f9601de051c36efdcb",
          "linkedWithoutMetadata": "f16feedc84b2c164217f0a3c0c7c7ef7e7ec09984915c9f9601de051c36efdcb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts/mock/BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(PixellyAuction)10073",
              "src": "contracts/mock/BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(PixellyAuction)10073": {
              "label": "contract PixellyAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:7",
        "version": {
          "withMetadata": "f6bf27ebe525638474b4b3d6c79ce37fa1a36fade0b92465b899194e8b783f9a",
          "withoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957",
          "linkedWithoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockPixellyAuction": {
        "src": "contracts/mock/MockPixellyAuction.sol:7",
        "version": {
          "withMetadata": "c6b0d0c9ce2b87c559061fa6343695a59bd668d310e642281b82514ef00ccfc4",
          "withoutMetadata": "2727f080d84e34316cf6b732ba0596d54c5c003f4d0bd0bcf5ff98489fd2f09e",
          "linkedWithoutMetadata": "2727f080d84e34316cf6b732ba0596d54c5c003f4d0bd0bcf5ff98489fd2f09e"
        },
        "inherit": [
          "PixellyAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "setTime(uint256)",
          "increaseTime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MockPixellyAuction",
              "label": "time",
              "type": "t_uint256",
              "src": "contracts/mock/MockPixellyAuction.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PixellyAuctionMock": {
        "src": "contracts/mock/PixellyAuctionMock.sol:7",
        "version": {
          "withMetadata": "e93abbd3bb093782c2ac835d8a2c6da9f07b5d3d2f7a5cb5fcb6b69a1ddd770d",
          "withoutMetadata": "2bfc14b255500e3df0b8c38c011b9b8297ea45314885314870ca6d760f93e377",
          "linkedWithoutMetadata": "2bfc14b255500e3df0b8c38c011b9b8297ea45314885314870ca6d760f93e377"
        },
        "inherit": [
          "PixellyAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "ERC721Holder",
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PixellyAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts/mock/PixellyAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}