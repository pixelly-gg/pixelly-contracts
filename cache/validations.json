{
  "version": "3.2",
  "log": [
    {
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MerkleProof": {
        "src": "@openzeppelin/contracts/cryptography/MerkleProof.sol:8",
        "version": {
          "withMetadata": "e4c1a7894a06b1c2edf4951f92346a8c87ca32adf7ffd354954ba1e9195a9b23",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/introspection/ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin/contracts/introspection/ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin/contracts/introspection/ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts/library/IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:21",
        "version": {
          "withMetadata": "6159e5b8b162df16ddf823478e6d2f5f1c6289fe3985e922be50f8f8ba411d0b",
          "withoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033",
          "linkedWithoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)5373_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4750_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)5373_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)5373_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4987_storage"
                }
              ]
            },
            "t_struct(Set)4987_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4750_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)4432_storage"
                }
              ]
            },
            "t_struct(Map)4432_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)4424_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)4424_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)4424_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin/contracts/utils/EnumerableMap.sol:29",
        "version": {
          "withMetadata": "33db0abc4b4d1da32aed25dc771cc00a3efa31fff5d6d984c64d230b001e4165",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "4f51efe115648bafc40e8dcb6d91da10d2c3805f4d3f7a23f58ceb3aa49f6aac",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/utils/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "74ef6d7234587add3006addc68209e5df580602fb30a593c7df5114b91053bef",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FeeSharingSystem": {
        "src": "contracts/Rewards/FeeSharingSystem.sol:15",
        "version": {
          "withMetadata": "6f98a16411c3ddc0dc75c3def21477ca402d2d759c70784562748a75cc9f88f4",
          "withoutMetadata": "d2bf2f0822644f946d1064a40c2b8ce39c850f7179d08ceca9f8064581339b58",
          "linkedWithoutMetadata": "d2bf2f0822644f946d1064a40c2b8ce39c850f7179d08ceca9f8064581339b58"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ReentrancyGuard"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "deposit(uint256,bool)",
          "harvest()",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "updateRewards(uint256,uint256)",
          "calculatePendingRewards(address)",
          "calculateSharesValueInTART(address)",
          "calculateSharePriceInTART()",
          "lastRewardBlock()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeSharingSystem",
            "src": "contracts/Rewards/FeeSharingSystem.sol:76"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/FeeSharingSystem.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/Rewards/FeeSharingSystem.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenDistributor",
            "src": "contracts/Rewards/FeeSharingSystem.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeSharingSystem",
              "label": "currentRewardPerBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:34"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "lastRewardAdjustment",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:37"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "lastUpdateBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:40"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "periodEndBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:43"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:46"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "totalShares",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:49"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)5713_storage)",
              "src": "contracts/Rewards/FeeSharingSystem.sol:51"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)5713_storage)": {
              "label": "mapping(address => struct FeeSharingSystem.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)5713_storage": {
              "label": "struct FeeSharingSystem.UserInfo",
              "members": [
                {
                  "label": "shares",
                  "type": "t_uint256"
                },
                {
                  "label": "userRewardPerTokenPaid",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PrivateSaleWithFeeSharing": {
        "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:15",
        "version": {
          "withMetadata": "b9591ffd8a9a7aab8561fa6af883af7639a80b29f84ea598b685128dbf504d81",
          "withoutMetadata": "b9591ffd8a9a7aab8561fa6af883af7639a80b29f84ea598b685128dbf504d81",
          "linkedWithoutMetadata": "b9591ffd8a9a7aab8561fa6af883af7639a80b29f84ea598b685128dbf504d81"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256)",
          "deposit()",
          "harvest()",
          "withdraw()",
          "updateSalePhaseToWithdraw()",
          "removeUserFromWhitelist(address)",
          "setAllocationCostPerTier(uint8,uint256)",
          "setBlockForWithdrawal(uint256)",
          "setPriceOfETHInTART(uint256)",
          "updateSalePhase(uint8)",
          "withdrawCommittedAmount()",
          "whitelistUsers(address[],uint8)",
          "calculatePendingRewards(address)",
          "getMaxAmountTARTToDistribute()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PrivateSaleWithFeeSharing",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:87"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "MAX_BLOCK_FOR_WITHDRAWAL",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TOTAL_TART_DISTRIBUTED",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "currentPhase",
              "type": "t_enum(SalePhase)6499",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:47"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "blockForWithdrawal",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:50"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "priceOfETHInTART",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:53"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "totalAmountCommitted",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:56"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "totalRewardTokensDistributedToStakers",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:59"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "allocationCostPerTier",
              "type": "t_mapping(t_uint8,t_uint256)",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:62"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "numberOfParticipantsForATier",
              "type": "t_mapping(t_uint8,t_uint256)",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:65"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)6508_storage)",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:68"
            }
          ],
          "types": {
            "t_enum(SalePhase)6499": {
              "label": "enum PrivateSaleWithFeeSharing.SalePhase",
              "members": [
                "Pending",
                "Deposit",
                "Over",
                "Staking",
                "Withdraw"
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_struct(UserInfo)6508_storage)": {
              "label": "mapping(address => struct PrivateSaleWithFeeSharing.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)6508_storage": {
              "label": "struct PrivateSaleWithFeeSharing.UserInfo",
              "members": [
                {
                  "label": "rewardsDistributedToAccount",
                  "type": "t_uint256"
                },
                {
                  "label": "tier",
                  "type": "t_uint8"
                },
                {
                  "label": "hasDeposited",
                  "type": "t_bool"
                },
                {
                  "label": "hasWithdrawn",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StakingPoolForUniswapV2Tokens": {
        "src": "contracts/Rewards/TenartStaking.sol:16",
        "version": {
          "withMetadata": "3b1f83f1cb7ce56bb286b5595143291b4bcd8b31c584e500fedd13c9a50c9894",
          "withoutMetadata": "21a58aac2d8a5fbe04019ccba9220d57a41329a064c266f24f6f94ac97547e28",
          "linkedWithoutMetadata": "21a58aac2d8a5fbe04019ccba9220d57a41329a064c266f24f6f94ac97547e28"
        },
        "inherit": [
          "ReentrancyGuard",
          "Pausable",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "deposit(uint256)",
          "harvest()",
          "emergencyWithdraw()",
          "withdraw(uint256)",
          "adminRewardWithdraw(uint256)",
          "pause()",
          "unpause()",
          "updateRewardPerBlockAndEndBlock(uint256,uint256)",
          "calculatePendingRewards(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StakingPoolForUniswapV2Tokens",
            "src": "contracts/Rewards/TenartStaking.sol:77"
          },
          {
            "kind": "state-variable-immutable",
            "name": "looksRareToken",
            "src": "contracts/Rewards/TenartStaking.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "stakedToken",
            "src": "contracts/Rewards/TenartStaking.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "START_BLOCK",
            "src": "contracts/Rewards/TenartStaking.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "accTokenPerShare",
              "type": "t_uint256",
              "src": "contracts/Rewards/TenartStaking.sol:37"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "endBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TenartStaking.sol:40"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "lastRewardBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TenartStaking.sol:43"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "rewardPerBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TenartStaking.sol:46"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)7458_storage)",
              "src": "contracts/Rewards/TenartStaking.sol:49"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)7458_storage)": {
              "label": "mapping(address => struct StakingPoolForUniswapV2Tokens.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)7458_storage": {
              "label": "struct StakingPoolForUniswapV2Tokens.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartToken": {
        "src": "contracts/Rewards/TenartToken.sol:13",
        "version": {
          "withMetadata": "3e3c3900c94382a7d0718d779f8f045e0c14f5b50603c62615be255c729996e2",
          "withoutMetadata": "3e3c3900c94382a7d0718d779f8f045e0c14f5b50603c62615be255c729996e2",
          "linkedWithoutMetadata": "3e3c3900c94382a7d0718d779f8f045e0c14f5b50603c62615be255c729996e2"
        },
        "inherit": [
          "ITenartToken",
          "Ownable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,uint256)",
          "mint(address,uint256)",
          "SUPPLY_CAP()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartToken",
            "src": "contracts/Rewards/TenartToken.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_SUPPLY_CAP",
            "src": "contracts/Rewards/TenartToken.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TokenDistributor": {
        "src": "contracts/Rewards/TokenDistributor.sol:14",
        "version": {
          "withMetadata": "e47474a3e8b903c02b53be809234ac4f1e771a9df8d6187327ddb1a8fa985106",
          "withoutMetadata": "e47474a3e8b903c02b53be809234ac4f1e771a9df8d6187327ddb1a8fa985106",
          "linkedWithoutMetadata": "e47474a3e8b903c02b53be809234ac4f1e771a9df8d6187327ddb1a8fa985106"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256[],uint256[],uint256[],uint256)",
          "deposit(uint256)",
          "harvestAndCompound()",
          "updatePool()",
          "withdraw(uint256)",
          "withdrawAll()",
          "calculatePendingRewards(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenDistributor",
            "src": "contracts/Rewards/TokenDistributor.sol:95"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/TokenDistributor.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenSplitter",
            "src": "contracts/Rewards/TokenDistributor.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "NUMBER_PERIODS",
            "src": "contracts/Rewards/TokenDistributor.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "START_BLOCK",
            "src": "contracts/Rewards/TokenDistributor.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TokenDistributor",
              "label": "accTokenPerShare",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:43"
            },
            {
              "contract": "TokenDistributor",
              "label": "currentPhase",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:46"
            },
            {
              "contract": "TokenDistributor",
              "label": "endBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:49"
            },
            {
              "contract": "TokenDistributor",
              "label": "lastRewardBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:52"
            },
            {
              "contract": "TokenDistributor",
              "label": "rewardPerBlockForOthers",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:55"
            },
            {
              "contract": "TokenDistributor",
              "label": "rewardPerBlockForStaking",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:58"
            },
            {
              "contract": "TokenDistributor",
              "label": "totalAmountStaked",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:61"
            },
            {
              "contract": "TokenDistributor",
              "label": "stakingPeriod",
              "type": "t_mapping(t_uint256,t_struct(StakingPeriod)8296_storage)",
              "src": "contracts/Rewards/TokenDistributor.sol:63"
            },
            {
              "contract": "TokenDistributor",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)8301_storage)",
              "src": "contracts/Rewards/TokenDistributor.sol:65"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(StakingPeriod)8296_storage)": {
              "label": "mapping(uint256 => struct TokenDistributor.StakingPeriod)"
            },
            "t_struct(StakingPeriod)8296_storage": {
              "label": "struct TokenDistributor.StakingPeriod",
              "members": [
                {
                  "label": "rewardPerBlockForStaking",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardPerBlockForOthers",
                  "type": "t_uint256"
                },
                {
                  "label": "periodLengthInBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(UserInfo)8301_storage)": {
              "label": "mapping(address => struct TokenDistributor.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)8301_storage": {
              "label": "struct TokenDistributor.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TokenSplitter": {
        "src": "contracts/Rewards/TokenSplitter.sol:12",
        "version": {
          "withMetadata": "96e327208a7ca972de5da2516722c7891e020a86853f7c1ce4003fba6c34117b",
          "withoutMetadata": "60b25e061d13de2bb78b15c7807fdbd616ae4296044fa4bb67d9132dcb842c2c",
          "linkedWithoutMetadata": "60b25e061d13de2bb78b15c7807fdbd616ae4296044fa4bb67d9132dcb842c2c"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address[],uint256[],address)",
          "releaseTokens(address)",
          "updateSharesOwner(address,address)",
          "calculatePendingRewards(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenSplitter",
            "src": "contracts/Rewards/TokenSplitter.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TOTAL_SHARES",
            "src": "contracts/Rewards/TokenSplitter.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/TokenSplitter.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TokenSplitter",
              "label": "totalTokensDistributed",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenSplitter.sol:25"
            },
            {
              "contract": "TokenSplitter",
              "label": "accountInfo",
              "type": "t_mapping(t_address,t_struct(AccountInfo)9285_storage)",
              "src": "contracts/Rewards/TokenSplitter.sol:27"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(AccountInfo)9285_storage)": {
              "label": "mapping(address => struct TokenSplitter.AccountInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(AccountInfo)9285_storage": {
              "label": "struct TokenSplitter.AccountInfo",
              "members": [
                {
                  "label": "shares",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensDistributedToAccount",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TradingRewardsDistributor": {
        "src": "contracts/Rewards/TradingRewardsDistributor.sol:14",
        "version": {
          "withMetadata": "5a10783c334b7dd679676d2d3a249644788aedeb6e98e784b46eb9078067aa54",
          "withoutMetadata": "698b0ba28e7632a36e88e1f75e97ef463565473ab12d04471015a564e92d5b6a",
          "linkedWithoutMetadata": "698b0ba28e7632a36e88e1f75e97ef463565473ab12d04471015a564e92d5b6a"
        },
        "inherit": [
          "Ownable",
          "ReentrancyGuard",
          "Pausable",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "MerkleProof"
        ],
        "methods": [
          "(address)",
          "claim(uint256,bytes32[])",
          "updateTradingRewards(bytes32,uint256)",
          "pauseDistribution()",
          "unpauseDistribution()",
          "withdrawTokenRewards(uint256)",
          "canClaim(address,uint256,bytes32[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TradingRewardsDistributor",
            "src": "contracts/Rewards/TradingRewardsDistributor.sol:55"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/TradingRewardsDistributor.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TradingRewardsDistributor",
              "label": "currentRewardRound",
              "type": "t_uint256",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:22"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "lastPausedTimestamp",
              "type": "t_uint256",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:25"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "maximumAmountPerUserInCurrentTree",
              "type": "t_uint256",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:28"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "amountClaimedByUser",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:31"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "merkleRootOfRewardRound",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:34"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "merkleRootUsed",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:37"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "hasUserClaimedForRewardRound",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VestingContractWithFeeSharing": {
        "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:13",
        "version": {
          "withMetadata": "493381ea0d065b8aaa7f905a165972c5b3fa40621441f01e16b018f3796ed911",
          "withoutMetadata": "ec3e3c5c2692f688d05d4eecc9d19c2329acd089ff76664b38253ea5fe5bfeaf",
          "linkedWithoutMetadata": "ec3e3c5c2692f688d05d4eecc9d19c2329acd089ff76664b38253ea5fe5bfeaf"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(uint256,uint256,uint256,uint256,address)",
          "unlockLooksRareToken()",
          "withdrawOtherCurrency(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingContractWithFeeSharing",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "NUMBER_UNLOCK_PERIODS",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "STANDARD_AMOUNT_UNLOCKED_AT_EACH_UNLOCK",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "START_BLOCK",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "VESTING_BETWEEN_PERIODS_IN_BLOCKS",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingContractWithFeeSharing",
              "label": "maxAmountToWithdrawForNextPeriod",
              "type": "t_uint256",
              "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:31"
            },
            {
              "contract": "VestingContractWithFeeSharing",
              "label": "nextBlockForUnlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:34"
            },
            {
              "contract": "VestingContractWithFeeSharing",
              "label": "numberPastUnlocks",
              "type": "t_uint256",
              "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ITenartToken": {
        "src": "contracts/Rewards/interfaces/ITenartToken.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "SUPPLY_CAP()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TenartAddressRegistry": {
        "src": "contracts/TenartAddressRegistry.sol:8",
        "version": {
          "withMetadata": "48e529079b227b14fa42607eb7d59fa6280dfe8b0bdd730e7d50fe5cb43f1583",
          "withoutMetadata": "4fd7467afe82d21e7ac8aa7815babafe867eccbd42fabfb94fb53916acc4e7bf",
          "linkedWithoutMetadata": "4fd7467afe82d21e7ac8aa7815babafe867eccbd42fabfb94fb53916acc4e7bf"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateTenartNFT(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)",
          "updateRoyaltyRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartAddressRegistry",
              "label": "tenartNFT",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:12"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:15"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:18"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:21"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:24"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:27"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:30"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:33"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:36"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:39"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "royaltyRegistry",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartArtFactory": {
        "src": "contracts/TenartArtFactory.sol:8",
        "version": {
          "withMetadata": "143841b5c2bb77f54b1d0f43aeadb63f1b7ee1dd93cdce7af188850275b50893",
          "withoutMetadata": "f50354e24b5fac0ed2d83d4807450ba85a2bccda19fda2b11ac8c99a994eeab2",
          "linkedWithoutMetadata": "f50354e24b5fac0ed2d83d4807450ba85a2bccda19fda2b11ac8c99a994eeab2"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartArtFactory",
            "src": "contracts/TenartArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartArtFactory.sol:14"
            },
            {
              "contract": "TenartArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartArtFactory.sol:17"
            },
            {
              "contract": "TenartArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtFactory.sol:20"
            },
            {
              "contract": "TenartArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtFactory.sol:23"
            },
            {
              "contract": "TenartArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/TenartArtFactory.sol:26"
            },
            {
              "contract": "TenartArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TenartArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartArtFactoryPrivate": {
        "src": "contracts/TenartArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "62104fb8f516d5cc45a00018ce2f58bd4a00f1362c8424a15bbd60f097b23f57",
          "withoutMetadata": "ede3c7b60f0cd8ba1b79391454bfaa2b13d1f8cc694e5715a7d995e48773fa47",
          "linkedWithoutMetadata": "ede3c7b60f0cd8ba1b79391454bfaa2b13d1f8cc694e5715a7d995e48773fa47"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartArtFactoryPrivate",
            "src": "contracts/TenartArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartArtFactoryPrivate.sol:14"
            },
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartArtFactoryPrivate.sol:17"
            },
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtFactoryPrivate.sol:20"
            },
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtFactoryPrivate.sol:23"
            },
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/TenartArtFactoryPrivate.sol:26"
            },
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TenartArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts/TenartArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "7f95cdc38e89bae24160fd7a573a9e55ad073029b8a2970ae0053036c3cb2ee0",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts/TenartArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "721aa68583181a3ace999d9956398496f5b39d9eb230ed378c47a4412ec2c611",
          "withoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d",
          "linkedWithoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)11267)",
              "src": "contracts/TenartArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)11267)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)11267": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartArtTradable": {
        "src": "contracts/TenartArtTradable.sol:22",
        "version": {
          "withMetadata": "4e62409cc08323a755af6609dfd2de33fdd764b0b199fbb80fa205195ae7fd94",
          "withoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b",
          "linkedWithoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartArtTradable",
            "src": "contracts/TenartArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/TenartArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/TenartArtTradable.sol:28"
            },
            {
              "contract": "TenartArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/TenartArtTradable.sol:31"
            },
            {
              "contract": "TenartArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/TenartArtTradable.sol:33"
            },
            {
              "contract": "TenartArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TenartArtTradable.sol:34"
            },
            {
              "contract": "TenartArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/TenartArtTradable.sol:37"
            },
            {
              "contract": "TenartArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/TenartArtTradable.sol:39"
            },
            {
              "contract": "TenartArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtTradable.sol:41"
            },
            {
              "contract": "TenartArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartArtTradable.sol:43"
            },
            {
              "contract": "TenartArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartArtTradable.sol:45"
            },
            {
              "contract": "TenartArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartArtTradablePrivate": {
        "src": "contracts/TenartArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "323dcda7154000d48709b1a2d12ff3dbdee0f89ba5d42feaf1aff1bd55a831b1",
          "withoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9",
          "linkedWithoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartArtTradablePrivate",
            "src": "contracts/TenartArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/TenartArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/TenartArtTradablePrivate.sol:28"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/TenartArtTradablePrivate.sol:31"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/TenartArtTradablePrivate.sol:33"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TenartArtTradablePrivate.sol:34"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/TenartArtTradablePrivate.sol:37"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/TenartArtTradablePrivate.sol:39"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtTradablePrivate.sol:41"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartArtTradablePrivate.sol:43"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartArtTradablePrivate.sol:45"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ITenartAddressRegistry": {
        "src": "contracts/TenartPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartBundleMarketplace": {
        "src": "contracts/TenartMarketplace.sol:52",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartMarketplace": {
        "src": "contracts/TenartBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartRoyaltyRegistry": {
        "src": "contracts/TenartMarketplace.sol:74",
        "inherit": [],
        "libraries": [],
        "methods": [
          "royaltyInfo(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartTokenRegistry": {
        "src": "contracts/TenartPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TenartAuction": {
        "src": "contracts/TenartAuction.sol:53",
        "version": {
          "withMetadata": "db0475967ba15c1715e85b3d1fad219243c0f7656c227515915e70d300b80829",
          "withoutMetadata": "859d8697d145a46440e68a55c7647aa61c2d5ca28244c0c47636972a02c361b5",
          "linkedWithoutMetadata": "859d8697d145a46440e68a55c7647aa61c2d5ca28244c0c47636972a02c361b5"
        },
        "inherit": [
          "IERC721Receiver",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)",
          "onERC721Received(address,address,uint256,bytes)",
          "endAuction(address,uint256)",
          "cancelAuctionOwner(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)11781_storage))",
              "src": "contracts/TenartAuction.sol:152"
            },
            {
              "contract": "TenartAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)11788_storage))",
              "src": "contracts/TenartAuction.sol:155"
            },
            {
              "contract": "TenartAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts/TenartAuction.sol:158"
            },
            {
              "contract": "TenartAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts/TenartAuction.sol:161"
            },
            {
              "contract": "TenartAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartAuction.sol:164"
            },
            {
              "contract": "TenartAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts/TenartAuction.sol:167"
            },
            {
              "contract": "TenartAuction",
              "label": "addressRegistry",
              "type": "t_contract(ITenartAddressRegistry)11601",
              "src": "contracts/TenartAuction.sol:170"
            },
            {
              "contract": "TenartAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts/TenartAuction.sol:173"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)11781_storage))": {
              "label": "mapping(address => mapping(uint256 => struct TenartAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)11781_storage)": {
              "label": "mapping(uint256 => struct TenartAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)11781_storage": {
              "label": "struct TenartAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)11788_storage))": {
              "label": "mapping(address => mapping(uint256 => struct TenartAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)11788_storage)": {
              "label": "mapping(uint256 => struct TenartAuction.HighestBid)"
            },
            "t_struct(HighestBid)11788_storage": {
              "label": "struct TenartAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(ITenartAddressRegistry)11601": {
              "label": "contract ITenartAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartBundleMarketplace": {
        "src": "contracts/TenartBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "8a42d96aea082a8156f5faa16d1f70fe32662702b3a9c1a903eb0c5f0c776c56",
          "withoutMetadata": "0358ccbe762a0ef4d331cd1cca908db1b4af94c4f7baa88fc1e9ec58a89a9efc",
          "linkedWithoutMetadata": "0358ccbe762a0ef4d331cd1cca908db1b4af94c4f7baa88fc1e9ec58a89a9efc"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20Upgradeable",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)13898_storage))",
              "src": "contracts/TenartBundleMarketplace.sol:106"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/TenartBundleMarketplace.sol:109"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)5167_storage))",
              "src": "contracts/TenartBundleMarketplace.sol:111"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts/TenartBundleMarketplace.sol:113"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts/TenartBundleMarketplace.sol:115"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)13905_storage))",
              "src": "contracts/TenartBundleMarketplace.sol:118"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartBundleMarketplace.sol:121"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartBundleMarketplace.sol:124"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(ITenartAddressRegistry)13761",
              "src": "contracts/TenartBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)13898_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct TenartBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)13898_storage)": {
              "label": "mapping(bytes32 => struct TenartBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)13898_storage": {
              "label": "struct TenartBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)5167_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)5167_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)5167_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4987_storage"
                }
              ]
            },
            "t_struct(Set)4987_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)13905_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct TenartBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)13905_storage)": {
              "label": "mapping(address => struct TenartBundleMarketplace.Offer)"
            },
            "t_struct(Offer)13905_storage": {
              "label": "struct TenartBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20Upgradeable)825"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)825": {
              "label": "contract IERC20Upgradeable"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(ITenartAddressRegistry)13761": {
              "label": "contract ITenartAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ITenartAuction": {
        "src": "contracts/TenartMarketplace.sol:38",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartNFTFactory": {
        "src": "contracts/TenartMarketplace.sol:60",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartPriceFeed": {
        "src": "contracts/TenartMarketplace.sol:68",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wETH()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TenartMarketplace": {
        "src": "contracts/TenartMarketplace.sol:82",
        "version": {
          "withMetadata": "610fff48fd490baae2088bf7c7eb43bf0c3133beb6c154bf434579489a9f1d62",
          "withoutMetadata": "d07a87683eb482fea8352d3b8269a6cd80da67254af9054079db6e07f6b43328",
          "linkedWithoutMetadata": "d07a87683eb482fea8352d3b8269a6cd80da67254af9054079db6e07f6b43328"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "createCounterOffer(address,uint256,(address,uint256,uint256,uint256),address)",
          "cancelOffer(address,uint256)",
          "refuseOffer(address,uint256,address,uint256)",
          "cancelCounterOffer(address,uint256,uint256,address)",
          "refuseCounterOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "acceptCounterOffer(address,uint256)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts/TenartMarketplace.sol:186"
            },
            {
              "contract": "TenartMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts/TenartMarketplace.sol:189"
            },
            {
              "contract": "TenartMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)16095_storage)))",
              "src": "contracts/TenartMarketplace.sol:192"
            },
            {
              "contract": "TenartMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)16104_storage)))",
              "src": "contracts/TenartMarketplace.sol:196"
            },
            {
              "contract": "TenartMarketplace",
              "label": "counterOffers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)16104_storage)))",
              "src": "contracts/TenartMarketplace.sol:200"
            },
            {
              "contract": "TenartMarketplace",
              "label": "ownerOfERC1155",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts/TenartMarketplace.sol:204"
            },
            {
              "contract": "TenartMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts/TenartMarketplace.sol:207"
            },
            {
              "contract": "TenartMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartMarketplace.sol:210"
            },
            {
              "contract": "TenartMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)16111_storage)",
              "src": "contracts/TenartMarketplace.sol:213"
            },
            {
              "contract": "TenartMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(ITenartAddressRegistry)15871",
              "src": "contracts/TenartMarketplace.sol:216"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)16095_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct TenartMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)16095_storage))": {
              "label": "mapping(uint256 => mapping(address => struct TenartMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)16095_storage)": {
              "label": "mapping(address => struct TenartMarketplace.Listing)"
            },
            "t_struct(Listing)16095_storage": {
              "label": "struct TenartMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)16104_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct TenartMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)16104_storage))": {
              "label": "mapping(uint256 => mapping(address => struct TenartMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)16104_storage)": {
              "label": "mapping(address => struct TenartMarketplace.Offer)"
            },
            "t_struct(Offer)16104_storage": {
              "label": "struct TenartMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20Upgradeable)825"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)825": {
              "label": "contract IERC20Upgradeable"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)16111_storage)": {
              "label": "mapping(address => struct TenartMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)16111_storage": {
              "label": "struct TenartMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(ITenartAddressRegistry)15871": {
              "label": "contract ITenartAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartNFT": {
        "src": "contracts/TenartNFT.sol:10",
        "version": {
          "withMetadata": "56d959a19d50f2c0b5872cfc50931f710e74a7440c923cfd7f83385f5b9db403",
          "withoutMetadata": "d9b68257ac7bcf7939a0961d1647c80f6e259ab7a771f161d63f786d441c37b2",
          "linkedWithoutMetadata": "d9b68257ac7bcf7939a0961d1647c80f6e259ab7a771f161d63f786d441c37b2"
        },
        "inherit": [
          "Ownable",
          "ERC2981PerTokenRoyalties",
          "ERC2981",
          "IERC2981RoyaltySetter",
          "IERC2981Royalties",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string,address,uint256)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartNFT",
            "src": "contracts/TenartNFT.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartNFT",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts/TenartNFT.sol:26"
            },
            {
              "contract": "TenartNFT",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/TenartNFT.sol:29"
            },
            {
              "contract": "TenartNFT",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFT.sol:32"
            },
            {
              "contract": "TenartNFT",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartNFT.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartNFTFactory": {
        "src": "contracts/TenartNFTFactory.sol:8",
        "version": {
          "withMetadata": "9a6b6e5de9ad1f917da82c137dcb59c91410021aacbb14a9de61ff2ea09fd90d",
          "withoutMetadata": "618becf40f53857cfd255af61fb3d44a215ff2f2fc8ef75a471e0c25f2e66c6e",
          "linkedWithoutMetadata": "618becf40f53857cfd255af61fb3d44a215ff2f2fc8ef75a471e0c25f2e66c6e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartNFTFactory",
            "src": "contracts/TenartNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/TenartNFTFactory.sol:14"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTFactory.sol:17"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTFactory.sol:20"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTFactory.sol:23"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTFactory.sol:26"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/TenartNFTFactory.sol:29"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TenartNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartNFTFactoryPrivate": {
        "src": "contracts/TenartNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "f86bd27ec9f2b42b7cc9787ad7e4e2a7986de00e3058ad3e2b2eb3826c34130c",
          "withoutMetadata": "2df81774e2e26fae4e020a3237af815e340278ab48ae3b3cdd3181966f3f45ff",
          "linkedWithoutMetadata": "2df81774e2e26fae4e020a3237af815e340278ab48ae3b3cdd3181966f3f45ff"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartNFTFactoryPrivate",
            "src": "contracts/TenartNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/TenartNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/TenartNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TenartNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartNFTTradable": {
        "src": "contracts/TenartNFTTradable.sol:12",
        "version": {
          "withMetadata": "619354b452fb248337ad26ac2962de06671fdd92ef1068e05087bd4d006205bd",
          "withoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b",
          "linkedWithoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartNFTTradable",
            "src": "contracts/TenartNFTTradable.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/TenartNFTTradable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/TenartNFTTradable.sol:23"
            },
            {
              "contract": "TenartNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTTradable.sol:24"
            },
            {
              "contract": "TenartNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTTradable.sol:25"
            },
            {
              "contract": "TenartNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/TenartNFTTradable.sol:26"
            },
            {
              "contract": "TenartNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTTradable.sol:29"
            },
            {
              "contract": "TenartNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartNFTTradable.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartNFTTradablePrivate": {
        "src": "contracts/TenartNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "c4a8eaa76caa48c0a52a4f45c6d2161e7a30cf28fc3f7898a445945051c09c9f",
          "withoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9",
          "linkedWithoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartNFTTradablePrivate",
            "src": "contracts/TenartNFTTradablePrivate.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/TenartNFTTradablePrivate.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/TenartNFTTradablePrivate.sol:23"
            },
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTTradablePrivate.sol:24"
            },
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTTradablePrivate.sol:25"
            },
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/TenartNFTTradablePrivate.sol:26"
            },
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTTradablePrivate.sol:29"
            },
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartNFTTradablePrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts/TenartPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TenartPriceFeed": {
        "src": "contracts/TenartPriceFeed.sol:21",
        "version": {
          "withMetadata": "b4f919e6fc1c65112c2b30eda0a752d13b677af1e963479e3da1911773788936",
          "withoutMetadata": "abca15542052f5c81283a59fa5becdd88e4e88dbca66036af74057ef29025e8c",
          "linkedWithoutMetadata": "abca15542052f5c81283a59fa5becdd88e4e88dbca66036af74057ef29025e8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartPriceFeed",
            "src": "contracts/TenartPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/TenartPriceFeed.sol:23"
            },
            {
              "contract": "TenartPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts/TenartPriceFeed.sol:26"
            },
            {
              "contract": "TenartPriceFeed",
              "label": "wETH",
              "type": "t_address",
              "src": "contracts/TenartPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartRoyaltyRegistry": {
        "src": "contracts/TenartRoyaltyRegistry.sol:11",
        "version": {
          "withMetadata": "dcb620d326baf314ff3b77896241688e1421c82143afcd54b9a987b5897cc692",
          "withoutMetadata": "9dcf985a0b077c6d7450ffac80e18e5b44aa38ac368ad4347b5c1a868a86b3e5",
          "linkedWithoutMetadata": "9dcf985a0b077c6d7450ffac80e18e5b44aa38ac368ad4347b5c1a868a86b3e5"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "setDefaultRoyalty(address,address,uint16)",
          "setRoyalty(address,uint256,address,uint16)",
          "royaltyInfo(address,uint256,uint256)",
          "updateMigrationManager(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartRoyaltyRegistry",
              "label": "royaltyMigrationManager",
              "type": "t_address",
              "src": "contracts/TenartRoyaltyRegistry.sol:12"
            },
            {
              "contract": "TenartRoyaltyRegistry",
              "label": "_royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)20226_storage))",
              "src": "contracts/TenartRoyaltyRegistry.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)20226_storage))": {
              "label": "mapping(address => mapping(uint256 => struct TenartRoyaltyRegistry.RoyaltyInfo))"
            },
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)20226_storage)": {
              "label": "mapping(uint256 => struct TenartRoyaltyRegistry.RoyaltyInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(RoyaltyInfo)20226_storage": {
              "label": "struct TenartRoyaltyRegistry.RoyaltyInfo",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "royaltyPercent",
                  "type": "t_uint16"
                }
              ]
            },
            "t_uint16": {
              "label": "uint16"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartTokenRegistry": {
        "src": "contracts/TenartTokenRegistry.sol:7",
        "version": {
          "withMetadata": "84a4a9154a3c4231dfa778efc9c45eeed8114ae38fda5c0fe7f63f47a2fc9bdc",
          "withoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86",
          "linkedWithoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TenartTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts/Upgrades/AdminUpgradeabilityProxy.sol:15",
        "version": {
          "withMetadata": "4badfe636dd239bcc6a113bd6f6c39e93a2dc07f9cd76fbc4d3c25f61a615c28",
          "withoutMetadata": "4badfe636dd239bcc6a113bd6f6c39e93a2dc07f9cd76fbc4d3c25f61a615c28",
          "linkedWithoutMetadata": "4badfe636dd239bcc6a113bd6f6c39e93a2dc07f9cd76fbc4d3c25f61a615c28"
        },
        "inherit": [
          "UpgradeableProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts/Upgrades/AdminUpgradeabilityProxy.sol:25"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/Upgrades/AdminUpgradeabilityProxy.sol:103"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts/Upgrades/ProxyAdmin.sol:12",
        "version": {
          "withMetadata": "1954982f6a72b966f742746d1595f28fc3bd58519d941cf5ee396174b30e0adb",
          "withoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72",
          "linkedWithoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "contracts/Upgrades/TransparentUpgradeableProxy.sol:28",
        "version": {
          "withMetadata": "e2c7b2b9cab3651e98e65ccbcfa48e3c6a1d2be60b2b3ae650ebd6578f87b2dc",
          "withoutMetadata": "e2c7b2b9cab3651e98e65ccbcfa48e3c6a1d2be60b2b3ae650ebd6578f87b2dc",
          "linkedWithoutMetadata": "e2c7b2b9cab3651e98e65ccbcfa48e3c6a1d2be60b2b3ae650ebd6578f87b2dc"
        },
        "inherit": [
          "UpgradeableProxy",
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "contracts/Upgrades/TransparentUpgradeableProxy.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeableProxy": {
        "src": "contracts/Upgrades/UpgradeableProxy.sol:17",
        "version": {
          "withMetadata": "a3d5dc7b576d487bacf1eca88509c9a9aa5c42515e53d325ceaabf217b1b5b35",
          "withoutMetadata": "a3d5dc7b576d487bacf1eca88509c9a9aa5c42515e53d325ceaabf217b1b5b35",
          "linkedWithoutMetadata": "a3d5dc7b576d487bacf1eca88509c9a9aa5c42515e53d325ceaabf217b1b5b35"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableProxy",
            "src": "contracts/Upgrades/UpgradeableProxy.sol:24"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts/library/ERC1155.sol:12",
        "version": {
          "withMetadata": "4f7758aaf073d8af6ccf5183c389c2ba027b6318cc8a4327960c62c6a224cf32",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/library/ERC1155.sol:26"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/library/ERC1155.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts/library/ERC1155Metadata.sol:10",
        "version": {
          "withMetadata": "22f0def7dd847734397d8ab2c9784174764a320bb281b7979b2f41f91fa3c1b8",
          "withoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021",
          "linkedWithoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts/library/ERC1155Metadata.sol:13"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts/library/ERC1155MintBurn.sol:10",
        "version": {
          "withMetadata": "aac939b704517d1f2525b44a9d409c32b3a5006b70cb84f471fce96b07236e5a",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC2981": {
        "src": "contracts/library/ERC2981.sol:10",
        "inherit": [
          "IERC2981RoyaltySetter",
          "IERC2981Royalties",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC2981Base": {
        "src": "contracts/library/ERC2981Base.sol:9",
        "inherit": [
          "IERC2981Royalties",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC2981Base",
              "label": "_royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)22312_storage))",
              "src": "contracts/library/ERC2981Base.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)22312_storage))": {
              "label": "mapping(address => mapping(uint256 => struct ERC2981Base.RoyaltyInfo))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)22312_storage)": {
              "label": "mapping(uint256 => struct ERC2981Base.RoyaltyInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(RoyaltyInfo)22312_storage": {
              "label": "struct ERC2981Base.RoyaltyInfo",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "royaltyPercent",
                  "type": "t_uint16"
                }
              ]
            },
            "t_uint16": {
              "label": "uint16"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC2981PerTokenRoyalties": {
        "src": "contracts/library/ERC2981PerTokenRoyalties.sol:7",
        "inherit": [
          "ERC2981",
          "IERC2981RoyaltySetter",
          "IERC2981Royalties",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "setDefaultRoyalty(address,uint16)",
          "setTokenRoyalty(uint256,address,uint16)",
          "royaltyInfo(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC2981PerTokenRoyalties",
              "label": "_royalties",
              "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)22266_storage)",
              "src": "contracts/library/ERC2981PerTokenRoyalties.sol:8"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)22266_storage)": {
              "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(RoyaltyInfo)22266_storage": {
              "label": "struct ERC2981.RoyaltyInfo",
              "members": [
                {
                  "label": "recipient",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint24"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_uint24": {
              "label": "uint24"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts/library/IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC2981Royalties": {
        "src": "contracts/library/IERC2981Royalties.sol:7",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "royaltyInfo(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC2981RoyaltySetter": {
        "src": "contracts/library/IERC2981RoyaltySetter.sol:7",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "setDefaultRoyalty(address,uint16)",
          "setTokenRoyalty(uint256,address,uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts/mock/BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "d0b282f3a3ff01a0d79f6efbb7abc447e3155393ca143b6392b02d6d1b46230e",
          "withoutMetadata": "f16feedc84b2c164217f0a3c0c7c7ef7e7ec09984915c9f9601de051c36efdcb",
          "linkedWithoutMetadata": "f16feedc84b2c164217f0a3c0c7c7ef7e7ec09984915c9f9601de051c36efdcb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts/mock/BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(TenartAuction)13733",
              "src": "contracts/mock/BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(TenartAuction)13733": {
              "label": "contract TenartAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:7",
        "version": {
          "withMetadata": "f6bf27ebe525638474b4b3d6c79ce37fa1a36fade0b92465b899194e8b783f9a",
          "withoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957",
          "linkedWithoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockTenartAuction": {
        "src": "contracts/mock/MockTenartAuction.sol:7",
        "version": {
          "withMetadata": "0e9eb1ece2ec6417a8fa011b918140b3acb9e37aa7b4df7ae7136ff77ea19e86",
          "withoutMetadata": "3d7092d85b1db98ef1fc03e9e0f6dff6f1e3e58df4673ef162926046d28dc747",
          "linkedWithoutMetadata": "3d7092d85b1db98ef1fc03e9e0f6dff6f1e3e58df4673ef162926046d28dc747"
        },
        "inherit": [
          "TenartAuction",
          "IERC721Receiver",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTime(uint256)",
          "increaseTime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MockTenartAuction",
              "label": "time",
              "type": "t_uint256",
              "src": "contracts/mock/MockTenartAuction.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartAuctionMock": {
        "src": "contracts/mock/TenartAuctionMock.sol:7",
        "version": {
          "withMetadata": "0659d2ba8da3ddfe4dab9b0e8a28563b3f19bd841af301ae62316b517d6430b5",
          "withoutMetadata": "1afd5b3a1e36cd1f39685070f9ccf070e947c8374118782cfd04d8d8d64357fd",
          "linkedWithoutMetadata": "1afd5b3a1e36cd1f39685070f9ccf070e947c8374118782cfd04d8d8d64357fd"
        },
        "inherit": [
          "TenartAuction",
          "IERC721Receiver",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts/mock/TenartAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MerkleProof": {
        "src": "@openzeppelin/contracts/cryptography/MerkleProof.sol:8",
        "version": {
          "withMetadata": "e4c1a7894a06b1c2edf4951f92346a8c87ca32adf7ffd354954ba1e9195a9b23",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/introspection/ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin/contracts/introspection/ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin/contracts/introspection/ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts/library/IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:21",
        "version": {
          "withMetadata": "6159e5b8b162df16ddf823478e6d2f5f1c6289fe3985e922be50f8f8ba411d0b",
          "withoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033",
          "linkedWithoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)5373_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4750_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)5373_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)5373_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4987_storage"
                }
              ]
            },
            "t_struct(Set)4987_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4750_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)4432_storage"
                }
              ]
            },
            "t_struct(Map)4432_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)4424_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)4424_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)4424_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin/contracts/utils/EnumerableMap.sol:29",
        "version": {
          "withMetadata": "33db0abc4b4d1da32aed25dc771cc00a3efa31fff5d6d984c64d230b001e4165",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "4f51efe115648bafc40e8dcb6d91da10d2c3805f4d3f7a23f58ceb3aa49f6aac",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/utils/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "74ef6d7234587add3006addc68209e5df580602fb30a593c7df5114b91053bef",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FeeSharingSystem": {
        "src": "contracts/Rewards/FeeSharingSystem.sol:15",
        "version": {
          "withMetadata": "6f98a16411c3ddc0dc75c3def21477ca402d2d759c70784562748a75cc9f88f4",
          "withoutMetadata": "d2bf2f0822644f946d1064a40c2b8ce39c850f7179d08ceca9f8064581339b58",
          "linkedWithoutMetadata": "d2bf2f0822644f946d1064a40c2b8ce39c850f7179d08ceca9f8064581339b58"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ReentrancyGuard"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "deposit(uint256,bool)",
          "harvest()",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "updateRewards(uint256,uint256)",
          "calculatePendingRewards(address)",
          "calculateSharesValueInTART(address)",
          "calculateSharePriceInTART()",
          "lastRewardBlock()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeSharingSystem",
            "src": "contracts/Rewards/FeeSharingSystem.sol:76"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/FeeSharingSystem.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/Rewards/FeeSharingSystem.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenDistributor",
            "src": "contracts/Rewards/FeeSharingSystem.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeSharingSystem",
              "label": "currentRewardPerBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:34"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "lastRewardAdjustment",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:37"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "lastUpdateBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:40"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "periodEndBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:43"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:46"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "totalShares",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:49"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)5713_storage)",
              "src": "contracts/Rewards/FeeSharingSystem.sol:51"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)5713_storage)": {
              "label": "mapping(address => struct FeeSharingSystem.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)5713_storage": {
              "label": "struct FeeSharingSystem.UserInfo",
              "members": [
                {
                  "label": "shares",
                  "type": "t_uint256"
                },
                {
                  "label": "userRewardPerTokenPaid",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PrivateSaleWithFeeSharing": {
        "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:15",
        "version": {
          "withMetadata": "b9591ffd8a9a7aab8561fa6af883af7639a80b29f84ea598b685128dbf504d81",
          "withoutMetadata": "b9591ffd8a9a7aab8561fa6af883af7639a80b29f84ea598b685128dbf504d81",
          "linkedWithoutMetadata": "b9591ffd8a9a7aab8561fa6af883af7639a80b29f84ea598b685128dbf504d81"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256)",
          "deposit()",
          "harvest()",
          "withdraw()",
          "updateSalePhaseToWithdraw()",
          "removeUserFromWhitelist(address)",
          "setAllocationCostPerTier(uint8,uint256)",
          "setBlockForWithdrawal(uint256)",
          "setPriceOfETHInTART(uint256)",
          "updateSalePhase(uint8)",
          "withdrawCommittedAmount()",
          "whitelistUsers(address[],uint8)",
          "calculatePendingRewards(address)",
          "getMaxAmountTARTToDistribute()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PrivateSaleWithFeeSharing",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:87"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "MAX_BLOCK_FOR_WITHDRAWAL",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TOTAL_TART_DISTRIBUTED",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "currentPhase",
              "type": "t_enum(SalePhase)6499",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:47"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "blockForWithdrawal",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:50"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "priceOfETHInTART",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:53"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "totalAmountCommitted",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:56"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "totalRewardTokensDistributedToStakers",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:59"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "allocationCostPerTier",
              "type": "t_mapping(t_uint8,t_uint256)",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:62"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "numberOfParticipantsForATier",
              "type": "t_mapping(t_uint8,t_uint256)",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:65"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)6508_storage)",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:68"
            }
          ],
          "types": {
            "t_enum(SalePhase)6499": {
              "label": "enum PrivateSaleWithFeeSharing.SalePhase",
              "members": [
                "Pending",
                "Deposit",
                "Over",
                "Staking",
                "Withdraw"
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_struct(UserInfo)6508_storage)": {
              "label": "mapping(address => struct PrivateSaleWithFeeSharing.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)6508_storage": {
              "label": "struct PrivateSaleWithFeeSharing.UserInfo",
              "members": [
                {
                  "label": "rewardsDistributedToAccount",
                  "type": "t_uint256"
                },
                {
                  "label": "tier",
                  "type": "t_uint8"
                },
                {
                  "label": "hasDeposited",
                  "type": "t_bool"
                },
                {
                  "label": "hasWithdrawn",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StakingPoolForUniswapV2Tokens": {
        "src": "contracts/Rewards/TenartStaking.sol:16",
        "version": {
          "withMetadata": "3b1f83f1cb7ce56bb286b5595143291b4bcd8b31c584e500fedd13c9a50c9894",
          "withoutMetadata": "21a58aac2d8a5fbe04019ccba9220d57a41329a064c266f24f6f94ac97547e28",
          "linkedWithoutMetadata": "21a58aac2d8a5fbe04019ccba9220d57a41329a064c266f24f6f94ac97547e28"
        },
        "inherit": [
          "ReentrancyGuard",
          "Pausable",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "deposit(uint256)",
          "harvest()",
          "emergencyWithdraw()",
          "withdraw(uint256)",
          "adminRewardWithdraw(uint256)",
          "pause()",
          "unpause()",
          "updateRewardPerBlockAndEndBlock(uint256,uint256)",
          "calculatePendingRewards(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StakingPoolForUniswapV2Tokens",
            "src": "contracts/Rewards/TenartStaking.sol:77"
          },
          {
            "kind": "state-variable-immutable",
            "name": "looksRareToken",
            "src": "contracts/Rewards/TenartStaking.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "stakedToken",
            "src": "contracts/Rewards/TenartStaking.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "START_BLOCK",
            "src": "contracts/Rewards/TenartStaking.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "accTokenPerShare",
              "type": "t_uint256",
              "src": "contracts/Rewards/TenartStaking.sol:37"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "endBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TenartStaking.sol:40"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "lastRewardBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TenartStaking.sol:43"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "rewardPerBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TenartStaking.sol:46"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)7458_storage)",
              "src": "contracts/Rewards/TenartStaking.sol:49"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)7458_storage)": {
              "label": "mapping(address => struct StakingPoolForUniswapV2Tokens.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)7458_storage": {
              "label": "struct StakingPoolForUniswapV2Tokens.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartToken": {
        "src": "contracts/Rewards/TenartToken.sol:13",
        "version": {
          "withMetadata": "3e3c3900c94382a7d0718d779f8f045e0c14f5b50603c62615be255c729996e2",
          "withoutMetadata": "3e3c3900c94382a7d0718d779f8f045e0c14f5b50603c62615be255c729996e2",
          "linkedWithoutMetadata": "3e3c3900c94382a7d0718d779f8f045e0c14f5b50603c62615be255c729996e2"
        },
        "inherit": [
          "ITenartToken",
          "Ownable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,uint256)",
          "mint(address,uint256)",
          "SUPPLY_CAP()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartToken",
            "src": "contracts/Rewards/TenartToken.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_SUPPLY_CAP",
            "src": "contracts/Rewards/TenartToken.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TokenDistributor": {
        "src": "contracts/Rewards/TokenDistributor.sol:14",
        "version": {
          "withMetadata": "e47474a3e8b903c02b53be809234ac4f1e771a9df8d6187327ddb1a8fa985106",
          "withoutMetadata": "e47474a3e8b903c02b53be809234ac4f1e771a9df8d6187327ddb1a8fa985106",
          "linkedWithoutMetadata": "e47474a3e8b903c02b53be809234ac4f1e771a9df8d6187327ddb1a8fa985106"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256[],uint256[],uint256[],uint256)",
          "deposit(uint256)",
          "harvestAndCompound()",
          "updatePool()",
          "withdraw(uint256)",
          "withdrawAll()",
          "calculatePendingRewards(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenDistributor",
            "src": "contracts/Rewards/TokenDistributor.sol:95"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/TokenDistributor.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenSplitter",
            "src": "contracts/Rewards/TokenDistributor.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "NUMBER_PERIODS",
            "src": "contracts/Rewards/TokenDistributor.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "START_BLOCK",
            "src": "contracts/Rewards/TokenDistributor.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TokenDistributor",
              "label": "accTokenPerShare",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:43"
            },
            {
              "contract": "TokenDistributor",
              "label": "currentPhase",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:46"
            },
            {
              "contract": "TokenDistributor",
              "label": "endBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:49"
            },
            {
              "contract": "TokenDistributor",
              "label": "lastRewardBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:52"
            },
            {
              "contract": "TokenDistributor",
              "label": "rewardPerBlockForOthers",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:55"
            },
            {
              "contract": "TokenDistributor",
              "label": "rewardPerBlockForStaking",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:58"
            },
            {
              "contract": "TokenDistributor",
              "label": "totalAmountStaked",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:61"
            },
            {
              "contract": "TokenDistributor",
              "label": "stakingPeriod",
              "type": "t_mapping(t_uint256,t_struct(StakingPeriod)8296_storage)",
              "src": "contracts/Rewards/TokenDistributor.sol:63"
            },
            {
              "contract": "TokenDistributor",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)8301_storage)",
              "src": "contracts/Rewards/TokenDistributor.sol:65"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(StakingPeriod)8296_storage)": {
              "label": "mapping(uint256 => struct TokenDistributor.StakingPeriod)"
            },
            "t_struct(StakingPeriod)8296_storage": {
              "label": "struct TokenDistributor.StakingPeriod",
              "members": [
                {
                  "label": "rewardPerBlockForStaking",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardPerBlockForOthers",
                  "type": "t_uint256"
                },
                {
                  "label": "periodLengthInBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(UserInfo)8301_storage)": {
              "label": "mapping(address => struct TokenDistributor.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)8301_storage": {
              "label": "struct TokenDistributor.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TokenSplitter": {
        "src": "contracts/Rewards/TokenSplitter.sol:12",
        "version": {
          "withMetadata": "96e327208a7ca972de5da2516722c7891e020a86853f7c1ce4003fba6c34117b",
          "withoutMetadata": "60b25e061d13de2bb78b15c7807fdbd616ae4296044fa4bb67d9132dcb842c2c",
          "linkedWithoutMetadata": "60b25e061d13de2bb78b15c7807fdbd616ae4296044fa4bb67d9132dcb842c2c"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address[],uint256[],address)",
          "releaseTokens(address)",
          "updateSharesOwner(address,address)",
          "calculatePendingRewards(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenSplitter",
            "src": "contracts/Rewards/TokenSplitter.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TOTAL_SHARES",
            "src": "contracts/Rewards/TokenSplitter.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/TokenSplitter.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TokenSplitter",
              "label": "totalTokensDistributed",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenSplitter.sol:25"
            },
            {
              "contract": "TokenSplitter",
              "label": "accountInfo",
              "type": "t_mapping(t_address,t_struct(AccountInfo)9285_storage)",
              "src": "contracts/Rewards/TokenSplitter.sol:27"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(AccountInfo)9285_storage)": {
              "label": "mapping(address => struct TokenSplitter.AccountInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(AccountInfo)9285_storage": {
              "label": "struct TokenSplitter.AccountInfo",
              "members": [
                {
                  "label": "shares",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensDistributedToAccount",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TradingRewardsDistributor": {
        "src": "contracts/Rewards/TradingRewardsDistributor.sol:14",
        "version": {
          "withMetadata": "5a10783c334b7dd679676d2d3a249644788aedeb6e98e784b46eb9078067aa54",
          "withoutMetadata": "698b0ba28e7632a36e88e1f75e97ef463565473ab12d04471015a564e92d5b6a",
          "linkedWithoutMetadata": "698b0ba28e7632a36e88e1f75e97ef463565473ab12d04471015a564e92d5b6a"
        },
        "inherit": [
          "Ownable",
          "ReentrancyGuard",
          "Pausable",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "MerkleProof"
        ],
        "methods": [
          "(address)",
          "claim(uint256,bytes32[])",
          "updateTradingRewards(bytes32,uint256)",
          "pauseDistribution()",
          "unpauseDistribution()",
          "withdrawTokenRewards(uint256)",
          "canClaim(address,uint256,bytes32[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TradingRewardsDistributor",
            "src": "contracts/Rewards/TradingRewardsDistributor.sol:55"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/TradingRewardsDistributor.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TradingRewardsDistributor",
              "label": "currentRewardRound",
              "type": "t_uint256",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:22"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "lastPausedTimestamp",
              "type": "t_uint256",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:25"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "maximumAmountPerUserInCurrentTree",
              "type": "t_uint256",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:28"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "amountClaimedByUser",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:31"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "merkleRootOfRewardRound",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:34"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "merkleRootUsed",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:37"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "hasUserClaimedForRewardRound",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VestingContractWithFeeSharing": {
        "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:13",
        "version": {
          "withMetadata": "493381ea0d065b8aaa7f905a165972c5b3fa40621441f01e16b018f3796ed911",
          "withoutMetadata": "ec3e3c5c2692f688d05d4eecc9d19c2329acd089ff76664b38253ea5fe5bfeaf",
          "linkedWithoutMetadata": "ec3e3c5c2692f688d05d4eecc9d19c2329acd089ff76664b38253ea5fe5bfeaf"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(uint256,uint256,uint256,uint256,address)",
          "unlockLooksRareToken()",
          "withdrawOtherCurrency(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingContractWithFeeSharing",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "NUMBER_UNLOCK_PERIODS",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "STANDARD_AMOUNT_UNLOCKED_AT_EACH_UNLOCK",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "START_BLOCK",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "VESTING_BETWEEN_PERIODS_IN_BLOCKS",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingContractWithFeeSharing",
              "label": "maxAmountToWithdrawForNextPeriod",
              "type": "t_uint256",
              "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:31"
            },
            {
              "contract": "VestingContractWithFeeSharing",
              "label": "nextBlockForUnlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:34"
            },
            {
              "contract": "VestingContractWithFeeSharing",
              "label": "numberPastUnlocks",
              "type": "t_uint256",
              "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ITenartToken": {
        "src": "contracts/Rewards/interfaces/ITenartToken.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "SUPPLY_CAP()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TenartAddressRegistry": {
        "src": "contracts/TenartAddressRegistry.sol:8",
        "version": {
          "withMetadata": "48e529079b227b14fa42607eb7d59fa6280dfe8b0bdd730e7d50fe5cb43f1583",
          "withoutMetadata": "4fd7467afe82d21e7ac8aa7815babafe867eccbd42fabfb94fb53916acc4e7bf",
          "linkedWithoutMetadata": "4fd7467afe82d21e7ac8aa7815babafe867eccbd42fabfb94fb53916acc4e7bf"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateTenartNFT(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)",
          "updateRoyaltyRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartAddressRegistry",
              "label": "tenartNFT",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:12"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:15"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:18"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:21"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:24"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:27"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:30"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:33"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:36"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:39"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "royaltyRegistry",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartArtFactory": {
        "src": "contracts/TenartArtFactory.sol:8",
        "version": {
          "withMetadata": "143841b5c2bb77f54b1d0f43aeadb63f1b7ee1dd93cdce7af188850275b50893",
          "withoutMetadata": "f50354e24b5fac0ed2d83d4807450ba85a2bccda19fda2b11ac8c99a994eeab2",
          "linkedWithoutMetadata": "f50354e24b5fac0ed2d83d4807450ba85a2bccda19fda2b11ac8c99a994eeab2"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartArtFactory",
            "src": "contracts/TenartArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartArtFactory.sol:14"
            },
            {
              "contract": "TenartArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartArtFactory.sol:17"
            },
            {
              "contract": "TenartArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtFactory.sol:20"
            },
            {
              "contract": "TenartArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtFactory.sol:23"
            },
            {
              "contract": "TenartArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/TenartArtFactory.sol:26"
            },
            {
              "contract": "TenartArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TenartArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartArtFactoryPrivate": {
        "src": "contracts/TenartArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "62104fb8f516d5cc45a00018ce2f58bd4a00f1362c8424a15bbd60f097b23f57",
          "withoutMetadata": "ede3c7b60f0cd8ba1b79391454bfaa2b13d1f8cc694e5715a7d995e48773fa47",
          "linkedWithoutMetadata": "ede3c7b60f0cd8ba1b79391454bfaa2b13d1f8cc694e5715a7d995e48773fa47"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartArtFactoryPrivate",
            "src": "contracts/TenartArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartArtFactoryPrivate.sol:14"
            },
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartArtFactoryPrivate.sol:17"
            },
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtFactoryPrivate.sol:20"
            },
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtFactoryPrivate.sol:23"
            },
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/TenartArtFactoryPrivate.sol:26"
            },
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TenartArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts/TenartArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "7f95cdc38e89bae24160fd7a573a9e55ad073029b8a2970ae0053036c3cb2ee0",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts/TenartArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "721aa68583181a3ace999d9956398496f5b39d9eb230ed378c47a4412ec2c611",
          "withoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d",
          "linkedWithoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)11267)",
              "src": "contracts/TenartArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)11267)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)11267": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartArtTradable": {
        "src": "contracts/TenartArtTradable.sol:22",
        "version": {
          "withMetadata": "4e62409cc08323a755af6609dfd2de33fdd764b0b199fbb80fa205195ae7fd94",
          "withoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b",
          "linkedWithoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartArtTradable",
            "src": "contracts/TenartArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/TenartArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/TenartArtTradable.sol:28"
            },
            {
              "contract": "TenartArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/TenartArtTradable.sol:31"
            },
            {
              "contract": "TenartArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/TenartArtTradable.sol:33"
            },
            {
              "contract": "TenartArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TenartArtTradable.sol:34"
            },
            {
              "contract": "TenartArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/TenartArtTradable.sol:37"
            },
            {
              "contract": "TenartArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/TenartArtTradable.sol:39"
            },
            {
              "contract": "TenartArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtTradable.sol:41"
            },
            {
              "contract": "TenartArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartArtTradable.sol:43"
            },
            {
              "contract": "TenartArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartArtTradable.sol:45"
            },
            {
              "contract": "TenartArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartArtTradablePrivate": {
        "src": "contracts/TenartArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "323dcda7154000d48709b1a2d12ff3dbdee0f89ba5d42feaf1aff1bd55a831b1",
          "withoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9",
          "linkedWithoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartArtTradablePrivate",
            "src": "contracts/TenartArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/TenartArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/TenartArtTradablePrivate.sol:28"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/TenartArtTradablePrivate.sol:31"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/TenartArtTradablePrivate.sol:33"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TenartArtTradablePrivate.sol:34"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/TenartArtTradablePrivate.sol:37"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/TenartArtTradablePrivate.sol:39"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtTradablePrivate.sol:41"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartArtTradablePrivate.sol:43"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartArtTradablePrivate.sol:45"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ITenartAddressRegistry": {
        "src": "contracts/TenartPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartBundleMarketplace": {
        "src": "contracts/TenartMarketplace.sol:52",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartMarketplace": {
        "src": "contracts/TenartBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartRoyaltyRegistry": {
        "src": "contracts/TenartMarketplace.sol:74",
        "inherit": [],
        "libraries": [],
        "methods": [
          "royaltyInfo(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartTokenRegistry": {
        "src": "contracts/TenartPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TenartAuction": {
        "src": "contracts/TenartAuction.sol:53",
        "version": {
          "withMetadata": "db0475967ba15c1715e85b3d1fad219243c0f7656c227515915e70d300b80829",
          "withoutMetadata": "859d8697d145a46440e68a55c7647aa61c2d5ca28244c0c47636972a02c361b5",
          "linkedWithoutMetadata": "859d8697d145a46440e68a55c7647aa61c2d5ca28244c0c47636972a02c361b5"
        },
        "inherit": [
          "IERC721Receiver",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)",
          "onERC721Received(address,address,uint256,bytes)",
          "endAuction(address,uint256)",
          "cancelAuctionOwner(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)11781_storage))",
              "src": "contracts/TenartAuction.sol:152"
            },
            {
              "contract": "TenartAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)11788_storage))",
              "src": "contracts/TenartAuction.sol:155"
            },
            {
              "contract": "TenartAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts/TenartAuction.sol:158"
            },
            {
              "contract": "TenartAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts/TenartAuction.sol:161"
            },
            {
              "contract": "TenartAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartAuction.sol:164"
            },
            {
              "contract": "TenartAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts/TenartAuction.sol:167"
            },
            {
              "contract": "TenartAuction",
              "label": "addressRegistry",
              "type": "t_contract(ITenartAddressRegistry)11601",
              "src": "contracts/TenartAuction.sol:170"
            },
            {
              "contract": "TenartAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts/TenartAuction.sol:173"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)11781_storage))": {
              "label": "mapping(address => mapping(uint256 => struct TenartAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)11781_storage)": {
              "label": "mapping(uint256 => struct TenartAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)11781_storage": {
              "label": "struct TenartAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)11788_storage))": {
              "label": "mapping(address => mapping(uint256 => struct TenartAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)11788_storage)": {
              "label": "mapping(uint256 => struct TenartAuction.HighestBid)"
            },
            "t_struct(HighestBid)11788_storage": {
              "label": "struct TenartAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(ITenartAddressRegistry)11601": {
              "label": "contract ITenartAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartBundleMarketplace": {
        "src": "contracts/TenartBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "8a42d96aea082a8156f5faa16d1f70fe32662702b3a9c1a903eb0c5f0c776c56",
          "withoutMetadata": "0358ccbe762a0ef4d331cd1cca908db1b4af94c4f7baa88fc1e9ec58a89a9efc",
          "linkedWithoutMetadata": "0358ccbe762a0ef4d331cd1cca908db1b4af94c4f7baa88fc1e9ec58a89a9efc"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20Upgradeable",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)13898_storage))",
              "src": "contracts/TenartBundleMarketplace.sol:106"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/TenartBundleMarketplace.sol:109"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)5167_storage))",
              "src": "contracts/TenartBundleMarketplace.sol:111"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts/TenartBundleMarketplace.sol:113"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts/TenartBundleMarketplace.sol:115"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)13905_storage))",
              "src": "contracts/TenartBundleMarketplace.sol:118"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartBundleMarketplace.sol:121"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartBundleMarketplace.sol:124"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(ITenartAddressRegistry)13761",
              "src": "contracts/TenartBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)13898_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct TenartBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)13898_storage)": {
              "label": "mapping(bytes32 => struct TenartBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)13898_storage": {
              "label": "struct TenartBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)5167_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)5167_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)5167_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4987_storage"
                }
              ]
            },
            "t_struct(Set)4987_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)13905_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct TenartBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)13905_storage)": {
              "label": "mapping(address => struct TenartBundleMarketplace.Offer)"
            },
            "t_struct(Offer)13905_storage": {
              "label": "struct TenartBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20Upgradeable)825"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)825": {
              "label": "contract IERC20Upgradeable"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(ITenartAddressRegistry)13761": {
              "label": "contract ITenartAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ITenartAuction": {
        "src": "contracts/TenartMarketplace.sol:38",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartNFTFactory": {
        "src": "contracts/TenartMarketplace.sol:60",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartPriceFeed": {
        "src": "contracts/TenartMarketplace.sol:68",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wETH()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TenartMarketplace": {
        "src": "contracts/TenartMarketplace.sol:82",
        "version": {
          "withMetadata": "610fff48fd490baae2088bf7c7eb43bf0c3133beb6c154bf434579489a9f1d62",
          "withoutMetadata": "d07a87683eb482fea8352d3b8269a6cd80da67254af9054079db6e07f6b43328",
          "linkedWithoutMetadata": "d07a87683eb482fea8352d3b8269a6cd80da67254af9054079db6e07f6b43328"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "createCounterOffer(address,uint256,(address,uint256,uint256,uint256),address)",
          "cancelOffer(address,uint256)",
          "refuseOffer(address,uint256,address,uint256)",
          "cancelCounterOffer(address,uint256,uint256,address)",
          "refuseCounterOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "acceptCounterOffer(address,uint256)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts/TenartMarketplace.sol:186"
            },
            {
              "contract": "TenartMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts/TenartMarketplace.sol:189"
            },
            {
              "contract": "TenartMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)16095_storage)))",
              "src": "contracts/TenartMarketplace.sol:192"
            },
            {
              "contract": "TenartMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)16104_storage)))",
              "src": "contracts/TenartMarketplace.sol:196"
            },
            {
              "contract": "TenartMarketplace",
              "label": "counterOffers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)16104_storage)))",
              "src": "contracts/TenartMarketplace.sol:200"
            },
            {
              "contract": "TenartMarketplace",
              "label": "ownerOfERC1155",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts/TenartMarketplace.sol:204"
            },
            {
              "contract": "TenartMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts/TenartMarketplace.sol:207"
            },
            {
              "contract": "TenartMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartMarketplace.sol:210"
            },
            {
              "contract": "TenartMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)16111_storage)",
              "src": "contracts/TenartMarketplace.sol:213"
            },
            {
              "contract": "TenartMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(ITenartAddressRegistry)15871",
              "src": "contracts/TenartMarketplace.sol:216"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)16095_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct TenartMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)16095_storage))": {
              "label": "mapping(uint256 => mapping(address => struct TenartMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)16095_storage)": {
              "label": "mapping(address => struct TenartMarketplace.Listing)"
            },
            "t_struct(Listing)16095_storage": {
              "label": "struct TenartMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)16104_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct TenartMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)16104_storage))": {
              "label": "mapping(uint256 => mapping(address => struct TenartMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)16104_storage)": {
              "label": "mapping(address => struct TenartMarketplace.Offer)"
            },
            "t_struct(Offer)16104_storage": {
              "label": "struct TenartMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20Upgradeable)825"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)825": {
              "label": "contract IERC20Upgradeable"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)16111_storage)": {
              "label": "mapping(address => struct TenartMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)16111_storage": {
              "label": "struct TenartMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(ITenartAddressRegistry)15871": {
              "label": "contract ITenartAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartNFT": {
        "src": "contracts/TenartNFT.sol:10",
        "version": {
          "withMetadata": "56d959a19d50f2c0b5872cfc50931f710e74a7440c923cfd7f83385f5b9db403",
          "withoutMetadata": "d9b68257ac7bcf7939a0961d1647c80f6e259ab7a771f161d63f786d441c37b2",
          "linkedWithoutMetadata": "d9b68257ac7bcf7939a0961d1647c80f6e259ab7a771f161d63f786d441c37b2"
        },
        "inherit": [
          "Ownable",
          "ERC2981PerTokenRoyalties",
          "ERC2981",
          "IERC2981RoyaltySetter",
          "IERC2981Royalties",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string,address,uint256)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartNFT",
            "src": "contracts/TenartNFT.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartNFT",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts/TenartNFT.sol:26"
            },
            {
              "contract": "TenartNFT",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/TenartNFT.sol:29"
            },
            {
              "contract": "TenartNFT",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFT.sol:32"
            },
            {
              "contract": "TenartNFT",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartNFT.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartNFTFactory": {
        "src": "contracts/TenartNFTFactory.sol:8",
        "version": {
          "withMetadata": "9a6b6e5de9ad1f917da82c137dcb59c91410021aacbb14a9de61ff2ea09fd90d",
          "withoutMetadata": "618becf40f53857cfd255af61fb3d44a215ff2f2fc8ef75a471e0c25f2e66c6e",
          "linkedWithoutMetadata": "618becf40f53857cfd255af61fb3d44a215ff2f2fc8ef75a471e0c25f2e66c6e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartNFTFactory",
            "src": "contracts/TenartNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/TenartNFTFactory.sol:14"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTFactory.sol:17"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTFactory.sol:20"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTFactory.sol:23"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTFactory.sol:26"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/TenartNFTFactory.sol:29"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TenartNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartNFTFactoryPrivate": {
        "src": "contracts/TenartNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "f86bd27ec9f2b42b7cc9787ad7e4e2a7986de00e3058ad3e2b2eb3826c34130c",
          "withoutMetadata": "2df81774e2e26fae4e020a3237af815e340278ab48ae3b3cdd3181966f3f45ff",
          "linkedWithoutMetadata": "2df81774e2e26fae4e020a3237af815e340278ab48ae3b3cdd3181966f3f45ff"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartNFTFactoryPrivate",
            "src": "contracts/TenartNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/TenartNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/TenartNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TenartNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartNFTTradable": {
        "src": "contracts/TenartNFTTradable.sol:12",
        "version": {
          "withMetadata": "619354b452fb248337ad26ac2962de06671fdd92ef1068e05087bd4d006205bd",
          "withoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b",
          "linkedWithoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartNFTTradable",
            "src": "contracts/TenartNFTTradable.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/TenartNFTTradable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/TenartNFTTradable.sol:23"
            },
            {
              "contract": "TenartNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTTradable.sol:24"
            },
            {
              "contract": "TenartNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTTradable.sol:25"
            },
            {
              "contract": "TenartNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/TenartNFTTradable.sol:26"
            },
            {
              "contract": "TenartNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTTradable.sol:29"
            },
            {
              "contract": "TenartNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartNFTTradable.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartNFTTradablePrivate": {
        "src": "contracts/TenartNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "c4a8eaa76caa48c0a52a4f45c6d2161e7a30cf28fc3f7898a445945051c09c9f",
          "withoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9",
          "linkedWithoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartNFTTradablePrivate",
            "src": "contracts/TenartNFTTradablePrivate.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/TenartNFTTradablePrivate.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/TenartNFTTradablePrivate.sol:23"
            },
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTTradablePrivate.sol:24"
            },
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTTradablePrivate.sol:25"
            },
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/TenartNFTTradablePrivate.sol:26"
            },
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTTradablePrivate.sol:29"
            },
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartNFTTradablePrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts/TenartPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TenartPriceFeed": {
        "src": "contracts/TenartPriceFeed.sol:21",
        "version": {
          "withMetadata": "b4f919e6fc1c65112c2b30eda0a752d13b677af1e963479e3da1911773788936",
          "withoutMetadata": "abca15542052f5c81283a59fa5becdd88e4e88dbca66036af74057ef29025e8c",
          "linkedWithoutMetadata": "abca15542052f5c81283a59fa5becdd88e4e88dbca66036af74057ef29025e8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartPriceFeed",
            "src": "contracts/TenartPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/TenartPriceFeed.sol:23"
            },
            {
              "contract": "TenartPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts/TenartPriceFeed.sol:26"
            },
            {
              "contract": "TenartPriceFeed",
              "label": "wETH",
              "type": "t_address",
              "src": "contracts/TenartPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartRoyaltyRegistry": {
        "src": "contracts/TenartRoyaltyRegistry.sol:11",
        "version": {
          "withMetadata": "dcb620d326baf314ff3b77896241688e1421c82143afcd54b9a987b5897cc692",
          "withoutMetadata": "9dcf985a0b077c6d7450ffac80e18e5b44aa38ac368ad4347b5c1a868a86b3e5",
          "linkedWithoutMetadata": "9dcf985a0b077c6d7450ffac80e18e5b44aa38ac368ad4347b5c1a868a86b3e5"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "setDefaultRoyalty(address,address,uint16)",
          "setRoyalty(address,uint256,address,uint16)",
          "royaltyInfo(address,uint256,uint256)",
          "updateMigrationManager(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartRoyaltyRegistry",
              "label": "royaltyMigrationManager",
              "type": "t_address",
              "src": "contracts/TenartRoyaltyRegistry.sol:12"
            },
            {
              "contract": "TenartRoyaltyRegistry",
              "label": "_royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)20226_storage))",
              "src": "contracts/TenartRoyaltyRegistry.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)20226_storage))": {
              "label": "mapping(address => mapping(uint256 => struct TenartRoyaltyRegistry.RoyaltyInfo))"
            },
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)20226_storage)": {
              "label": "mapping(uint256 => struct TenartRoyaltyRegistry.RoyaltyInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(RoyaltyInfo)20226_storage": {
              "label": "struct TenartRoyaltyRegistry.RoyaltyInfo",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "royaltyPercent",
                  "type": "t_uint16"
                }
              ]
            },
            "t_uint16": {
              "label": "uint16"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartTokenRegistry": {
        "src": "contracts/TenartTokenRegistry.sol:7",
        "version": {
          "withMetadata": "84a4a9154a3c4231dfa778efc9c45eeed8114ae38fda5c0fe7f63f47a2fc9bdc",
          "withoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86",
          "linkedWithoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TenartTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts/Upgrades/ProxyAdmin.sol:12",
        "version": {
          "withMetadata": "1954982f6a72b966f742746d1595f28fc3bd58519d941cf5ee396174b30e0adb",
          "withoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72",
          "linkedWithoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "contracts/Upgrades/TransparentUpgradeableProxy.sol:28",
        "version": {
          "withMetadata": "e2c7b2b9cab3651e98e65ccbcfa48e3c6a1d2be60b2b3ae650ebd6578f87b2dc",
          "withoutMetadata": "e2c7b2b9cab3651e98e65ccbcfa48e3c6a1d2be60b2b3ae650ebd6578f87b2dc",
          "linkedWithoutMetadata": "e2c7b2b9cab3651e98e65ccbcfa48e3c6a1d2be60b2b3ae650ebd6578f87b2dc"
        },
        "inherit": [
          "UpgradeableProxy",
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "contracts/Upgrades/TransparentUpgradeableProxy.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeableProxy": {
        "src": "contracts/Upgrades/UpgradeableProxy.sol:17",
        "version": {
          "withMetadata": "a3d5dc7b576d487bacf1eca88509c9a9aa5c42515e53d325ceaabf217b1b5b35",
          "withoutMetadata": "a3d5dc7b576d487bacf1eca88509c9a9aa5c42515e53d325ceaabf217b1b5b35",
          "linkedWithoutMetadata": "a3d5dc7b576d487bacf1eca88509c9a9aa5c42515e53d325ceaabf217b1b5b35"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableProxy",
            "src": "contracts/Upgrades/UpgradeableProxy.sol:24"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts/library/ERC1155.sol:12",
        "version": {
          "withMetadata": "4f7758aaf073d8af6ccf5183c389c2ba027b6318cc8a4327960c62c6a224cf32",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/library/ERC1155.sol:26"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/library/ERC1155.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts/library/ERC1155Metadata.sol:10",
        "version": {
          "withMetadata": "22f0def7dd847734397d8ab2c9784174764a320bb281b7979b2f41f91fa3c1b8",
          "withoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021",
          "linkedWithoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts/library/ERC1155Metadata.sol:13"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts/library/ERC1155MintBurn.sol:10",
        "version": {
          "withMetadata": "aac939b704517d1f2525b44a9d409c32b3a5006b70cb84f471fce96b07236e5a",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC2981": {
        "src": "contracts/library/ERC2981.sol:10",
        "inherit": [
          "IERC2981RoyaltySetter",
          "IERC2981Royalties",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC2981Base": {
        "src": "contracts/library/ERC2981Base.sol:9",
        "inherit": [
          "IERC2981Royalties",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC2981Base",
              "label": "_royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)22127_storage))",
              "src": "contracts/library/ERC2981Base.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)22127_storage))": {
              "label": "mapping(address => mapping(uint256 => struct ERC2981Base.RoyaltyInfo))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)22127_storage)": {
              "label": "mapping(uint256 => struct ERC2981Base.RoyaltyInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(RoyaltyInfo)22127_storage": {
              "label": "struct ERC2981Base.RoyaltyInfo",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "royaltyPercent",
                  "type": "t_uint16"
                }
              ]
            },
            "t_uint16": {
              "label": "uint16"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC2981PerTokenRoyalties": {
        "src": "contracts/library/ERC2981PerTokenRoyalties.sol:7",
        "inherit": [
          "ERC2981",
          "IERC2981RoyaltySetter",
          "IERC2981Royalties",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "setDefaultRoyalty(address,uint16)",
          "setTokenRoyalty(uint256,address,uint16)",
          "royaltyInfo(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC2981PerTokenRoyalties",
              "label": "_royalties",
              "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)22081_storage)",
              "src": "contracts/library/ERC2981PerTokenRoyalties.sol:8"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)22081_storage)": {
              "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(RoyaltyInfo)22081_storage": {
              "label": "struct ERC2981.RoyaltyInfo",
              "members": [
                {
                  "label": "recipient",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint24"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_uint24": {
              "label": "uint24"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts/library/IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC2981Royalties": {
        "src": "contracts/library/IERC2981Royalties.sol:7",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "royaltyInfo(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC2981RoyaltySetter": {
        "src": "contracts/library/IERC2981RoyaltySetter.sol:7",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "setDefaultRoyalty(address,uint16)",
          "setTokenRoyalty(uint256,address,uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts/mock/BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "d0b282f3a3ff01a0d79f6efbb7abc447e3155393ca143b6392b02d6d1b46230e",
          "withoutMetadata": "f16feedc84b2c164217f0a3c0c7c7ef7e7ec09984915c9f9601de051c36efdcb",
          "linkedWithoutMetadata": "f16feedc84b2c164217f0a3c0c7c7ef7e7ec09984915c9f9601de051c36efdcb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts/mock/BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(TenartAuction)13733",
              "src": "contracts/mock/BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(TenartAuction)13733": {
              "label": "contract TenartAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:7",
        "version": {
          "withMetadata": "f6bf27ebe525638474b4b3d6c79ce37fa1a36fade0b92465b899194e8b783f9a",
          "withoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957",
          "linkedWithoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockTenartAuction": {
        "src": "contracts/mock/MockTenartAuction.sol:7",
        "version": {
          "withMetadata": "0e9eb1ece2ec6417a8fa011b918140b3acb9e37aa7b4df7ae7136ff77ea19e86",
          "withoutMetadata": "3d7092d85b1db98ef1fc03e9e0f6dff6f1e3e58df4673ef162926046d28dc747",
          "linkedWithoutMetadata": "3d7092d85b1db98ef1fc03e9e0f6dff6f1e3e58df4673ef162926046d28dc747"
        },
        "inherit": [
          "TenartAuction",
          "IERC721Receiver",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTime(uint256)",
          "increaseTime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MockTenartAuction",
              "label": "time",
              "type": "t_uint256",
              "src": "contracts/mock/MockTenartAuction.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartAuctionMock": {
        "src": "contracts/mock/TenartAuctionMock.sol:7",
        "version": {
          "withMetadata": "0659d2ba8da3ddfe4dab9b0e8a28563b3f19bd841af301ae62316b517d6430b5",
          "withoutMetadata": "1afd5b3a1e36cd1f39685070f9ccf070e947c8374118782cfd04d8d8d64357fd",
          "linkedWithoutMetadata": "1afd5b3a1e36cd1f39685070f9ccf070e947c8374118782cfd04d8d8d64357fd"
        },
        "inherit": [
          "TenartAuction",
          "IERC721Receiver",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts/mock/TenartAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MerkleProof": {
        "src": "@openzeppelin/contracts/cryptography/MerkleProof.sol:8",
        "version": {
          "withMetadata": "e4c1a7894a06b1c2edf4951f92346a8c87ca32adf7ffd354954ba1e9195a9b23",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/introspection/ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin/contracts/introspection/ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin/contracts/introspection/ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts/library/IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:21",
        "version": {
          "withMetadata": "6159e5b8b162df16ddf823478e6d2f5f1c6289fe3985e922be50f8f8ba411d0b",
          "withoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033",
          "linkedWithoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)5321_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4698_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)5321_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)5321_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4935_storage"
                }
              ]
            },
            "t_struct(Set)4935_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4698_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)4380_storage"
                }
              ]
            },
            "t_struct(Map)4380_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)4372_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)4372_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)4372_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin/contracts/utils/EnumerableMap.sol:29",
        "version": {
          "withMetadata": "33db0abc4b4d1da32aed25dc771cc00a3efa31fff5d6d984c64d230b001e4165",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "4f51efe115648bafc40e8dcb6d91da10d2c3805f4d3f7a23f58ceb3aa49f6aac",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/utils/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "74ef6d7234587add3006addc68209e5df580602fb30a593c7df5114b91053bef",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FeeSharingSystem": {
        "src": "contracts/Rewards/FeeSharingSystem.sol:15",
        "version": {
          "withMetadata": "6f98a16411c3ddc0dc75c3def21477ca402d2d759c70784562748a75cc9f88f4",
          "withoutMetadata": "d2bf2f0822644f946d1064a40c2b8ce39c850f7179d08ceca9f8064581339b58",
          "linkedWithoutMetadata": "d2bf2f0822644f946d1064a40c2b8ce39c850f7179d08ceca9f8064581339b58"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ReentrancyGuard"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "deposit(uint256,bool)",
          "harvest()",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "updateRewards(uint256,uint256)",
          "calculatePendingRewards(address)",
          "calculateSharesValueInTART(address)",
          "calculateSharePriceInTART()",
          "lastRewardBlock()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeSharingSystem",
            "src": "contracts/Rewards/FeeSharingSystem.sol:76"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/FeeSharingSystem.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/Rewards/FeeSharingSystem.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenDistributor",
            "src": "contracts/Rewards/FeeSharingSystem.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeSharingSystem",
              "label": "currentRewardPerBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:34"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "lastRewardAdjustment",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:37"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "lastUpdateBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:40"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "periodEndBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:43"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:46"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "totalShares",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:49"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)5661_storage)",
              "src": "contracts/Rewards/FeeSharingSystem.sol:51"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)5661_storage)": {
              "label": "mapping(address => struct FeeSharingSystem.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)5661_storage": {
              "label": "struct FeeSharingSystem.UserInfo",
              "members": [
                {
                  "label": "shares",
                  "type": "t_uint256"
                },
                {
                  "label": "userRewardPerTokenPaid",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PrivateSaleWithFeeSharing": {
        "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:15",
        "version": {
          "withMetadata": "b9591ffd8a9a7aab8561fa6af883af7639a80b29f84ea598b685128dbf504d81",
          "withoutMetadata": "b9591ffd8a9a7aab8561fa6af883af7639a80b29f84ea598b685128dbf504d81",
          "linkedWithoutMetadata": "b9591ffd8a9a7aab8561fa6af883af7639a80b29f84ea598b685128dbf504d81"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256)",
          "deposit()",
          "harvest()",
          "withdraw()",
          "updateSalePhaseToWithdraw()",
          "removeUserFromWhitelist(address)",
          "setAllocationCostPerTier(uint8,uint256)",
          "setBlockForWithdrawal(uint256)",
          "setPriceOfETHInTART(uint256)",
          "updateSalePhase(uint8)",
          "withdrawCommittedAmount()",
          "whitelistUsers(address[],uint8)",
          "calculatePendingRewards(address)",
          "getMaxAmountTARTToDistribute()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PrivateSaleWithFeeSharing",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:87"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "MAX_BLOCK_FOR_WITHDRAWAL",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TOTAL_TART_DISTRIBUTED",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "currentPhase",
              "type": "t_enum(SalePhase)6447",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:47"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "blockForWithdrawal",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:50"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "priceOfETHInTART",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:53"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "totalAmountCommitted",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:56"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "totalRewardTokensDistributedToStakers",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:59"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "allocationCostPerTier",
              "type": "t_mapping(t_uint8,t_uint256)",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:62"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "numberOfParticipantsForATier",
              "type": "t_mapping(t_uint8,t_uint256)",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:65"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)6456_storage)",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:68"
            }
          ],
          "types": {
            "t_enum(SalePhase)6447": {
              "label": "enum PrivateSaleWithFeeSharing.SalePhase",
              "members": [
                "Pending",
                "Deposit",
                "Over",
                "Staking",
                "Withdraw"
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_struct(UserInfo)6456_storage)": {
              "label": "mapping(address => struct PrivateSaleWithFeeSharing.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)6456_storage": {
              "label": "struct PrivateSaleWithFeeSharing.UserInfo",
              "members": [
                {
                  "label": "rewardsDistributedToAccount",
                  "type": "t_uint256"
                },
                {
                  "label": "tier",
                  "type": "t_uint8"
                },
                {
                  "label": "hasDeposited",
                  "type": "t_bool"
                },
                {
                  "label": "hasWithdrawn",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StakingPoolForUniswapV2Tokens": {
        "src": "contracts/Rewards/TenartStaking.sol:16",
        "version": {
          "withMetadata": "3b1f83f1cb7ce56bb286b5595143291b4bcd8b31c584e500fedd13c9a50c9894",
          "withoutMetadata": "21a58aac2d8a5fbe04019ccba9220d57a41329a064c266f24f6f94ac97547e28",
          "linkedWithoutMetadata": "21a58aac2d8a5fbe04019ccba9220d57a41329a064c266f24f6f94ac97547e28"
        },
        "inherit": [
          "ReentrancyGuard",
          "Pausable",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "deposit(uint256)",
          "harvest()",
          "emergencyWithdraw()",
          "withdraw(uint256)",
          "adminRewardWithdraw(uint256)",
          "pause()",
          "unpause()",
          "updateRewardPerBlockAndEndBlock(uint256,uint256)",
          "calculatePendingRewards(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StakingPoolForUniswapV2Tokens",
            "src": "contracts/Rewards/TenartStaking.sol:77"
          },
          {
            "kind": "state-variable-immutable",
            "name": "looksRareToken",
            "src": "contracts/Rewards/TenartStaking.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "stakedToken",
            "src": "contracts/Rewards/TenartStaking.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "START_BLOCK",
            "src": "contracts/Rewards/TenartStaking.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "accTokenPerShare",
              "type": "t_uint256",
              "src": "contracts/Rewards/TenartStaking.sol:37"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "endBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TenartStaking.sol:40"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "lastRewardBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TenartStaking.sol:43"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "rewardPerBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TenartStaking.sol:46"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)7406_storage)",
              "src": "contracts/Rewards/TenartStaking.sol:49"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)7406_storage)": {
              "label": "mapping(address => struct StakingPoolForUniswapV2Tokens.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)7406_storage": {
              "label": "struct StakingPoolForUniswapV2Tokens.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartToken": {
        "src": "contracts/Rewards/TenartToken.sol:13",
        "version": {
          "withMetadata": "3e3c3900c94382a7d0718d779f8f045e0c14f5b50603c62615be255c729996e2",
          "withoutMetadata": "3e3c3900c94382a7d0718d779f8f045e0c14f5b50603c62615be255c729996e2",
          "linkedWithoutMetadata": "3e3c3900c94382a7d0718d779f8f045e0c14f5b50603c62615be255c729996e2"
        },
        "inherit": [
          "ITenartToken",
          "Ownable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,uint256)",
          "mint(address,uint256)",
          "SUPPLY_CAP()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartToken",
            "src": "contracts/Rewards/TenartToken.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_SUPPLY_CAP",
            "src": "contracts/Rewards/TenartToken.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TokenDistributor": {
        "src": "contracts/Rewards/TokenDistributor.sol:14",
        "version": {
          "withMetadata": "e47474a3e8b903c02b53be809234ac4f1e771a9df8d6187327ddb1a8fa985106",
          "withoutMetadata": "e47474a3e8b903c02b53be809234ac4f1e771a9df8d6187327ddb1a8fa985106",
          "linkedWithoutMetadata": "e47474a3e8b903c02b53be809234ac4f1e771a9df8d6187327ddb1a8fa985106"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256[],uint256[],uint256[],uint256)",
          "deposit(uint256)",
          "harvestAndCompound()",
          "updatePool()",
          "withdraw(uint256)",
          "withdrawAll()",
          "calculatePendingRewards(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenDistributor",
            "src": "contracts/Rewards/TokenDistributor.sol:95"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/TokenDistributor.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenSplitter",
            "src": "contracts/Rewards/TokenDistributor.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "NUMBER_PERIODS",
            "src": "contracts/Rewards/TokenDistributor.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "START_BLOCK",
            "src": "contracts/Rewards/TokenDistributor.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TokenDistributor",
              "label": "accTokenPerShare",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:43"
            },
            {
              "contract": "TokenDistributor",
              "label": "currentPhase",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:46"
            },
            {
              "contract": "TokenDistributor",
              "label": "endBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:49"
            },
            {
              "contract": "TokenDistributor",
              "label": "lastRewardBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:52"
            },
            {
              "contract": "TokenDistributor",
              "label": "rewardPerBlockForOthers",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:55"
            },
            {
              "contract": "TokenDistributor",
              "label": "rewardPerBlockForStaking",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:58"
            },
            {
              "contract": "TokenDistributor",
              "label": "totalAmountStaked",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:61"
            },
            {
              "contract": "TokenDistributor",
              "label": "stakingPeriod",
              "type": "t_mapping(t_uint256,t_struct(StakingPeriod)8244_storage)",
              "src": "contracts/Rewards/TokenDistributor.sol:63"
            },
            {
              "contract": "TokenDistributor",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)8249_storage)",
              "src": "contracts/Rewards/TokenDistributor.sol:65"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(StakingPeriod)8244_storage)": {
              "label": "mapping(uint256 => struct TokenDistributor.StakingPeriod)"
            },
            "t_struct(StakingPeriod)8244_storage": {
              "label": "struct TokenDistributor.StakingPeriod",
              "members": [
                {
                  "label": "rewardPerBlockForStaking",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardPerBlockForOthers",
                  "type": "t_uint256"
                },
                {
                  "label": "periodLengthInBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(UserInfo)8249_storage)": {
              "label": "mapping(address => struct TokenDistributor.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)8249_storage": {
              "label": "struct TokenDistributor.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TokenSplitter": {
        "src": "contracts/Rewards/TokenSplitter.sol:12",
        "version": {
          "withMetadata": "96e327208a7ca972de5da2516722c7891e020a86853f7c1ce4003fba6c34117b",
          "withoutMetadata": "60b25e061d13de2bb78b15c7807fdbd616ae4296044fa4bb67d9132dcb842c2c",
          "linkedWithoutMetadata": "60b25e061d13de2bb78b15c7807fdbd616ae4296044fa4bb67d9132dcb842c2c"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address[],uint256[],address)",
          "releaseTokens(address)",
          "updateSharesOwner(address,address)",
          "calculatePendingRewards(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenSplitter",
            "src": "contracts/Rewards/TokenSplitter.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TOTAL_SHARES",
            "src": "contracts/Rewards/TokenSplitter.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/TokenSplitter.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TokenSplitter",
              "label": "totalTokensDistributed",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenSplitter.sol:25"
            },
            {
              "contract": "TokenSplitter",
              "label": "accountInfo",
              "type": "t_mapping(t_address,t_struct(AccountInfo)9233_storage)",
              "src": "contracts/Rewards/TokenSplitter.sol:27"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(AccountInfo)9233_storage)": {
              "label": "mapping(address => struct TokenSplitter.AccountInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(AccountInfo)9233_storage": {
              "label": "struct TokenSplitter.AccountInfo",
              "members": [
                {
                  "label": "shares",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensDistributedToAccount",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TradingRewardsDistributor": {
        "src": "contracts/Rewards/TradingRewardsDistributor.sol:14",
        "version": {
          "withMetadata": "5a10783c334b7dd679676d2d3a249644788aedeb6e98e784b46eb9078067aa54",
          "withoutMetadata": "698b0ba28e7632a36e88e1f75e97ef463565473ab12d04471015a564e92d5b6a",
          "linkedWithoutMetadata": "698b0ba28e7632a36e88e1f75e97ef463565473ab12d04471015a564e92d5b6a"
        },
        "inherit": [
          "Ownable",
          "ReentrancyGuard",
          "Pausable",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "MerkleProof"
        ],
        "methods": [
          "(address)",
          "claim(uint256,bytes32[])",
          "updateTradingRewards(bytes32,uint256)",
          "pauseDistribution()",
          "unpauseDistribution()",
          "withdrawTokenRewards(uint256)",
          "canClaim(address,uint256,bytes32[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TradingRewardsDistributor",
            "src": "contracts/Rewards/TradingRewardsDistributor.sol:55"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/TradingRewardsDistributor.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TradingRewardsDistributor",
              "label": "currentRewardRound",
              "type": "t_uint256",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:22"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "lastPausedTimestamp",
              "type": "t_uint256",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:25"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "maximumAmountPerUserInCurrentTree",
              "type": "t_uint256",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:28"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "amountClaimedByUser",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:31"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "merkleRootOfRewardRound",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:34"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "merkleRootUsed",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:37"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "hasUserClaimedForRewardRound",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VestingContractWithFeeSharing": {
        "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:13",
        "version": {
          "withMetadata": "493381ea0d065b8aaa7f905a165972c5b3fa40621441f01e16b018f3796ed911",
          "withoutMetadata": "ec3e3c5c2692f688d05d4eecc9d19c2329acd089ff76664b38253ea5fe5bfeaf",
          "linkedWithoutMetadata": "ec3e3c5c2692f688d05d4eecc9d19c2329acd089ff76664b38253ea5fe5bfeaf"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(uint256,uint256,uint256,uint256,address)",
          "unlockLooksRareToken()",
          "withdrawOtherCurrency(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingContractWithFeeSharing",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "NUMBER_UNLOCK_PERIODS",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "STANDARD_AMOUNT_UNLOCKED_AT_EACH_UNLOCK",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "START_BLOCK",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "VESTING_BETWEEN_PERIODS_IN_BLOCKS",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingContractWithFeeSharing",
              "label": "maxAmountToWithdrawForNextPeriod",
              "type": "t_uint256",
              "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:31"
            },
            {
              "contract": "VestingContractWithFeeSharing",
              "label": "nextBlockForUnlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:34"
            },
            {
              "contract": "VestingContractWithFeeSharing",
              "label": "numberPastUnlocks",
              "type": "t_uint256",
              "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ITenartToken": {
        "src": "contracts/Rewards/interfaces/ITenartToken.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "SUPPLY_CAP()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TenartAddressRegistry": {
        "src": "contracts/TenartAddressRegistry.sol:8",
        "version": {
          "withMetadata": "48e529079b227b14fa42607eb7d59fa6280dfe8b0bdd730e7d50fe5cb43f1583",
          "withoutMetadata": "4fd7467afe82d21e7ac8aa7815babafe867eccbd42fabfb94fb53916acc4e7bf",
          "linkedWithoutMetadata": "4fd7467afe82d21e7ac8aa7815babafe867eccbd42fabfb94fb53916acc4e7bf"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateTenartNFT(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)",
          "updateRoyaltyRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartAddressRegistry",
              "label": "tenartNFT",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:12"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:15"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:18"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:21"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:24"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:27"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:30"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:33"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:36"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:39"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "royaltyRegistry",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartArtFactory": {
        "src": "contracts/TenartArtFactory.sol:8",
        "version": {
          "withMetadata": "143841b5c2bb77f54b1d0f43aeadb63f1b7ee1dd93cdce7af188850275b50893",
          "withoutMetadata": "f50354e24b5fac0ed2d83d4807450ba85a2bccda19fda2b11ac8c99a994eeab2",
          "linkedWithoutMetadata": "f50354e24b5fac0ed2d83d4807450ba85a2bccda19fda2b11ac8c99a994eeab2"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartArtFactory",
            "src": "contracts/TenartArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartArtFactory.sol:14"
            },
            {
              "contract": "TenartArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartArtFactory.sol:17"
            },
            {
              "contract": "TenartArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtFactory.sol:20"
            },
            {
              "contract": "TenartArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtFactory.sol:23"
            },
            {
              "contract": "TenartArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/TenartArtFactory.sol:26"
            },
            {
              "contract": "TenartArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TenartArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartArtFactoryPrivate": {
        "src": "contracts/TenartArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "62104fb8f516d5cc45a00018ce2f58bd4a00f1362c8424a15bbd60f097b23f57",
          "withoutMetadata": "ede3c7b60f0cd8ba1b79391454bfaa2b13d1f8cc694e5715a7d995e48773fa47",
          "linkedWithoutMetadata": "ede3c7b60f0cd8ba1b79391454bfaa2b13d1f8cc694e5715a7d995e48773fa47"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartArtFactoryPrivate",
            "src": "contracts/TenartArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartArtFactoryPrivate.sol:14"
            },
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartArtFactoryPrivate.sol:17"
            },
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtFactoryPrivate.sol:20"
            },
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtFactoryPrivate.sol:23"
            },
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/TenartArtFactoryPrivate.sol:26"
            },
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TenartArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts/TenartArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "7f95cdc38e89bae24160fd7a573a9e55ad073029b8a2970ae0053036c3cb2ee0",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts/TenartArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "721aa68583181a3ace999d9956398496f5b39d9eb230ed378c47a4412ec2c611",
          "withoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d",
          "linkedWithoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)11215)",
              "src": "contracts/TenartArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)11215)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)11215": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartArtTradable": {
        "src": "contracts/TenartArtTradable.sol:22",
        "version": {
          "withMetadata": "4e62409cc08323a755af6609dfd2de33fdd764b0b199fbb80fa205195ae7fd94",
          "withoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b",
          "linkedWithoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartArtTradable",
            "src": "contracts/TenartArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/TenartArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/TenartArtTradable.sol:28"
            },
            {
              "contract": "TenartArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/TenartArtTradable.sol:31"
            },
            {
              "contract": "TenartArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/TenartArtTradable.sol:33"
            },
            {
              "contract": "TenartArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TenartArtTradable.sol:34"
            },
            {
              "contract": "TenartArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/TenartArtTradable.sol:37"
            },
            {
              "contract": "TenartArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/TenartArtTradable.sol:39"
            },
            {
              "contract": "TenartArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtTradable.sol:41"
            },
            {
              "contract": "TenartArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartArtTradable.sol:43"
            },
            {
              "contract": "TenartArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartArtTradable.sol:45"
            },
            {
              "contract": "TenartArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartArtTradablePrivate": {
        "src": "contracts/TenartArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "323dcda7154000d48709b1a2d12ff3dbdee0f89ba5d42feaf1aff1bd55a831b1",
          "withoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9",
          "linkedWithoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartArtTradablePrivate",
            "src": "contracts/TenartArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/TenartArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/TenartArtTradablePrivate.sol:28"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/TenartArtTradablePrivate.sol:31"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/TenartArtTradablePrivate.sol:33"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TenartArtTradablePrivate.sol:34"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/TenartArtTradablePrivate.sol:37"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/TenartArtTradablePrivate.sol:39"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtTradablePrivate.sol:41"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartArtTradablePrivate.sol:43"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartArtTradablePrivate.sol:45"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ITenartAddressRegistry": {
        "src": "contracts/TenartPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartBundleMarketplace": {
        "src": "contracts/TenartMarketplace.sol:52",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartMarketplace": {
        "src": "contracts/TenartBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartRoyaltyRegistry": {
        "src": "contracts/TenartMarketplace.sol:74",
        "inherit": [],
        "libraries": [],
        "methods": [
          "royaltyInfo(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartTokenRegistry": {
        "src": "contracts/TenartPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TenartAuction": {
        "src": "contracts/TenartAuction.sol:53",
        "version": {
          "withMetadata": "db0475967ba15c1715e85b3d1fad219243c0f7656c227515915e70d300b80829",
          "withoutMetadata": "859d8697d145a46440e68a55c7647aa61c2d5ca28244c0c47636972a02c361b5",
          "linkedWithoutMetadata": "859d8697d145a46440e68a55c7647aa61c2d5ca28244c0c47636972a02c361b5"
        },
        "inherit": [
          "IERC721Receiver",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)",
          "onERC721Received(address,address,uint256,bytes)",
          "endAuction(address,uint256)",
          "cancelAuctionOwner(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)11729_storage))",
              "src": "contracts/TenartAuction.sol:152"
            },
            {
              "contract": "TenartAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)11736_storage))",
              "src": "contracts/TenartAuction.sol:155"
            },
            {
              "contract": "TenartAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts/TenartAuction.sol:158"
            },
            {
              "contract": "TenartAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts/TenartAuction.sol:161"
            },
            {
              "contract": "TenartAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartAuction.sol:164"
            },
            {
              "contract": "TenartAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts/TenartAuction.sol:167"
            },
            {
              "contract": "TenartAuction",
              "label": "addressRegistry",
              "type": "t_contract(ITenartAddressRegistry)11549",
              "src": "contracts/TenartAuction.sol:170"
            },
            {
              "contract": "TenartAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts/TenartAuction.sol:173"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)11729_storage))": {
              "label": "mapping(address => mapping(uint256 => struct TenartAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)11729_storage)": {
              "label": "mapping(uint256 => struct TenartAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)11729_storage": {
              "label": "struct TenartAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)11736_storage))": {
              "label": "mapping(address => mapping(uint256 => struct TenartAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)11736_storage)": {
              "label": "mapping(uint256 => struct TenartAuction.HighestBid)"
            },
            "t_struct(HighestBid)11736_storage": {
              "label": "struct TenartAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(ITenartAddressRegistry)11549": {
              "label": "contract ITenartAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartBundleMarketplace": {
        "src": "contracts/TenartBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "8a42d96aea082a8156f5faa16d1f70fe32662702b3a9c1a903eb0c5f0c776c56",
          "withoutMetadata": "0358ccbe762a0ef4d331cd1cca908db1b4af94c4f7baa88fc1e9ec58a89a9efc",
          "linkedWithoutMetadata": "0358ccbe762a0ef4d331cd1cca908db1b4af94c4f7baa88fc1e9ec58a89a9efc"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20Upgradeable",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)13846_storage))",
              "src": "contracts/TenartBundleMarketplace.sol:106"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/TenartBundleMarketplace.sol:109"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)5115_storage))",
              "src": "contracts/TenartBundleMarketplace.sol:111"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts/TenartBundleMarketplace.sol:113"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts/TenartBundleMarketplace.sol:115"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)13853_storage))",
              "src": "contracts/TenartBundleMarketplace.sol:118"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartBundleMarketplace.sol:121"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartBundleMarketplace.sol:124"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(ITenartAddressRegistry)13709",
              "src": "contracts/TenartBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)13846_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct TenartBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)13846_storage)": {
              "label": "mapping(bytes32 => struct TenartBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)13846_storage": {
              "label": "struct TenartBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)5115_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)5115_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)5115_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4935_storage"
                }
              ]
            },
            "t_struct(Set)4935_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)13853_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct TenartBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)13853_storage)": {
              "label": "mapping(address => struct TenartBundleMarketplace.Offer)"
            },
            "t_struct(Offer)13853_storage": {
              "label": "struct TenartBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20Upgradeable)825"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)825": {
              "label": "contract IERC20Upgradeable"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(ITenartAddressRegistry)13709": {
              "label": "contract ITenartAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ITenartAuction": {
        "src": "contracts/TenartMarketplace.sol:38",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartNFTFactory": {
        "src": "contracts/TenartMarketplace.sol:60",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartPriceFeed": {
        "src": "contracts/TenartMarketplace.sol:68",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wETH()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TenartMarketplace": {
        "src": "contracts/TenartMarketplace.sol:82",
        "version": {
          "withMetadata": "b04d281ef901110ddd5edf1f0ae4aa1c1339d889f8fd0897fb9fe765e1bfe499",
          "withoutMetadata": "3de4f9b4ad12e728794d09954cb6161a544fd81056145959bbba68a4deb1e37f",
          "linkedWithoutMetadata": "3de4f9b4ad12e728794d09954cb6161a544fd81056145959bbba68a4deb1e37f"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "createCounterOffer(address,uint256,(address,uint256,uint256,uint256),address)",
          "cancelOffer(address,uint256)",
          "refuseOffer(address,uint256,address,uint256)",
          "cancelCounterOffer(address,uint256,uint256,address)",
          "refuseCounterOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "acceptCounterOffer(address,uint256)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts/TenartMarketplace.sol:186"
            },
            {
              "contract": "TenartMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts/TenartMarketplace.sol:189"
            },
            {
              "contract": "TenartMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)16043_storage)))",
              "src": "contracts/TenartMarketplace.sol:192"
            },
            {
              "contract": "TenartMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)16052_storage)))",
              "src": "contracts/TenartMarketplace.sol:196"
            },
            {
              "contract": "TenartMarketplace",
              "label": "counterOffers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)16052_storage)))",
              "src": "contracts/TenartMarketplace.sol:200"
            },
            {
              "contract": "TenartMarketplace",
              "label": "ownerOfERC1155",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts/TenartMarketplace.sol:204"
            },
            {
              "contract": "TenartMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts/TenartMarketplace.sol:207"
            },
            {
              "contract": "TenartMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartMarketplace.sol:210"
            },
            {
              "contract": "TenartMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)16059_storage)",
              "src": "contracts/TenartMarketplace.sol:213"
            },
            {
              "contract": "TenartMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(ITenartAddressRegistry)15819",
              "src": "contracts/TenartMarketplace.sol:216"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)16043_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct TenartMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)16043_storage))": {
              "label": "mapping(uint256 => mapping(address => struct TenartMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)16043_storage)": {
              "label": "mapping(address => struct TenartMarketplace.Listing)"
            },
            "t_struct(Listing)16043_storage": {
              "label": "struct TenartMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)16052_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct TenartMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)16052_storage))": {
              "label": "mapping(uint256 => mapping(address => struct TenartMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)16052_storage)": {
              "label": "mapping(address => struct TenartMarketplace.Offer)"
            },
            "t_struct(Offer)16052_storage": {
              "label": "struct TenartMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20Upgradeable)825"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)825": {
              "label": "contract IERC20Upgradeable"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)16059_storage)": {
              "label": "mapping(address => struct TenartMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)16059_storage": {
              "label": "struct TenartMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(ITenartAddressRegistry)15819": {
              "label": "contract ITenartAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartNFT": {
        "src": "contracts/TenartNFT.sol:10",
        "version": {
          "withMetadata": "56d959a19d50f2c0b5872cfc50931f710e74a7440c923cfd7f83385f5b9db403",
          "withoutMetadata": "d9b68257ac7bcf7939a0961d1647c80f6e259ab7a771f161d63f786d441c37b2",
          "linkedWithoutMetadata": "d9b68257ac7bcf7939a0961d1647c80f6e259ab7a771f161d63f786d441c37b2"
        },
        "inherit": [
          "Ownable",
          "ERC2981PerTokenRoyalties",
          "ERC2981",
          "IERC2981RoyaltySetter",
          "IERC2981Royalties",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string,address,uint256)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartNFT",
            "src": "contracts/TenartNFT.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartNFT",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts/TenartNFT.sol:26"
            },
            {
              "contract": "TenartNFT",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/TenartNFT.sol:29"
            },
            {
              "contract": "TenartNFT",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFT.sol:32"
            },
            {
              "contract": "TenartNFT",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartNFT.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartNFTFactory": {
        "src": "contracts/TenartNFTFactory.sol:8",
        "version": {
          "withMetadata": "9a6b6e5de9ad1f917da82c137dcb59c91410021aacbb14a9de61ff2ea09fd90d",
          "withoutMetadata": "618becf40f53857cfd255af61fb3d44a215ff2f2fc8ef75a471e0c25f2e66c6e",
          "linkedWithoutMetadata": "618becf40f53857cfd255af61fb3d44a215ff2f2fc8ef75a471e0c25f2e66c6e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartNFTFactory",
            "src": "contracts/TenartNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/TenartNFTFactory.sol:14"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTFactory.sol:17"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTFactory.sol:20"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTFactory.sol:23"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTFactory.sol:26"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/TenartNFTFactory.sol:29"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TenartNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartNFTFactoryPrivate": {
        "src": "contracts/TenartNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "f86bd27ec9f2b42b7cc9787ad7e4e2a7986de00e3058ad3e2b2eb3826c34130c",
          "withoutMetadata": "2df81774e2e26fae4e020a3237af815e340278ab48ae3b3cdd3181966f3f45ff",
          "linkedWithoutMetadata": "2df81774e2e26fae4e020a3237af815e340278ab48ae3b3cdd3181966f3f45ff"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartNFTFactoryPrivate",
            "src": "contracts/TenartNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/TenartNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/TenartNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TenartNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartNFTTradable": {
        "src": "contracts/TenartNFTTradable.sol:12",
        "version": {
          "withMetadata": "619354b452fb248337ad26ac2962de06671fdd92ef1068e05087bd4d006205bd",
          "withoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b",
          "linkedWithoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartNFTTradable",
            "src": "contracts/TenartNFTTradable.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/TenartNFTTradable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/TenartNFTTradable.sol:23"
            },
            {
              "contract": "TenartNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTTradable.sol:24"
            },
            {
              "contract": "TenartNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTTradable.sol:25"
            },
            {
              "contract": "TenartNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/TenartNFTTradable.sol:26"
            },
            {
              "contract": "TenartNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTTradable.sol:29"
            },
            {
              "contract": "TenartNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartNFTTradable.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartNFTTradablePrivate": {
        "src": "contracts/TenartNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "c4a8eaa76caa48c0a52a4f45c6d2161e7a30cf28fc3f7898a445945051c09c9f",
          "withoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9",
          "linkedWithoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartNFTTradablePrivate",
            "src": "contracts/TenartNFTTradablePrivate.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/TenartNFTTradablePrivate.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/TenartNFTTradablePrivate.sol:23"
            },
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTTradablePrivate.sol:24"
            },
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTTradablePrivate.sol:25"
            },
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/TenartNFTTradablePrivate.sol:26"
            },
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTTradablePrivate.sol:29"
            },
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartNFTTradablePrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts/TenartPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TenartPriceFeed": {
        "src": "contracts/TenartPriceFeed.sol:21",
        "version": {
          "withMetadata": "b4f919e6fc1c65112c2b30eda0a752d13b677af1e963479e3da1911773788936",
          "withoutMetadata": "abca15542052f5c81283a59fa5becdd88e4e88dbca66036af74057ef29025e8c",
          "linkedWithoutMetadata": "abca15542052f5c81283a59fa5becdd88e4e88dbca66036af74057ef29025e8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartPriceFeed",
            "src": "contracts/TenartPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/TenartPriceFeed.sol:23"
            },
            {
              "contract": "TenartPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts/TenartPriceFeed.sol:26"
            },
            {
              "contract": "TenartPriceFeed",
              "label": "wETH",
              "type": "t_address",
              "src": "contracts/TenartPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartRoyaltyRegistry": {
        "src": "contracts/TenartRoyaltyRegistry.sol:11",
        "version": {
          "withMetadata": "dcb620d326baf314ff3b77896241688e1421c82143afcd54b9a987b5897cc692",
          "withoutMetadata": "9dcf985a0b077c6d7450ffac80e18e5b44aa38ac368ad4347b5c1a868a86b3e5",
          "linkedWithoutMetadata": "9dcf985a0b077c6d7450ffac80e18e5b44aa38ac368ad4347b5c1a868a86b3e5"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "setDefaultRoyalty(address,address,uint16)",
          "setRoyalty(address,uint256,address,uint16)",
          "royaltyInfo(address,uint256,uint256)",
          "updateMigrationManager(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartRoyaltyRegistry",
              "label": "royaltyMigrationManager",
              "type": "t_address",
              "src": "contracts/TenartRoyaltyRegistry.sol:12"
            },
            {
              "contract": "TenartRoyaltyRegistry",
              "label": "_royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)20174_storage))",
              "src": "contracts/TenartRoyaltyRegistry.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)20174_storage))": {
              "label": "mapping(address => mapping(uint256 => struct TenartRoyaltyRegistry.RoyaltyInfo))"
            },
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)20174_storage)": {
              "label": "mapping(uint256 => struct TenartRoyaltyRegistry.RoyaltyInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(RoyaltyInfo)20174_storage": {
              "label": "struct TenartRoyaltyRegistry.RoyaltyInfo",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "royaltyPercent",
                  "type": "t_uint16"
                }
              ]
            },
            "t_uint16": {
              "label": "uint16"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartTokenRegistry": {
        "src": "contracts/TenartTokenRegistry.sol:7",
        "version": {
          "withMetadata": "84a4a9154a3c4231dfa778efc9c45eeed8114ae38fda5c0fe7f63f47a2fc9bdc",
          "withoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86",
          "linkedWithoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TenartTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts/library/ERC1155.sol:12",
        "version": {
          "withMetadata": "4f7758aaf073d8af6ccf5183c389c2ba027b6318cc8a4327960c62c6a224cf32",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/library/ERC1155.sol:26"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/library/ERC1155.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts/library/ERC1155Metadata.sol:10",
        "version": {
          "withMetadata": "22f0def7dd847734397d8ab2c9784174764a320bb281b7979b2f41f91fa3c1b8",
          "withoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021",
          "linkedWithoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts/library/ERC1155Metadata.sol:13"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts/library/ERC1155MintBurn.sol:10",
        "version": {
          "withMetadata": "aac939b704517d1f2525b44a9d409c32b3a5006b70cb84f471fce96b07236e5a",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC2981": {
        "src": "contracts/library/ERC2981.sol:10",
        "inherit": [
          "IERC2981RoyaltySetter",
          "IERC2981Royalties",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC2981Base": {
        "src": "contracts/library/ERC2981Base.sol:9",
        "inherit": [
          "IERC2981Royalties",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC2981Base",
              "label": "_royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)21632_storage))",
              "src": "contracts/library/ERC2981Base.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)21632_storage))": {
              "label": "mapping(address => mapping(uint256 => struct ERC2981Base.RoyaltyInfo))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)21632_storage)": {
              "label": "mapping(uint256 => struct ERC2981Base.RoyaltyInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(RoyaltyInfo)21632_storage": {
              "label": "struct ERC2981Base.RoyaltyInfo",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "royaltyPercent",
                  "type": "t_uint16"
                }
              ]
            },
            "t_uint16": {
              "label": "uint16"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC2981PerTokenRoyalties": {
        "src": "contracts/library/ERC2981PerTokenRoyalties.sol:7",
        "inherit": [
          "ERC2981",
          "IERC2981RoyaltySetter",
          "IERC2981Royalties",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "setDefaultRoyalty(address,uint16)",
          "setTokenRoyalty(uint256,address,uint16)",
          "royaltyInfo(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC2981PerTokenRoyalties",
              "label": "_royalties",
              "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)21586_storage)",
              "src": "contracts/library/ERC2981PerTokenRoyalties.sol:8"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)21586_storage)": {
              "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(RoyaltyInfo)21586_storage": {
              "label": "struct ERC2981.RoyaltyInfo",
              "members": [
                {
                  "label": "recipient",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint24"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_uint24": {
              "label": "uint24"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts/library/IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC2981Royalties": {
        "src": "contracts/library/IERC2981Royalties.sol:7",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "royaltyInfo(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC2981RoyaltySetter": {
        "src": "contracts/library/IERC2981RoyaltySetter.sol:7",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "setDefaultRoyalty(address,uint16)",
          "setTokenRoyalty(uint256,address,uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts/mock/BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "d0b282f3a3ff01a0d79f6efbb7abc447e3155393ca143b6392b02d6d1b46230e",
          "withoutMetadata": "f16feedc84b2c164217f0a3c0c7c7ef7e7ec09984915c9f9601de051c36efdcb",
          "linkedWithoutMetadata": "f16feedc84b2c164217f0a3c0c7c7ef7e7ec09984915c9f9601de051c36efdcb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts/mock/BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(TenartAuction)13681",
              "src": "contracts/mock/BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(TenartAuction)13681": {
              "label": "contract TenartAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:7",
        "version": {
          "withMetadata": "f6bf27ebe525638474b4b3d6c79ce37fa1a36fade0b92465b899194e8b783f9a",
          "withoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957",
          "linkedWithoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockTenartAuction": {
        "src": "contracts/mock/MockTenartAuction.sol:7",
        "version": {
          "withMetadata": "0e9eb1ece2ec6417a8fa011b918140b3acb9e37aa7b4df7ae7136ff77ea19e86",
          "withoutMetadata": "3d7092d85b1db98ef1fc03e9e0f6dff6f1e3e58df4673ef162926046d28dc747",
          "linkedWithoutMetadata": "3d7092d85b1db98ef1fc03e9e0f6dff6f1e3e58df4673ef162926046d28dc747"
        },
        "inherit": [
          "TenartAuction",
          "IERC721Receiver",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTime(uint256)",
          "increaseTime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MockTenartAuction",
              "label": "time",
              "type": "t_uint256",
              "src": "contracts/mock/MockTenartAuction.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartAuctionMock": {
        "src": "contracts/mock/TenartAuctionMock.sol:7",
        "version": {
          "withMetadata": "0659d2ba8da3ddfe4dab9b0e8a28563b3f19bd841af301ae62316b517d6430b5",
          "withoutMetadata": "1afd5b3a1e36cd1f39685070f9ccf070e947c8374118782cfd04d8d8d64357fd",
          "linkedWithoutMetadata": "1afd5b3a1e36cd1f39685070f9ccf070e947c8374118782cfd04d8d8d64357fd"
        },
        "inherit": [
          "TenartAuction",
          "IERC721Receiver",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts/mock/TenartAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MerkleProof": {
        "src": "@openzeppelin/contracts/cryptography/MerkleProof.sol:8",
        "version": {
          "withMetadata": "e4c1a7894a06b1c2edf4951f92346a8c87ca32adf7ffd354954ba1e9195a9b23",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/introspection/ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin/contracts/introspection/ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin/contracts/introspection/ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts/library/IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:21",
        "version": {
          "withMetadata": "6159e5b8b162df16ddf823478e6d2f5f1c6289fe3985e922be50f8f8ba411d0b",
          "withoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033",
          "linkedWithoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)5321_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4698_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)5321_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)5321_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4935_storage"
                }
              ]
            },
            "t_struct(Set)4935_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4698_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)4380_storage"
                }
              ]
            },
            "t_struct(Map)4380_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)4372_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)4372_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)4372_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin/contracts/utils/EnumerableMap.sol:29",
        "version": {
          "withMetadata": "33db0abc4b4d1da32aed25dc771cc00a3efa31fff5d6d984c64d230b001e4165",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "4f51efe115648bafc40e8dcb6d91da10d2c3805f4d3f7a23f58ceb3aa49f6aac",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/utils/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "74ef6d7234587add3006addc68209e5df580602fb30a593c7df5114b91053bef",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FeeSharingSystem": {
        "src": "contracts/Rewards/FeeSharingSystem.sol:15",
        "version": {
          "withMetadata": "6f98a16411c3ddc0dc75c3def21477ca402d2d759c70784562748a75cc9f88f4",
          "withoutMetadata": "d2bf2f0822644f946d1064a40c2b8ce39c850f7179d08ceca9f8064581339b58",
          "linkedWithoutMetadata": "d2bf2f0822644f946d1064a40c2b8ce39c850f7179d08ceca9f8064581339b58"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ReentrancyGuard"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "deposit(uint256,bool)",
          "harvest()",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "updateRewards(uint256,uint256)",
          "calculatePendingRewards(address)",
          "calculateSharesValueInTART(address)",
          "calculateSharePriceInTART()",
          "lastRewardBlock()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeSharingSystem",
            "src": "contracts/Rewards/FeeSharingSystem.sol:76"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/FeeSharingSystem.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/Rewards/FeeSharingSystem.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenDistributor",
            "src": "contracts/Rewards/FeeSharingSystem.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeSharingSystem",
              "label": "currentRewardPerBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:34"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "lastRewardAdjustment",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:37"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "lastUpdateBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:40"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "periodEndBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:43"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:46"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "totalShares",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:49"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)5661_storage)",
              "src": "contracts/Rewards/FeeSharingSystem.sol:51"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)5661_storage)": {
              "label": "mapping(address => struct FeeSharingSystem.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)5661_storage": {
              "label": "struct FeeSharingSystem.UserInfo",
              "members": [
                {
                  "label": "shares",
                  "type": "t_uint256"
                },
                {
                  "label": "userRewardPerTokenPaid",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PrivateSaleWithFeeSharing": {
        "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:15",
        "version": {
          "withMetadata": "b9591ffd8a9a7aab8561fa6af883af7639a80b29f84ea598b685128dbf504d81",
          "withoutMetadata": "b9591ffd8a9a7aab8561fa6af883af7639a80b29f84ea598b685128dbf504d81",
          "linkedWithoutMetadata": "b9591ffd8a9a7aab8561fa6af883af7639a80b29f84ea598b685128dbf504d81"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256)",
          "deposit()",
          "harvest()",
          "withdraw()",
          "updateSalePhaseToWithdraw()",
          "removeUserFromWhitelist(address)",
          "setAllocationCostPerTier(uint8,uint256)",
          "setBlockForWithdrawal(uint256)",
          "setPriceOfETHInTART(uint256)",
          "updateSalePhase(uint8)",
          "withdrawCommittedAmount()",
          "whitelistUsers(address[],uint8)",
          "calculatePendingRewards(address)",
          "getMaxAmountTARTToDistribute()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PrivateSaleWithFeeSharing",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:87"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "MAX_BLOCK_FOR_WITHDRAWAL",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TOTAL_TART_DISTRIBUTED",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "currentPhase",
              "type": "t_enum(SalePhase)6447",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:47"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "blockForWithdrawal",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:50"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "priceOfETHInTART",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:53"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "totalAmountCommitted",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:56"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "totalRewardTokensDistributedToStakers",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:59"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "allocationCostPerTier",
              "type": "t_mapping(t_uint8,t_uint256)",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:62"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "numberOfParticipantsForATier",
              "type": "t_mapping(t_uint8,t_uint256)",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:65"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)6456_storage)",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:68"
            }
          ],
          "types": {
            "t_enum(SalePhase)6447": {
              "label": "enum PrivateSaleWithFeeSharing.SalePhase",
              "members": [
                "Pending",
                "Deposit",
                "Over",
                "Staking",
                "Withdraw"
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_struct(UserInfo)6456_storage)": {
              "label": "mapping(address => struct PrivateSaleWithFeeSharing.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)6456_storage": {
              "label": "struct PrivateSaleWithFeeSharing.UserInfo",
              "members": [
                {
                  "label": "rewardsDistributedToAccount",
                  "type": "t_uint256"
                },
                {
                  "label": "tier",
                  "type": "t_uint8"
                },
                {
                  "label": "hasDeposited",
                  "type": "t_bool"
                },
                {
                  "label": "hasWithdrawn",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StakingPoolForUniswapV2Tokens": {
        "src": "contracts/Rewards/TenartStaking.sol:16",
        "version": {
          "withMetadata": "3b1f83f1cb7ce56bb286b5595143291b4bcd8b31c584e500fedd13c9a50c9894",
          "withoutMetadata": "21a58aac2d8a5fbe04019ccba9220d57a41329a064c266f24f6f94ac97547e28",
          "linkedWithoutMetadata": "21a58aac2d8a5fbe04019ccba9220d57a41329a064c266f24f6f94ac97547e28"
        },
        "inherit": [
          "ReentrancyGuard",
          "Pausable",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "deposit(uint256)",
          "harvest()",
          "emergencyWithdraw()",
          "withdraw(uint256)",
          "adminRewardWithdraw(uint256)",
          "pause()",
          "unpause()",
          "updateRewardPerBlockAndEndBlock(uint256,uint256)",
          "calculatePendingRewards(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StakingPoolForUniswapV2Tokens",
            "src": "contracts/Rewards/TenartStaking.sol:77"
          },
          {
            "kind": "state-variable-immutable",
            "name": "looksRareToken",
            "src": "contracts/Rewards/TenartStaking.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "stakedToken",
            "src": "contracts/Rewards/TenartStaking.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "START_BLOCK",
            "src": "contracts/Rewards/TenartStaking.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "accTokenPerShare",
              "type": "t_uint256",
              "src": "contracts/Rewards/TenartStaking.sol:37"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "endBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TenartStaking.sol:40"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "lastRewardBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TenartStaking.sol:43"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "rewardPerBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TenartStaking.sol:46"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)7406_storage)",
              "src": "contracts/Rewards/TenartStaking.sol:49"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)7406_storage)": {
              "label": "mapping(address => struct StakingPoolForUniswapV2Tokens.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)7406_storage": {
              "label": "struct StakingPoolForUniswapV2Tokens.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartToken": {
        "src": "contracts/Rewards/TenartToken.sol:13",
        "version": {
          "withMetadata": "3e3c3900c94382a7d0718d779f8f045e0c14f5b50603c62615be255c729996e2",
          "withoutMetadata": "3e3c3900c94382a7d0718d779f8f045e0c14f5b50603c62615be255c729996e2",
          "linkedWithoutMetadata": "3e3c3900c94382a7d0718d779f8f045e0c14f5b50603c62615be255c729996e2"
        },
        "inherit": [
          "ITenartToken",
          "Ownable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,uint256)",
          "mint(address,uint256)",
          "SUPPLY_CAP()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartToken",
            "src": "contracts/Rewards/TenartToken.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_SUPPLY_CAP",
            "src": "contracts/Rewards/TenartToken.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TokenDistributor": {
        "src": "contracts/Rewards/TokenDistributor.sol:14",
        "version": {
          "withMetadata": "e47474a3e8b903c02b53be809234ac4f1e771a9df8d6187327ddb1a8fa985106",
          "withoutMetadata": "e47474a3e8b903c02b53be809234ac4f1e771a9df8d6187327ddb1a8fa985106",
          "linkedWithoutMetadata": "e47474a3e8b903c02b53be809234ac4f1e771a9df8d6187327ddb1a8fa985106"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256[],uint256[],uint256[],uint256)",
          "deposit(uint256)",
          "harvestAndCompound()",
          "updatePool()",
          "withdraw(uint256)",
          "withdrawAll()",
          "calculatePendingRewards(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenDistributor",
            "src": "contracts/Rewards/TokenDistributor.sol:95"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/TokenDistributor.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenSplitter",
            "src": "contracts/Rewards/TokenDistributor.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "NUMBER_PERIODS",
            "src": "contracts/Rewards/TokenDistributor.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "START_BLOCK",
            "src": "contracts/Rewards/TokenDistributor.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TokenDistributor",
              "label": "accTokenPerShare",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:43"
            },
            {
              "contract": "TokenDistributor",
              "label": "currentPhase",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:46"
            },
            {
              "contract": "TokenDistributor",
              "label": "endBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:49"
            },
            {
              "contract": "TokenDistributor",
              "label": "lastRewardBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:52"
            },
            {
              "contract": "TokenDistributor",
              "label": "rewardPerBlockForOthers",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:55"
            },
            {
              "contract": "TokenDistributor",
              "label": "rewardPerBlockForStaking",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:58"
            },
            {
              "contract": "TokenDistributor",
              "label": "totalAmountStaked",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:61"
            },
            {
              "contract": "TokenDistributor",
              "label": "stakingPeriod",
              "type": "t_mapping(t_uint256,t_struct(StakingPeriod)8244_storage)",
              "src": "contracts/Rewards/TokenDistributor.sol:63"
            },
            {
              "contract": "TokenDistributor",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)8249_storage)",
              "src": "contracts/Rewards/TokenDistributor.sol:65"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(StakingPeriod)8244_storage)": {
              "label": "mapping(uint256 => struct TokenDistributor.StakingPeriod)"
            },
            "t_struct(StakingPeriod)8244_storage": {
              "label": "struct TokenDistributor.StakingPeriod",
              "members": [
                {
                  "label": "rewardPerBlockForStaking",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardPerBlockForOthers",
                  "type": "t_uint256"
                },
                {
                  "label": "periodLengthInBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(UserInfo)8249_storage)": {
              "label": "mapping(address => struct TokenDistributor.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)8249_storage": {
              "label": "struct TokenDistributor.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TokenSplitter": {
        "src": "contracts/Rewards/TokenSplitter.sol:12",
        "version": {
          "withMetadata": "96e327208a7ca972de5da2516722c7891e020a86853f7c1ce4003fba6c34117b",
          "withoutMetadata": "60b25e061d13de2bb78b15c7807fdbd616ae4296044fa4bb67d9132dcb842c2c",
          "linkedWithoutMetadata": "60b25e061d13de2bb78b15c7807fdbd616ae4296044fa4bb67d9132dcb842c2c"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address[],uint256[],address)",
          "releaseTokens(address)",
          "updateSharesOwner(address,address)",
          "calculatePendingRewards(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenSplitter",
            "src": "contracts/Rewards/TokenSplitter.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TOTAL_SHARES",
            "src": "contracts/Rewards/TokenSplitter.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/TokenSplitter.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TokenSplitter",
              "label": "totalTokensDistributed",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenSplitter.sol:25"
            },
            {
              "contract": "TokenSplitter",
              "label": "accountInfo",
              "type": "t_mapping(t_address,t_struct(AccountInfo)9233_storage)",
              "src": "contracts/Rewards/TokenSplitter.sol:27"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(AccountInfo)9233_storage)": {
              "label": "mapping(address => struct TokenSplitter.AccountInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(AccountInfo)9233_storage": {
              "label": "struct TokenSplitter.AccountInfo",
              "members": [
                {
                  "label": "shares",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensDistributedToAccount",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TradingRewardsDistributor": {
        "src": "contracts/Rewards/TradingRewardsDistributor.sol:14",
        "version": {
          "withMetadata": "5a10783c334b7dd679676d2d3a249644788aedeb6e98e784b46eb9078067aa54",
          "withoutMetadata": "698b0ba28e7632a36e88e1f75e97ef463565473ab12d04471015a564e92d5b6a",
          "linkedWithoutMetadata": "698b0ba28e7632a36e88e1f75e97ef463565473ab12d04471015a564e92d5b6a"
        },
        "inherit": [
          "Ownable",
          "ReentrancyGuard",
          "Pausable",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "MerkleProof"
        ],
        "methods": [
          "(address)",
          "claim(uint256,bytes32[])",
          "updateTradingRewards(bytes32,uint256)",
          "pauseDistribution()",
          "unpauseDistribution()",
          "withdrawTokenRewards(uint256)",
          "canClaim(address,uint256,bytes32[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TradingRewardsDistributor",
            "src": "contracts/Rewards/TradingRewardsDistributor.sol:55"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/TradingRewardsDistributor.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TradingRewardsDistributor",
              "label": "currentRewardRound",
              "type": "t_uint256",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:22"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "lastPausedTimestamp",
              "type": "t_uint256",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:25"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "maximumAmountPerUserInCurrentTree",
              "type": "t_uint256",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:28"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "amountClaimedByUser",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:31"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "merkleRootOfRewardRound",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:34"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "merkleRootUsed",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:37"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "hasUserClaimedForRewardRound",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VestingContractWithFeeSharing": {
        "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:13",
        "version": {
          "withMetadata": "493381ea0d065b8aaa7f905a165972c5b3fa40621441f01e16b018f3796ed911",
          "withoutMetadata": "ec3e3c5c2692f688d05d4eecc9d19c2329acd089ff76664b38253ea5fe5bfeaf",
          "linkedWithoutMetadata": "ec3e3c5c2692f688d05d4eecc9d19c2329acd089ff76664b38253ea5fe5bfeaf"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(uint256,uint256,uint256,uint256,address)",
          "unlockLooksRareToken()",
          "withdrawOtherCurrency(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingContractWithFeeSharing",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "NUMBER_UNLOCK_PERIODS",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "STANDARD_AMOUNT_UNLOCKED_AT_EACH_UNLOCK",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "START_BLOCK",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "VESTING_BETWEEN_PERIODS_IN_BLOCKS",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingContractWithFeeSharing",
              "label": "maxAmountToWithdrawForNextPeriod",
              "type": "t_uint256",
              "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:31"
            },
            {
              "contract": "VestingContractWithFeeSharing",
              "label": "nextBlockForUnlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:34"
            },
            {
              "contract": "VestingContractWithFeeSharing",
              "label": "numberPastUnlocks",
              "type": "t_uint256",
              "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ITenartToken": {
        "src": "contracts/Rewards/interfaces/ITenartToken.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "SUPPLY_CAP()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TenartAddressRegistry": {
        "src": "contracts/TenartAddressRegistry.sol:8",
        "version": {
          "withMetadata": "48e529079b227b14fa42607eb7d59fa6280dfe8b0bdd730e7d50fe5cb43f1583",
          "withoutMetadata": "4fd7467afe82d21e7ac8aa7815babafe867eccbd42fabfb94fb53916acc4e7bf",
          "linkedWithoutMetadata": "4fd7467afe82d21e7ac8aa7815babafe867eccbd42fabfb94fb53916acc4e7bf"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateTenartNFT(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)",
          "updateRoyaltyRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartAddressRegistry",
              "label": "tenartNFT",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:12"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:15"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:18"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:21"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:24"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:27"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:30"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:33"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:36"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:39"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "royaltyRegistry",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartArtFactory": {
        "src": "contracts/TenartArtFactory.sol:8",
        "version": {
          "withMetadata": "143841b5c2bb77f54b1d0f43aeadb63f1b7ee1dd93cdce7af188850275b50893",
          "withoutMetadata": "f50354e24b5fac0ed2d83d4807450ba85a2bccda19fda2b11ac8c99a994eeab2",
          "linkedWithoutMetadata": "f50354e24b5fac0ed2d83d4807450ba85a2bccda19fda2b11ac8c99a994eeab2"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartArtFactory",
            "src": "contracts/TenartArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartArtFactory.sol:14"
            },
            {
              "contract": "TenartArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartArtFactory.sol:17"
            },
            {
              "contract": "TenartArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtFactory.sol:20"
            },
            {
              "contract": "TenartArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtFactory.sol:23"
            },
            {
              "contract": "TenartArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/TenartArtFactory.sol:26"
            },
            {
              "contract": "TenartArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TenartArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartArtFactoryPrivate": {
        "src": "contracts/TenartArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "62104fb8f516d5cc45a00018ce2f58bd4a00f1362c8424a15bbd60f097b23f57",
          "withoutMetadata": "ede3c7b60f0cd8ba1b79391454bfaa2b13d1f8cc694e5715a7d995e48773fa47",
          "linkedWithoutMetadata": "ede3c7b60f0cd8ba1b79391454bfaa2b13d1f8cc694e5715a7d995e48773fa47"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartArtFactoryPrivate",
            "src": "contracts/TenartArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartArtFactoryPrivate.sol:14"
            },
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartArtFactoryPrivate.sol:17"
            },
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtFactoryPrivate.sol:20"
            },
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtFactoryPrivate.sol:23"
            },
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/TenartArtFactoryPrivate.sol:26"
            },
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TenartArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts/TenartArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "7f95cdc38e89bae24160fd7a573a9e55ad073029b8a2970ae0053036c3cb2ee0",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts/TenartArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "721aa68583181a3ace999d9956398496f5b39d9eb230ed378c47a4412ec2c611",
          "withoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d",
          "linkedWithoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)11215)",
              "src": "contracts/TenartArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)11215)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)11215": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartArtTradable": {
        "src": "contracts/TenartArtTradable.sol:22",
        "version": {
          "withMetadata": "4e62409cc08323a755af6609dfd2de33fdd764b0b199fbb80fa205195ae7fd94",
          "withoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b",
          "linkedWithoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartArtTradable",
            "src": "contracts/TenartArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/TenartArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/TenartArtTradable.sol:28"
            },
            {
              "contract": "TenartArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/TenartArtTradable.sol:31"
            },
            {
              "contract": "TenartArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/TenartArtTradable.sol:33"
            },
            {
              "contract": "TenartArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TenartArtTradable.sol:34"
            },
            {
              "contract": "TenartArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/TenartArtTradable.sol:37"
            },
            {
              "contract": "TenartArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/TenartArtTradable.sol:39"
            },
            {
              "contract": "TenartArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtTradable.sol:41"
            },
            {
              "contract": "TenartArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartArtTradable.sol:43"
            },
            {
              "contract": "TenartArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartArtTradable.sol:45"
            },
            {
              "contract": "TenartArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartArtTradablePrivate": {
        "src": "contracts/TenartArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "323dcda7154000d48709b1a2d12ff3dbdee0f89ba5d42feaf1aff1bd55a831b1",
          "withoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9",
          "linkedWithoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartArtTradablePrivate",
            "src": "contracts/TenartArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/TenartArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/TenartArtTradablePrivate.sol:28"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/TenartArtTradablePrivate.sol:31"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/TenartArtTradablePrivate.sol:33"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TenartArtTradablePrivate.sol:34"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/TenartArtTradablePrivate.sol:37"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/TenartArtTradablePrivate.sol:39"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtTradablePrivate.sol:41"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartArtTradablePrivate.sol:43"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartArtTradablePrivate.sol:45"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ITenartAddressRegistry": {
        "src": "contracts/TenartPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartBundleMarketplace": {
        "src": "contracts/TenartMarketplace.sol:52",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartMarketplace": {
        "src": "contracts/TenartBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartRoyaltyRegistry": {
        "src": "contracts/TenartMarketplace.sol:74",
        "inherit": [],
        "libraries": [],
        "methods": [
          "royaltyInfo(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartTokenRegistry": {
        "src": "contracts/TenartPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TenartAuction": {
        "src": "contracts/TenartAuction.sol:53",
        "version": {
          "withMetadata": "db0475967ba15c1715e85b3d1fad219243c0f7656c227515915e70d300b80829",
          "withoutMetadata": "859d8697d145a46440e68a55c7647aa61c2d5ca28244c0c47636972a02c361b5",
          "linkedWithoutMetadata": "859d8697d145a46440e68a55c7647aa61c2d5ca28244c0c47636972a02c361b5"
        },
        "inherit": [
          "IERC721Receiver",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)",
          "onERC721Received(address,address,uint256,bytes)",
          "endAuction(address,uint256)",
          "cancelAuctionOwner(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)11729_storage))",
              "src": "contracts/TenartAuction.sol:152"
            },
            {
              "contract": "TenartAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)11736_storage))",
              "src": "contracts/TenartAuction.sol:155"
            },
            {
              "contract": "TenartAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts/TenartAuction.sol:158"
            },
            {
              "contract": "TenartAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts/TenartAuction.sol:161"
            },
            {
              "contract": "TenartAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartAuction.sol:164"
            },
            {
              "contract": "TenartAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts/TenartAuction.sol:167"
            },
            {
              "contract": "TenartAuction",
              "label": "addressRegistry",
              "type": "t_contract(ITenartAddressRegistry)11549",
              "src": "contracts/TenartAuction.sol:170"
            },
            {
              "contract": "TenartAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts/TenartAuction.sol:173"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)11729_storage))": {
              "label": "mapping(address => mapping(uint256 => struct TenartAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)11729_storage)": {
              "label": "mapping(uint256 => struct TenartAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)11729_storage": {
              "label": "struct TenartAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)11736_storage))": {
              "label": "mapping(address => mapping(uint256 => struct TenartAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)11736_storage)": {
              "label": "mapping(uint256 => struct TenartAuction.HighestBid)"
            },
            "t_struct(HighestBid)11736_storage": {
              "label": "struct TenartAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(ITenartAddressRegistry)11549": {
              "label": "contract ITenartAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartBundleMarketplace": {
        "src": "contracts/TenartBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "8a42d96aea082a8156f5faa16d1f70fe32662702b3a9c1a903eb0c5f0c776c56",
          "withoutMetadata": "0358ccbe762a0ef4d331cd1cca908db1b4af94c4f7baa88fc1e9ec58a89a9efc",
          "linkedWithoutMetadata": "0358ccbe762a0ef4d331cd1cca908db1b4af94c4f7baa88fc1e9ec58a89a9efc"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20Upgradeable",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)13846_storage))",
              "src": "contracts/TenartBundleMarketplace.sol:106"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/TenartBundleMarketplace.sol:109"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)5115_storage))",
              "src": "contracts/TenartBundleMarketplace.sol:111"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts/TenartBundleMarketplace.sol:113"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts/TenartBundleMarketplace.sol:115"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)13853_storage))",
              "src": "contracts/TenartBundleMarketplace.sol:118"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartBundleMarketplace.sol:121"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartBundleMarketplace.sol:124"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(ITenartAddressRegistry)13709",
              "src": "contracts/TenartBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)13846_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct TenartBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)13846_storage)": {
              "label": "mapping(bytes32 => struct TenartBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)13846_storage": {
              "label": "struct TenartBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)5115_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)5115_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)5115_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4935_storage"
                }
              ]
            },
            "t_struct(Set)4935_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)13853_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct TenartBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)13853_storage)": {
              "label": "mapping(address => struct TenartBundleMarketplace.Offer)"
            },
            "t_struct(Offer)13853_storage": {
              "label": "struct TenartBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20Upgradeable)825"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)825": {
              "label": "contract IERC20Upgradeable"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(ITenartAddressRegistry)13709": {
              "label": "contract ITenartAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ITenartAuction": {
        "src": "contracts/TenartMarketplace.sol:38",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartNFTFactory": {
        "src": "contracts/TenartMarketplace.sol:60",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartPriceFeed": {
        "src": "contracts/TenartMarketplace.sol:68",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wETH()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TenartMarketplace": {
        "src": "contracts/TenartMarketplace.sol:82",
        "version": {
          "withMetadata": "b04d281ef901110ddd5edf1f0ae4aa1c1339d889f8fd0897fb9fe765e1bfe499",
          "withoutMetadata": "3de4f9b4ad12e728794d09954cb6161a544fd81056145959bbba68a4deb1e37f",
          "linkedWithoutMetadata": "3de4f9b4ad12e728794d09954cb6161a544fd81056145959bbba68a4deb1e37f"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "createCounterOffer(address,uint256,(address,uint256,uint256,uint256),address)",
          "cancelOffer(address,uint256)",
          "refuseOffer(address,uint256,address,uint256)",
          "cancelCounterOffer(address,uint256,uint256,address)",
          "refuseCounterOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "acceptCounterOffer(address,uint256)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts/TenartMarketplace.sol:186"
            },
            {
              "contract": "TenartMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts/TenartMarketplace.sol:189"
            },
            {
              "contract": "TenartMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)16043_storage)))",
              "src": "contracts/TenartMarketplace.sol:192"
            },
            {
              "contract": "TenartMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)16052_storage)))",
              "src": "contracts/TenartMarketplace.sol:196"
            },
            {
              "contract": "TenartMarketplace",
              "label": "counterOffers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)16052_storage)))",
              "src": "contracts/TenartMarketplace.sol:200"
            },
            {
              "contract": "TenartMarketplace",
              "label": "ownerOfERC1155",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts/TenartMarketplace.sol:204"
            },
            {
              "contract": "TenartMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts/TenartMarketplace.sol:207"
            },
            {
              "contract": "TenartMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartMarketplace.sol:210"
            },
            {
              "contract": "TenartMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)16059_storage)",
              "src": "contracts/TenartMarketplace.sol:213"
            },
            {
              "contract": "TenartMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(ITenartAddressRegistry)15819",
              "src": "contracts/TenartMarketplace.sol:216"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)16043_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct TenartMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)16043_storage))": {
              "label": "mapping(uint256 => mapping(address => struct TenartMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)16043_storage)": {
              "label": "mapping(address => struct TenartMarketplace.Listing)"
            },
            "t_struct(Listing)16043_storage": {
              "label": "struct TenartMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)16052_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct TenartMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)16052_storage))": {
              "label": "mapping(uint256 => mapping(address => struct TenartMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)16052_storage)": {
              "label": "mapping(address => struct TenartMarketplace.Offer)"
            },
            "t_struct(Offer)16052_storage": {
              "label": "struct TenartMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20Upgradeable)825"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)825": {
              "label": "contract IERC20Upgradeable"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)16059_storage)": {
              "label": "mapping(address => struct TenartMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)16059_storage": {
              "label": "struct TenartMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(ITenartAddressRegistry)15819": {
              "label": "contract ITenartAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartNFT": {
        "src": "contracts/TenartNFT.sol:10",
        "version": {
          "withMetadata": "fd510106b671da0683d0f4cbabf9eb3fd4dc49d53763f473d3ebabddd4ce9528",
          "withoutMetadata": "791b91767df7a08da9dded68b25afc6f7b96986e5f6a2eca6bcab85d6ad06221",
          "linkedWithoutMetadata": "791b91767df7a08da9dded68b25afc6f7b96986e5f6a2eca6bcab85d6ad06221"
        },
        "inherit": [
          "Ownable",
          "ERC2981PerTokenRoyalties",
          "ERC2981",
          "IERC2981RoyaltySetter",
          "IERC2981Royalties",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string,address,uint256)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartNFT",
            "src": "contracts/TenartNFT.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartNFT",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts/TenartNFT.sol:26"
            },
            {
              "contract": "TenartNFT",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/TenartNFT.sol:29"
            },
            {
              "contract": "TenartNFT",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFT.sol:32"
            },
            {
              "contract": "TenartNFT",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartNFT.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartNFTFactory": {
        "src": "contracts/TenartNFTFactory.sol:8",
        "version": {
          "withMetadata": "9a6b6e5de9ad1f917da82c137dcb59c91410021aacbb14a9de61ff2ea09fd90d",
          "withoutMetadata": "618becf40f53857cfd255af61fb3d44a215ff2f2fc8ef75a471e0c25f2e66c6e",
          "linkedWithoutMetadata": "618becf40f53857cfd255af61fb3d44a215ff2f2fc8ef75a471e0c25f2e66c6e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartNFTFactory",
            "src": "contracts/TenartNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/TenartNFTFactory.sol:14"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTFactory.sol:17"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTFactory.sol:20"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTFactory.sol:23"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTFactory.sol:26"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/TenartNFTFactory.sol:29"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TenartNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartNFTFactoryPrivate": {
        "src": "contracts/TenartNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "f86bd27ec9f2b42b7cc9787ad7e4e2a7986de00e3058ad3e2b2eb3826c34130c",
          "withoutMetadata": "2df81774e2e26fae4e020a3237af815e340278ab48ae3b3cdd3181966f3f45ff",
          "linkedWithoutMetadata": "2df81774e2e26fae4e020a3237af815e340278ab48ae3b3cdd3181966f3f45ff"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartNFTFactoryPrivate",
            "src": "contracts/TenartNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/TenartNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/TenartNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TenartNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartNFTTradable": {
        "src": "contracts/TenartNFTTradable.sol:12",
        "version": {
          "withMetadata": "619354b452fb248337ad26ac2962de06671fdd92ef1068e05087bd4d006205bd",
          "withoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b",
          "linkedWithoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartNFTTradable",
            "src": "contracts/TenartNFTTradable.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/TenartNFTTradable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/TenartNFTTradable.sol:23"
            },
            {
              "contract": "TenartNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTTradable.sol:24"
            },
            {
              "contract": "TenartNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTTradable.sol:25"
            },
            {
              "contract": "TenartNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/TenartNFTTradable.sol:26"
            },
            {
              "contract": "TenartNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTTradable.sol:29"
            },
            {
              "contract": "TenartNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartNFTTradable.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartNFTTradablePrivate": {
        "src": "contracts/TenartNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "c4a8eaa76caa48c0a52a4f45c6d2161e7a30cf28fc3f7898a445945051c09c9f",
          "withoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9",
          "linkedWithoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartNFTTradablePrivate",
            "src": "contracts/TenartNFTTradablePrivate.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/TenartNFTTradablePrivate.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/TenartNFTTradablePrivate.sol:23"
            },
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTTradablePrivate.sol:24"
            },
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTTradablePrivate.sol:25"
            },
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/TenartNFTTradablePrivate.sol:26"
            },
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTTradablePrivate.sol:29"
            },
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartNFTTradablePrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts/TenartPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TenartPriceFeed": {
        "src": "contracts/TenartPriceFeed.sol:21",
        "version": {
          "withMetadata": "b4f919e6fc1c65112c2b30eda0a752d13b677af1e963479e3da1911773788936",
          "withoutMetadata": "abca15542052f5c81283a59fa5becdd88e4e88dbca66036af74057ef29025e8c",
          "linkedWithoutMetadata": "abca15542052f5c81283a59fa5becdd88e4e88dbca66036af74057ef29025e8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartPriceFeed",
            "src": "contracts/TenartPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/TenartPriceFeed.sol:23"
            },
            {
              "contract": "TenartPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts/TenartPriceFeed.sol:26"
            },
            {
              "contract": "TenartPriceFeed",
              "label": "wETH",
              "type": "t_address",
              "src": "contracts/TenartPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartRoyaltyRegistry": {
        "src": "contracts/TenartRoyaltyRegistry.sol:11",
        "version": {
          "withMetadata": "dcb620d326baf314ff3b77896241688e1421c82143afcd54b9a987b5897cc692",
          "withoutMetadata": "9dcf985a0b077c6d7450ffac80e18e5b44aa38ac368ad4347b5c1a868a86b3e5",
          "linkedWithoutMetadata": "9dcf985a0b077c6d7450ffac80e18e5b44aa38ac368ad4347b5c1a868a86b3e5"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "setDefaultRoyalty(address,address,uint16)",
          "setRoyalty(address,uint256,address,uint16)",
          "royaltyInfo(address,uint256,uint256)",
          "updateMigrationManager(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartRoyaltyRegistry",
              "label": "royaltyMigrationManager",
              "type": "t_address",
              "src": "contracts/TenartRoyaltyRegistry.sol:12"
            },
            {
              "contract": "TenartRoyaltyRegistry",
              "label": "_royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)20174_storage))",
              "src": "contracts/TenartRoyaltyRegistry.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)20174_storage))": {
              "label": "mapping(address => mapping(uint256 => struct TenartRoyaltyRegistry.RoyaltyInfo))"
            },
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)20174_storage)": {
              "label": "mapping(uint256 => struct TenartRoyaltyRegistry.RoyaltyInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(RoyaltyInfo)20174_storage": {
              "label": "struct TenartRoyaltyRegistry.RoyaltyInfo",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "royaltyPercent",
                  "type": "t_uint16"
                }
              ]
            },
            "t_uint16": {
              "label": "uint16"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartTokenRegistry": {
        "src": "contracts/TenartTokenRegistry.sol:7",
        "version": {
          "withMetadata": "84a4a9154a3c4231dfa778efc9c45eeed8114ae38fda5c0fe7f63f47a2fc9bdc",
          "withoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86",
          "linkedWithoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TenartTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts/library/ERC1155.sol:12",
        "version": {
          "withMetadata": "4f7758aaf073d8af6ccf5183c389c2ba027b6318cc8a4327960c62c6a224cf32",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/library/ERC1155.sol:26"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/library/ERC1155.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts/library/ERC1155Metadata.sol:10",
        "version": {
          "withMetadata": "22f0def7dd847734397d8ab2c9784174764a320bb281b7979b2f41f91fa3c1b8",
          "withoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021",
          "linkedWithoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts/library/ERC1155Metadata.sol:13"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts/library/ERC1155MintBurn.sol:10",
        "version": {
          "withMetadata": "aac939b704517d1f2525b44a9d409c32b3a5006b70cb84f471fce96b07236e5a",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC2981": {
        "src": "contracts/library/ERC2981.sol:10",
        "inherit": [
          "IERC2981RoyaltySetter",
          "IERC2981Royalties",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC2981Base": {
        "src": "contracts/library/ERC2981Base.sol:9",
        "inherit": [
          "IERC2981Royalties",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC2981Base",
              "label": "_royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)21632_storage))",
              "src": "contracts/library/ERC2981Base.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)21632_storage))": {
              "label": "mapping(address => mapping(uint256 => struct ERC2981Base.RoyaltyInfo))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)21632_storage)": {
              "label": "mapping(uint256 => struct ERC2981Base.RoyaltyInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(RoyaltyInfo)21632_storage": {
              "label": "struct ERC2981Base.RoyaltyInfo",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "royaltyPercent",
                  "type": "t_uint16"
                }
              ]
            },
            "t_uint16": {
              "label": "uint16"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC2981PerTokenRoyalties": {
        "src": "contracts/library/ERC2981PerTokenRoyalties.sol:7",
        "inherit": [
          "ERC2981",
          "IERC2981RoyaltySetter",
          "IERC2981Royalties",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "setDefaultRoyalty(address,uint16)",
          "setTokenRoyalty(uint256,address,uint16)",
          "royaltyInfo(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC2981PerTokenRoyalties",
              "label": "_royalties",
              "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)21586_storage)",
              "src": "contracts/library/ERC2981PerTokenRoyalties.sol:8"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)21586_storage)": {
              "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(RoyaltyInfo)21586_storage": {
              "label": "struct ERC2981.RoyaltyInfo",
              "members": [
                {
                  "label": "recipient",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint24"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_uint24": {
              "label": "uint24"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts/library/IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC2981Royalties": {
        "src": "contracts/library/IERC2981Royalties.sol:7",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "royaltyInfo(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC2981RoyaltySetter": {
        "src": "contracts/library/IERC2981RoyaltySetter.sol:7",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "setDefaultRoyalty(address,uint16)",
          "setTokenRoyalty(uint256,address,uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts/mock/BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "d0b282f3a3ff01a0d79f6efbb7abc447e3155393ca143b6392b02d6d1b46230e",
          "withoutMetadata": "f16feedc84b2c164217f0a3c0c7c7ef7e7ec09984915c9f9601de051c36efdcb",
          "linkedWithoutMetadata": "f16feedc84b2c164217f0a3c0c7c7ef7e7ec09984915c9f9601de051c36efdcb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts/mock/BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(TenartAuction)13681",
              "src": "contracts/mock/BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(TenartAuction)13681": {
              "label": "contract TenartAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:7",
        "version": {
          "withMetadata": "f6bf27ebe525638474b4b3d6c79ce37fa1a36fade0b92465b899194e8b783f9a",
          "withoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957",
          "linkedWithoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockTenartAuction": {
        "src": "contracts/mock/MockTenartAuction.sol:7",
        "version": {
          "withMetadata": "0e9eb1ece2ec6417a8fa011b918140b3acb9e37aa7b4df7ae7136ff77ea19e86",
          "withoutMetadata": "3d7092d85b1db98ef1fc03e9e0f6dff6f1e3e58df4673ef162926046d28dc747",
          "linkedWithoutMetadata": "3d7092d85b1db98ef1fc03e9e0f6dff6f1e3e58df4673ef162926046d28dc747"
        },
        "inherit": [
          "TenartAuction",
          "IERC721Receiver",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTime(uint256)",
          "increaseTime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MockTenartAuction",
              "label": "time",
              "type": "t_uint256",
              "src": "contracts/mock/MockTenartAuction.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartAuctionMock": {
        "src": "contracts/mock/TenartAuctionMock.sol:7",
        "version": {
          "withMetadata": "0659d2ba8da3ddfe4dab9b0e8a28563b3f19bd841af301ae62316b517d6430b5",
          "withoutMetadata": "1afd5b3a1e36cd1f39685070f9ccf070e947c8374118782cfd04d8d8d64357fd",
          "linkedWithoutMetadata": "1afd5b3a1e36cd1f39685070f9ccf070e947c8374118782cfd04d8d8d64357fd"
        },
        "inherit": [
          "TenartAuction",
          "IERC721Receiver",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts/mock/TenartAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MerkleProof": {
        "src": "@openzeppelin/contracts/cryptography/MerkleProof.sol:8",
        "version": {
          "withMetadata": "e4c1a7894a06b1c2edf4951f92346a8c87ca32adf7ffd354954ba1e9195a9b23",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/introspection/ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin/contracts/introspection/ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin/contracts/introspection/ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts/library/IERC165.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:21",
        "version": {
          "withMetadata": "6159e5b8b162df16ddf823478e6d2f5f1c6289fe3985e922be50f8f8ba411d0b",
          "withoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033",
          "linkedWithoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)5321_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4698_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)5321_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)5321_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4935_storage"
                }
              ]
            },
            "t_struct(Set)4935_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4698_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)4380_storage"
                }
              ]
            },
            "t_struct(Map)4380_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)4372_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)4372_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)4372_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin/contracts/utils/EnumerableMap.sol:29",
        "version": {
          "withMetadata": "33db0abc4b4d1da32aed25dc771cc00a3efa31fff5d6d984c64d230b001e4165",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "4f51efe115648bafc40e8dcb6d91da10d2c3805f4d3f7a23f58ceb3aa49f6aac",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/utils/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "74ef6d7234587add3006addc68209e5df580602fb30a593c7df5114b91053bef",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FeeSharingSystem": {
        "src": "contracts/Rewards/FeeSharingSystem.sol:15",
        "version": {
          "withMetadata": "6f98a16411c3ddc0dc75c3def21477ca402d2d759c70784562748a75cc9f88f4",
          "withoutMetadata": "d2bf2f0822644f946d1064a40c2b8ce39c850f7179d08ceca9f8064581339b58",
          "linkedWithoutMetadata": "d2bf2f0822644f946d1064a40c2b8ce39c850f7179d08ceca9f8064581339b58"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ReentrancyGuard"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "deposit(uint256,bool)",
          "harvest()",
          "withdraw(uint256,bool)",
          "withdrawAll(bool)",
          "updateRewards(uint256,uint256)",
          "calculatePendingRewards(address)",
          "calculateSharesValueInTART(address)",
          "calculateSharePriceInTART()",
          "lastRewardBlock()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeSharingSystem",
            "src": "contracts/Rewards/FeeSharingSystem.sol:76"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/FeeSharingSystem.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/Rewards/FeeSharingSystem.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenDistributor",
            "src": "contracts/Rewards/FeeSharingSystem.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeSharingSystem",
              "label": "currentRewardPerBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:34"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "lastRewardAdjustment",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:37"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "lastUpdateBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:40"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "periodEndBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:43"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:46"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "totalShares",
              "type": "t_uint256",
              "src": "contracts/Rewards/FeeSharingSystem.sol:49"
            },
            {
              "contract": "FeeSharingSystem",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)5661_storage)",
              "src": "contracts/Rewards/FeeSharingSystem.sol:51"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)5661_storage)": {
              "label": "mapping(address => struct FeeSharingSystem.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)5661_storage": {
              "label": "struct FeeSharingSystem.UserInfo",
              "members": [
                {
                  "label": "shares",
                  "type": "t_uint256"
                },
                {
                  "label": "userRewardPerTokenPaid",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PrivateSaleWithFeeSharing": {
        "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:15",
        "version": {
          "withMetadata": "b9591ffd8a9a7aab8561fa6af883af7639a80b29f84ea598b685128dbf504d81",
          "withoutMetadata": "b9591ffd8a9a7aab8561fa6af883af7639a80b29f84ea598b685128dbf504d81",
          "linkedWithoutMetadata": "b9591ffd8a9a7aab8561fa6af883af7639a80b29f84ea598b685128dbf504d81"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256)",
          "deposit()",
          "harvest()",
          "withdraw()",
          "updateSalePhaseToWithdraw()",
          "removeUserFromWhitelist(address)",
          "setAllocationCostPerTier(uint8,uint256)",
          "setBlockForWithdrawal(uint256)",
          "setPriceOfETHInTART(uint256)",
          "updateSalePhase(uint8)",
          "withdrawCommittedAmount()",
          "whitelistUsers(address[],uint8)",
          "calculatePendingRewards(address)",
          "getMaxAmountTARTToDistribute()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PrivateSaleWithFeeSharing",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:87"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "MAX_BLOCK_FOR_WITHDRAWAL",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TOTAL_TART_DISTRIBUTED",
            "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "currentPhase",
              "type": "t_enum(SalePhase)6447",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:47"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "blockForWithdrawal",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:50"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "priceOfETHInTART",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:53"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "totalAmountCommitted",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:56"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "totalRewardTokensDistributedToStakers",
              "type": "t_uint256",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:59"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "allocationCostPerTier",
              "type": "t_mapping(t_uint8,t_uint256)",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:62"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "numberOfParticipantsForATier",
              "type": "t_mapping(t_uint8,t_uint256)",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:65"
            },
            {
              "contract": "PrivateSaleWithFeeSharing",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)6456_storage)",
              "src": "contracts/Rewards/PrivateSaleWithFeeSharing.sol:68"
            }
          ],
          "types": {
            "t_enum(SalePhase)6447": {
              "label": "enum PrivateSaleWithFeeSharing.SalePhase",
              "members": [
                "Pending",
                "Deposit",
                "Over",
                "Staking",
                "Withdraw"
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_struct(UserInfo)6456_storage)": {
              "label": "mapping(address => struct PrivateSaleWithFeeSharing.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)6456_storage": {
              "label": "struct PrivateSaleWithFeeSharing.UserInfo",
              "members": [
                {
                  "label": "rewardsDistributedToAccount",
                  "type": "t_uint256"
                },
                {
                  "label": "tier",
                  "type": "t_uint8"
                },
                {
                  "label": "hasDeposited",
                  "type": "t_bool"
                },
                {
                  "label": "hasWithdrawn",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StakingPoolForUniswapV2Tokens": {
        "src": "contracts/Rewards/TenartStaking.sol:16",
        "version": {
          "withMetadata": "3b1f83f1cb7ce56bb286b5595143291b4bcd8b31c584e500fedd13c9a50c9894",
          "withoutMetadata": "21a58aac2d8a5fbe04019ccba9220d57a41329a064c266f24f6f94ac97547e28",
          "linkedWithoutMetadata": "21a58aac2d8a5fbe04019ccba9220d57a41329a064c266f24f6f94ac97547e28"
        },
        "inherit": [
          "ReentrancyGuard",
          "Pausable",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "deposit(uint256)",
          "harvest()",
          "emergencyWithdraw()",
          "withdraw(uint256)",
          "adminRewardWithdraw(uint256)",
          "pause()",
          "unpause()",
          "updateRewardPerBlockAndEndBlock(uint256,uint256)",
          "calculatePendingRewards(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StakingPoolForUniswapV2Tokens",
            "src": "contracts/Rewards/TenartStaking.sol:77"
          },
          {
            "kind": "state-variable-immutable",
            "name": "looksRareToken",
            "src": "contracts/Rewards/TenartStaking.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "stakedToken",
            "src": "contracts/Rewards/TenartStaking.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "START_BLOCK",
            "src": "contracts/Rewards/TenartStaking.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "accTokenPerShare",
              "type": "t_uint256",
              "src": "contracts/Rewards/TenartStaking.sol:37"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "endBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TenartStaking.sol:40"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "lastRewardBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TenartStaking.sol:43"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "rewardPerBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TenartStaking.sol:46"
            },
            {
              "contract": "StakingPoolForUniswapV2Tokens",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)7406_storage)",
              "src": "contracts/Rewards/TenartStaking.sol:49"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)7406_storage)": {
              "label": "mapping(address => struct StakingPoolForUniswapV2Tokens.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)7406_storage": {
              "label": "struct StakingPoolForUniswapV2Tokens.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartToken": {
        "src": "contracts/Rewards/TenartToken.sol:13",
        "version": {
          "withMetadata": "3e3c3900c94382a7d0718d779f8f045e0c14f5b50603c62615be255c729996e2",
          "withoutMetadata": "3e3c3900c94382a7d0718d779f8f045e0c14f5b50603c62615be255c729996e2",
          "linkedWithoutMetadata": "3e3c3900c94382a7d0718d779f8f045e0c14f5b50603c62615be255c729996e2"
        },
        "inherit": [
          "ITenartToken",
          "Ownable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,uint256)",
          "mint(address,uint256)",
          "SUPPLY_CAP()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartToken",
            "src": "contracts/Rewards/TenartToken.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_SUPPLY_CAP",
            "src": "contracts/Rewards/TenartToken.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TokenDistributor": {
        "src": "contracts/Rewards/TokenDistributor.sol:14",
        "version": {
          "withMetadata": "e47474a3e8b903c02b53be809234ac4f1e771a9df8d6187327ddb1a8fa985106",
          "withoutMetadata": "e47474a3e8b903c02b53be809234ac4f1e771a9df8d6187327ddb1a8fa985106",
          "linkedWithoutMetadata": "e47474a3e8b903c02b53be809234ac4f1e771a9df8d6187327ddb1a8fa985106"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256[],uint256[],uint256[],uint256)",
          "deposit(uint256)",
          "harvestAndCompound()",
          "updatePool()",
          "withdraw(uint256)",
          "withdrawAll()",
          "calculatePendingRewards(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenDistributor",
            "src": "contracts/Rewards/TokenDistributor.sol:95"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/TokenDistributor.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenSplitter",
            "src": "contracts/Rewards/TokenDistributor.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "NUMBER_PERIODS",
            "src": "contracts/Rewards/TokenDistributor.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "START_BLOCK",
            "src": "contracts/Rewards/TokenDistributor.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TokenDistributor",
              "label": "accTokenPerShare",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:43"
            },
            {
              "contract": "TokenDistributor",
              "label": "currentPhase",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:46"
            },
            {
              "contract": "TokenDistributor",
              "label": "endBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:49"
            },
            {
              "contract": "TokenDistributor",
              "label": "lastRewardBlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:52"
            },
            {
              "contract": "TokenDistributor",
              "label": "rewardPerBlockForOthers",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:55"
            },
            {
              "contract": "TokenDistributor",
              "label": "rewardPerBlockForStaking",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:58"
            },
            {
              "contract": "TokenDistributor",
              "label": "totalAmountStaked",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenDistributor.sol:61"
            },
            {
              "contract": "TokenDistributor",
              "label": "stakingPeriod",
              "type": "t_mapping(t_uint256,t_struct(StakingPeriod)8244_storage)",
              "src": "contracts/Rewards/TokenDistributor.sol:63"
            },
            {
              "contract": "TokenDistributor",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)8249_storage)",
              "src": "contracts/Rewards/TokenDistributor.sol:65"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(StakingPeriod)8244_storage)": {
              "label": "mapping(uint256 => struct TokenDistributor.StakingPeriod)"
            },
            "t_struct(StakingPeriod)8244_storage": {
              "label": "struct TokenDistributor.StakingPeriod",
              "members": [
                {
                  "label": "rewardPerBlockForStaking",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardPerBlockForOthers",
                  "type": "t_uint256"
                },
                {
                  "label": "periodLengthInBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(UserInfo)8249_storage)": {
              "label": "mapping(address => struct TokenDistributor.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)8249_storage": {
              "label": "struct TokenDistributor.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TokenSplitter": {
        "src": "contracts/Rewards/TokenSplitter.sol:12",
        "version": {
          "withMetadata": "96e327208a7ca972de5da2516722c7891e020a86853f7c1ce4003fba6c34117b",
          "withoutMetadata": "60b25e061d13de2bb78b15c7807fdbd616ae4296044fa4bb67d9132dcb842c2c",
          "linkedWithoutMetadata": "60b25e061d13de2bb78b15c7807fdbd616ae4296044fa4bb67d9132dcb842c2c"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address[],uint256[],address)",
          "releaseTokens(address)",
          "updateSharesOwner(address,address)",
          "calculatePendingRewards(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenSplitter",
            "src": "contracts/Rewards/TokenSplitter.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TOTAL_SHARES",
            "src": "contracts/Rewards/TokenSplitter.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/TokenSplitter.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TokenSplitter",
              "label": "totalTokensDistributed",
              "type": "t_uint256",
              "src": "contracts/Rewards/TokenSplitter.sol:25"
            },
            {
              "contract": "TokenSplitter",
              "label": "accountInfo",
              "type": "t_mapping(t_address,t_struct(AccountInfo)9233_storage)",
              "src": "contracts/Rewards/TokenSplitter.sol:27"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(AccountInfo)9233_storage)": {
              "label": "mapping(address => struct TokenSplitter.AccountInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(AccountInfo)9233_storage": {
              "label": "struct TokenSplitter.AccountInfo",
              "members": [
                {
                  "label": "shares",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensDistributedToAccount",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TradingRewardsDistributor": {
        "src": "contracts/Rewards/TradingRewardsDistributor.sol:14",
        "version": {
          "withMetadata": "5a10783c334b7dd679676d2d3a249644788aedeb6e98e784b46eb9078067aa54",
          "withoutMetadata": "698b0ba28e7632a36e88e1f75e97ef463565473ab12d04471015a564e92d5b6a",
          "linkedWithoutMetadata": "698b0ba28e7632a36e88e1f75e97ef463565473ab12d04471015a564e92d5b6a"
        },
        "inherit": [
          "Ownable",
          "ReentrancyGuard",
          "Pausable",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "MerkleProof"
        ],
        "methods": [
          "(address)",
          "claim(uint256,bytes32[])",
          "updateTradingRewards(bytes32,uint256)",
          "pauseDistribution()",
          "unpauseDistribution()",
          "withdrawTokenRewards(uint256)",
          "canClaim(address,uint256,bytes32[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TradingRewardsDistributor",
            "src": "contracts/Rewards/TradingRewardsDistributor.sol:55"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/TradingRewardsDistributor.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TradingRewardsDistributor",
              "label": "currentRewardRound",
              "type": "t_uint256",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:22"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "lastPausedTimestamp",
              "type": "t_uint256",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:25"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "maximumAmountPerUserInCurrentTree",
              "type": "t_uint256",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:28"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "amountClaimedByUser",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:31"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "merkleRootOfRewardRound",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:34"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "merkleRootUsed",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:37"
            },
            {
              "contract": "TradingRewardsDistributor",
              "label": "hasUserClaimedForRewardRound",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "src": "contracts/Rewards/TradingRewardsDistributor.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VestingContractWithFeeSharing": {
        "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:13",
        "version": {
          "withMetadata": "493381ea0d065b8aaa7f905a165972c5b3fa40621441f01e16b018f3796ed911",
          "withoutMetadata": "ec3e3c5c2692f688d05d4eecc9d19c2329acd089ff76664b38253ea5fe5bfeaf",
          "linkedWithoutMetadata": "ec3e3c5c2692f688d05d4eecc9d19c2329acd089ff76664b38253ea5fe5bfeaf"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(uint256,uint256,uint256,uint256,address)",
          "unlockLooksRareToken()",
          "withdrawOtherCurrency(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingContractWithFeeSharing",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tenartToken",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "NUMBER_UNLOCK_PERIODS",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "STANDARD_AMOUNT_UNLOCKED_AT_EACH_UNLOCK",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "START_BLOCK",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "VESTING_BETWEEN_PERIODS_IN_BLOCKS",
            "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingContractWithFeeSharing",
              "label": "maxAmountToWithdrawForNextPeriod",
              "type": "t_uint256",
              "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:31"
            },
            {
              "contract": "VestingContractWithFeeSharing",
              "label": "nextBlockForUnlock",
              "type": "t_uint256",
              "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:34"
            },
            {
              "contract": "VestingContractWithFeeSharing",
              "label": "numberPastUnlocks",
              "type": "t_uint256",
              "src": "contracts/Rewards/VestingContractWithFeeSharing.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ITenartToken": {
        "src": "contracts/Rewards/interfaces/ITenartToken.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "SUPPLY_CAP()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TenartAddressRegistry": {
        "src": "contracts/TenartAddressRegistry.sol:8",
        "version": {
          "withMetadata": "48e529079b227b14fa42607eb7d59fa6280dfe8b0bdd730e7d50fe5cb43f1583",
          "withoutMetadata": "4fd7467afe82d21e7ac8aa7815babafe867eccbd42fabfb94fb53916acc4e7bf",
          "linkedWithoutMetadata": "4fd7467afe82d21e7ac8aa7815babafe867eccbd42fabfb94fb53916acc4e7bf"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateTenartNFT(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)",
          "updateRoyaltyRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartAddressRegistry",
              "label": "tenartNFT",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:12"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:15"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:18"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:21"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:24"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:27"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:30"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:33"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:36"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:39"
            },
            {
              "contract": "TenartAddressRegistry",
              "label": "royaltyRegistry",
              "type": "t_address",
              "src": "contracts/TenartAddressRegistry.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartArtFactory": {
        "src": "contracts/TenartArtFactory.sol:8",
        "version": {
          "withMetadata": "cfe9c2f53251d6dd3b65abf087d4db1ff64623b973bcf89ee3494c7c47901388",
          "withoutMetadata": "1fb02f2da6548b2b4a96eb8f58c02e7cabc58354e05711c2946523691dfcd119",
          "linkedWithoutMetadata": "1fb02f2da6548b2b4a96eb8f58c02e7cabc58354e05711c2946523691dfcd119"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartArtFactory",
            "src": "contracts/TenartArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartArtFactory.sol:14"
            },
            {
              "contract": "TenartArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartArtFactory.sol:17"
            },
            {
              "contract": "TenartArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtFactory.sol:20"
            },
            {
              "contract": "TenartArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtFactory.sol:23"
            },
            {
              "contract": "TenartArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/TenartArtFactory.sol:26"
            },
            {
              "contract": "TenartArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TenartArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartArtFactoryPrivate": {
        "src": "contracts/TenartArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "c75c0608b6c274736777e4bc76dcea04eb5bdffab0e5fcb71b858229b5377ae1",
          "withoutMetadata": "7939b6090106243ccbf7b6329f6e28bce1a0ff45e640c550277d381a0f7dbb97",
          "linkedWithoutMetadata": "7939b6090106243ccbf7b6329f6e28bce1a0ff45e640c550277d381a0f7dbb97"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartArtFactoryPrivate",
            "src": "contracts/TenartArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartArtFactoryPrivate.sol:14"
            },
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartArtFactoryPrivate.sol:17"
            },
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtFactoryPrivate.sol:20"
            },
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtFactoryPrivate.sol:23"
            },
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/TenartArtFactoryPrivate.sol:26"
            },
            {
              "contract": "TenartArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TenartArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts/TenartArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "9d2d11f0e397069e36ab5ea14200406775c012c1d7ffafbeb45325dc39885a97",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts/TenartArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f941ec0687c7525c72348d67f033c3b3d548302d4842e5370c9b7cb7f090f334",
          "withoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d",
          "linkedWithoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)11215)",
              "src": "contracts/TenartArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)11215)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)11215": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartArtTradable": {
        "src": "contracts/TenartArtTradable.sol:22",
        "version": {
          "withMetadata": "0459c6e63ebe05c97f22a2e21bec826178f38973eea2701b2cecf48e78251df3",
          "withoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b",
          "linkedWithoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartArtTradable",
            "src": "contracts/TenartArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/TenartArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/TenartArtTradable.sol:28"
            },
            {
              "contract": "TenartArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/TenartArtTradable.sol:31"
            },
            {
              "contract": "TenartArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/TenartArtTradable.sol:33"
            },
            {
              "contract": "TenartArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TenartArtTradable.sol:34"
            },
            {
              "contract": "TenartArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/TenartArtTradable.sol:37"
            },
            {
              "contract": "TenartArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/TenartArtTradable.sol:39"
            },
            {
              "contract": "TenartArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtTradable.sol:41"
            },
            {
              "contract": "TenartArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartArtTradable.sol:43"
            },
            {
              "contract": "TenartArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartArtTradable.sol:45"
            },
            {
              "contract": "TenartArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartArtTradablePrivate": {
        "src": "contracts/TenartArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "54828c2493eb9473a670d5615fc9fba39d102d69d512675d2e604baf66862528",
          "withoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9",
          "linkedWithoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartArtTradablePrivate",
            "src": "contracts/TenartArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/TenartArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/TenartArtTradablePrivate.sol:28"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/TenartArtTradablePrivate.sol:31"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/TenartArtTradablePrivate.sol:33"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TenartArtTradablePrivate.sol:34"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/TenartArtTradablePrivate.sol:37"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/TenartArtTradablePrivate.sol:39"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartArtTradablePrivate.sol:41"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartArtTradablePrivate.sol:43"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartArtTradablePrivate.sol:45"
            },
            {
              "contract": "TenartArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ITenartAddressRegistry": {
        "src": "contracts/TenartPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartBundleMarketplace": {
        "src": "contracts/TenartMarketplace.sol:52",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartMarketplace": {
        "src": "contracts/TenartBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartRoyaltyRegistry": {
        "src": "contracts/TenartMarketplace.sol:74",
        "inherit": [],
        "libraries": [],
        "methods": [
          "royaltyInfo(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartTokenRegistry": {
        "src": "contracts/TenartPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TenartAuction": {
        "src": "contracts/TenartAuction.sol:53",
        "version": {
          "withMetadata": "db0475967ba15c1715e85b3d1fad219243c0f7656c227515915e70d300b80829",
          "withoutMetadata": "859d8697d145a46440e68a55c7647aa61c2d5ca28244c0c47636972a02c361b5",
          "linkedWithoutMetadata": "859d8697d145a46440e68a55c7647aa61c2d5ca28244c0c47636972a02c361b5"
        },
        "inherit": [
          "IERC721Receiver",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)",
          "onERC721Received(address,address,uint256,bytes)",
          "endAuction(address,uint256)",
          "cancelAuctionOwner(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)11729_storage))",
              "src": "contracts/TenartAuction.sol:152"
            },
            {
              "contract": "TenartAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)11736_storage))",
              "src": "contracts/TenartAuction.sol:155"
            },
            {
              "contract": "TenartAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts/TenartAuction.sol:158"
            },
            {
              "contract": "TenartAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts/TenartAuction.sol:161"
            },
            {
              "contract": "TenartAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartAuction.sol:164"
            },
            {
              "contract": "TenartAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts/TenartAuction.sol:167"
            },
            {
              "contract": "TenartAuction",
              "label": "addressRegistry",
              "type": "t_contract(ITenartAddressRegistry)11549",
              "src": "contracts/TenartAuction.sol:170"
            },
            {
              "contract": "TenartAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts/TenartAuction.sol:173"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)11729_storage))": {
              "label": "mapping(address => mapping(uint256 => struct TenartAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)11729_storage)": {
              "label": "mapping(uint256 => struct TenartAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)11729_storage": {
              "label": "struct TenartAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)11736_storage))": {
              "label": "mapping(address => mapping(uint256 => struct TenartAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)11736_storage)": {
              "label": "mapping(uint256 => struct TenartAuction.HighestBid)"
            },
            "t_struct(HighestBid)11736_storage": {
              "label": "struct TenartAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(ITenartAddressRegistry)11549": {
              "label": "contract ITenartAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartBundleMarketplace": {
        "src": "contracts/TenartBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "8a42d96aea082a8156f5faa16d1f70fe32662702b3a9c1a903eb0c5f0c776c56",
          "withoutMetadata": "0358ccbe762a0ef4d331cd1cca908db1b4af94c4f7baa88fc1e9ec58a89a9efc",
          "linkedWithoutMetadata": "0358ccbe762a0ef4d331cd1cca908db1b4af94c4f7baa88fc1e9ec58a89a9efc"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20Upgradeable",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)13846_storage))",
              "src": "contracts/TenartBundleMarketplace.sol:106"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/TenartBundleMarketplace.sol:109"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)5115_storage))",
              "src": "contracts/TenartBundleMarketplace.sol:111"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts/TenartBundleMarketplace.sol:113"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts/TenartBundleMarketplace.sol:115"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)13853_storage))",
              "src": "contracts/TenartBundleMarketplace.sol:118"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartBundleMarketplace.sol:121"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartBundleMarketplace.sol:124"
            },
            {
              "contract": "TenartBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(ITenartAddressRegistry)13709",
              "src": "contracts/TenartBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)13846_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct TenartBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)13846_storage)": {
              "label": "mapping(bytes32 => struct TenartBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)13846_storage": {
              "label": "struct TenartBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)5115_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)5115_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)5115_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4935_storage"
                }
              ]
            },
            "t_struct(Set)4935_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)13853_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct TenartBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)13853_storage)": {
              "label": "mapping(address => struct TenartBundleMarketplace.Offer)"
            },
            "t_struct(Offer)13853_storage": {
              "label": "struct TenartBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20Upgradeable)825"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)825": {
              "label": "contract IERC20Upgradeable"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(ITenartAddressRegistry)13709": {
              "label": "contract ITenartAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ITenartAuction": {
        "src": "contracts/TenartMarketplace.sol:38",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartNFTFactory": {
        "src": "contracts/TenartMarketplace.sol:60",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITenartPriceFeed": {
        "src": "contracts/TenartMarketplace.sol:68",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wETH()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TenartMarketplace": {
        "src": "contracts/TenartMarketplace.sol:82",
        "version": {
          "withMetadata": "b04d281ef901110ddd5edf1f0ae4aa1c1339d889f8fd0897fb9fe765e1bfe499",
          "withoutMetadata": "3de4f9b4ad12e728794d09954cb6161a544fd81056145959bbba68a4deb1e37f",
          "linkedWithoutMetadata": "3de4f9b4ad12e728794d09954cb6161a544fd81056145959bbba68a4deb1e37f"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "createCounterOffer(address,uint256,(address,uint256,uint256,uint256),address)",
          "cancelOffer(address,uint256)",
          "refuseOffer(address,uint256,address,uint256)",
          "cancelCounterOffer(address,uint256,uint256,address)",
          "refuseCounterOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "acceptCounterOffer(address,uint256)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts/TenartMarketplace.sol:186"
            },
            {
              "contract": "TenartMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts/TenartMarketplace.sol:189"
            },
            {
              "contract": "TenartMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)16043_storage)))",
              "src": "contracts/TenartMarketplace.sol:192"
            },
            {
              "contract": "TenartMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)16052_storage)))",
              "src": "contracts/TenartMarketplace.sol:196"
            },
            {
              "contract": "TenartMarketplace",
              "label": "counterOffers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)16052_storage)))",
              "src": "contracts/TenartMarketplace.sol:200"
            },
            {
              "contract": "TenartMarketplace",
              "label": "ownerOfERC1155",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts/TenartMarketplace.sol:204"
            },
            {
              "contract": "TenartMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts/TenartMarketplace.sol:207"
            },
            {
              "contract": "TenartMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartMarketplace.sol:210"
            },
            {
              "contract": "TenartMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)16059_storage)",
              "src": "contracts/TenartMarketplace.sol:213"
            },
            {
              "contract": "TenartMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(ITenartAddressRegistry)15819",
              "src": "contracts/TenartMarketplace.sol:216"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)16043_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct TenartMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)16043_storage))": {
              "label": "mapping(uint256 => mapping(address => struct TenartMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)16043_storage)": {
              "label": "mapping(address => struct TenartMarketplace.Listing)"
            },
            "t_struct(Listing)16043_storage": {
              "label": "struct TenartMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)16052_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct TenartMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)16052_storage))": {
              "label": "mapping(uint256 => mapping(address => struct TenartMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)16052_storage)": {
              "label": "mapping(address => struct TenartMarketplace.Offer)"
            },
            "t_struct(Offer)16052_storage": {
              "label": "struct TenartMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20Upgradeable)825"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)825": {
              "label": "contract IERC20Upgradeable"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)16059_storage)": {
              "label": "mapping(address => struct TenartMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)16059_storage": {
              "label": "struct TenartMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(ITenartAddressRegistry)15819": {
              "label": "contract ITenartAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartNFT": {
        "src": "contracts/TenartNFT.sol:10",
        "version": {
          "withMetadata": "0c9c1feea946d9a9ee3161ba04f260cc166648a583ac35bfbd7436ae16497326",
          "withoutMetadata": "791b91767df7a08da9dded68b25afc6f7b96986e5f6a2eca6bcab85d6ad06221",
          "linkedWithoutMetadata": "791b91767df7a08da9dded68b25afc6f7b96986e5f6a2eca6bcab85d6ad06221"
        },
        "inherit": [
          "Ownable",
          "ERC2981PerTokenRoyalties",
          "ERC2981",
          "IERC2981RoyaltySetter",
          "IERC2981Royalties",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string,address,uint256)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartNFT",
            "src": "contracts/TenartNFT.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartNFT",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts/TenartNFT.sol:26"
            },
            {
              "contract": "TenartNFT",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/TenartNFT.sol:29"
            },
            {
              "contract": "TenartNFT",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFT.sol:32"
            },
            {
              "contract": "TenartNFT",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartNFT.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartNFTFactory": {
        "src": "contracts/TenartNFTFactory.sol:8",
        "version": {
          "withMetadata": "9a6b6e5de9ad1f917da82c137dcb59c91410021aacbb14a9de61ff2ea09fd90d",
          "withoutMetadata": "618becf40f53857cfd255af61fb3d44a215ff2f2fc8ef75a471e0c25f2e66c6e",
          "linkedWithoutMetadata": "618becf40f53857cfd255af61fb3d44a215ff2f2fc8ef75a471e0c25f2e66c6e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartNFTFactory",
            "src": "contracts/TenartNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/TenartNFTFactory.sol:14"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTFactory.sol:17"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTFactory.sol:20"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTFactory.sol:23"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTFactory.sol:26"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/TenartNFTFactory.sol:29"
            },
            {
              "contract": "TenartNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TenartNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartNFTFactoryPrivate": {
        "src": "contracts/TenartNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "f86bd27ec9f2b42b7cc9787ad7e4e2a7986de00e3058ad3e2b2eb3826c34130c",
          "withoutMetadata": "2df81774e2e26fae4e020a3237af815e340278ab48ae3b3cdd3181966f3f45ff",
          "linkedWithoutMetadata": "2df81774e2e26fae4e020a3237af815e340278ab48ae3b3cdd3181966f3f45ff"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartNFTFactoryPrivate",
            "src": "contracts/TenartNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/TenartNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/TenartNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "TenartNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TenartNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartNFTTradable": {
        "src": "contracts/TenartNFTTradable.sol:12",
        "version": {
          "withMetadata": "619354b452fb248337ad26ac2962de06671fdd92ef1068e05087bd4d006205bd",
          "withoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b",
          "linkedWithoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartNFTTradable",
            "src": "contracts/TenartNFTTradable.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/TenartNFTTradable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/TenartNFTTradable.sol:23"
            },
            {
              "contract": "TenartNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTTradable.sol:24"
            },
            {
              "contract": "TenartNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTTradable.sol:25"
            },
            {
              "contract": "TenartNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/TenartNFTTradable.sol:26"
            },
            {
              "contract": "TenartNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTTradable.sol:29"
            },
            {
              "contract": "TenartNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartNFTTradable.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartNFTTradablePrivate": {
        "src": "contracts/TenartNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "c4a8eaa76caa48c0a52a4f45c6d2161e7a30cf28fc3f7898a445945051c09c9f",
          "withoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9",
          "linkedWithoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartNFTTradablePrivate",
            "src": "contracts/TenartNFTTradablePrivate.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/TenartNFTTradablePrivate.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/TenartNFTTradablePrivate.sol:23"
            },
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTTradablePrivate.sol:24"
            },
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/TenartNFTTradablePrivate.sol:25"
            },
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/TenartNFTTradablePrivate.sol:26"
            },
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/TenartNFTTradablePrivate.sol:29"
            },
            {
              "contract": "TenartNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/TenartNFTTradablePrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts/TenartPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TenartPriceFeed": {
        "src": "contracts/TenartPriceFeed.sol:21",
        "version": {
          "withMetadata": "b4f919e6fc1c65112c2b30eda0a752d13b677af1e963479e3da1911773788936",
          "withoutMetadata": "abca15542052f5c81283a59fa5becdd88e4e88dbca66036af74057ef29025e8c",
          "linkedWithoutMetadata": "abca15542052f5c81283a59fa5becdd88e4e88dbca66036af74057ef29025e8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TenartPriceFeed",
            "src": "contracts/TenartPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TenartPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/TenartPriceFeed.sol:23"
            },
            {
              "contract": "TenartPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts/TenartPriceFeed.sol:26"
            },
            {
              "contract": "TenartPriceFeed",
              "label": "wETH",
              "type": "t_address",
              "src": "contracts/TenartPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartRoyaltyRegistry": {
        "src": "contracts/TenartRoyaltyRegistry.sol:11",
        "version": {
          "withMetadata": "71c59d49b30abf016a5104e719c110d3aa038321f284246af3c48d8bc6ac9fa6",
          "withoutMetadata": "9dcf985a0b077c6d7450ffac80e18e5b44aa38ac368ad4347b5c1a868a86b3e5",
          "linkedWithoutMetadata": "9dcf985a0b077c6d7450ffac80e18e5b44aa38ac368ad4347b5c1a868a86b3e5"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "setDefaultRoyalty(address,address,uint16)",
          "setRoyalty(address,uint256,address,uint16)",
          "royaltyInfo(address,uint256,uint256)",
          "updateMigrationManager(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartRoyaltyRegistry",
              "label": "royaltyMigrationManager",
              "type": "t_address",
              "src": "contracts/TenartRoyaltyRegistry.sol:12"
            },
            {
              "contract": "TenartRoyaltyRegistry",
              "label": "_royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)20174_storage))",
              "src": "contracts/TenartRoyaltyRegistry.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)20174_storage))": {
              "label": "mapping(address => mapping(uint256 => struct TenartRoyaltyRegistry.RoyaltyInfo))"
            },
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)20174_storage)": {
              "label": "mapping(uint256 => struct TenartRoyaltyRegistry.RoyaltyInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(RoyaltyInfo)20174_storage": {
              "label": "struct TenartRoyaltyRegistry.RoyaltyInfo",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "royaltyPercent",
                  "type": "t_uint16"
                }
              ]
            },
            "t_uint16": {
              "label": "uint16"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartTokenRegistry": {
        "src": "contracts/TenartTokenRegistry.sol:7",
        "version": {
          "withMetadata": "84a4a9154a3c4231dfa778efc9c45eeed8114ae38fda5c0fe7f63f47a2fc9bdc",
          "withoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86",
          "linkedWithoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/TenartTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts/library/ERC1155.sol:10",
        "version": {
          "withMetadata": "4639c9907f46aab93be344031b9901919e5125452e696b9c467214cdaf627ee4",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/library/ERC1155.sol:24"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/library/ERC1155.sol:27"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts/library/ERC1155Metadata.sol:8",
        "version": {
          "withMetadata": "c947ccded0d4d0355496f88a762ed82f1465014e97b34e7f7466b02671f0b10f",
          "withoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021",
          "linkedWithoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts/library/ERC1155Metadata.sol:11"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts/library/ERC1155MintBurn.sol:8",
        "version": {
          "withMetadata": "7c720d7c1872a19210149bb335fc2daf868e5b7f7337bc3aee71a99e16c48327",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC2981": {
        "src": "contracts/library/ERC2981.sol:10",
        "inherit": [
          "IERC2981RoyaltySetter",
          "IERC2981Royalties",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC2981Base": {
        "src": "contracts/library/ERC2981Base.sol:9",
        "inherit": [
          "IERC2981Royalties",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC2981Base",
              "label": "_royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)21632_storage))",
              "src": "contracts/library/ERC2981Base.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(RoyaltyInfo)21632_storage))": {
              "label": "mapping(address => mapping(uint256 => struct ERC2981Base.RoyaltyInfo))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)21632_storage)": {
              "label": "mapping(uint256 => struct ERC2981Base.RoyaltyInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(RoyaltyInfo)21632_storage": {
              "label": "struct ERC2981Base.RoyaltyInfo",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "royaltyPercent",
                  "type": "t_uint16"
                }
              ]
            },
            "t_uint16": {
              "label": "uint16"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC2981PerTokenRoyalties": {
        "src": "contracts/library/ERC2981PerTokenRoyalties.sol:7",
        "inherit": [
          "ERC2981",
          "IERC2981RoyaltySetter",
          "IERC2981Royalties",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "setDefaultRoyalty(address,uint16)",
          "setTokenRoyalty(uint256,address,uint16)",
          "royaltyInfo(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC2981PerTokenRoyalties",
              "label": "_royalties",
              "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)21586_storage)",
              "src": "contracts/library/ERC2981PerTokenRoyalties.sol:8"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)21586_storage)": {
              "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(RoyaltyInfo)21586_storage": {
              "label": "struct ERC2981.RoyaltyInfo",
              "members": [
                {
                  "label": "recipient",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint24"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_uint24": {
              "label": "uint24"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts/library/IERC1155TokenReceiver.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC2981Royalties": {
        "src": "contracts/library/IERC2981Royalties.sol:7",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "royaltyInfo(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC2981RoyaltySetter": {
        "src": "contracts/library/IERC2981RoyaltySetter.sol:5",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "setDefaultRoyalty(address,uint16)",
          "setTokenRoyalty(uint256,address,uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts/mock/BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "d0b282f3a3ff01a0d79f6efbb7abc447e3155393ca143b6392b02d6d1b46230e",
          "withoutMetadata": "f16feedc84b2c164217f0a3c0c7c7ef7e7ec09984915c9f9601de051c36efdcb",
          "linkedWithoutMetadata": "f16feedc84b2c164217f0a3c0c7c7ef7e7ec09984915c9f9601de051c36efdcb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts/mock/BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(TenartAuction)13681",
              "src": "contracts/mock/BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(TenartAuction)13681": {
              "label": "contract TenartAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:7",
        "version": {
          "withMetadata": "f6bf27ebe525638474b4b3d6c79ce37fa1a36fade0b92465b899194e8b783f9a",
          "withoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957",
          "linkedWithoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockTenartAuction": {
        "src": "contracts/mock/MockTenartAuction.sol:7",
        "version": {
          "withMetadata": "0e9eb1ece2ec6417a8fa011b918140b3acb9e37aa7b4df7ae7136ff77ea19e86",
          "withoutMetadata": "3d7092d85b1db98ef1fc03e9e0f6dff6f1e3e58df4673ef162926046d28dc747",
          "linkedWithoutMetadata": "3d7092d85b1db98ef1fc03e9e0f6dff6f1e3e58df4673ef162926046d28dc747"
        },
        "inherit": [
          "TenartAuction",
          "IERC721Receiver",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setTime(uint256)",
          "increaseTime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MockTenartAuction",
              "label": "time",
              "type": "t_uint256",
              "src": "contracts/mock/MockTenartAuction.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TenartAuctionMock": {
        "src": "contracts/mock/TenartAuctionMock.sol:7",
        "version": {
          "withMetadata": "0659d2ba8da3ddfe4dab9b0e8a28563b3f19bd841af301ae62316b517d6430b5",
          "withoutMetadata": "1afd5b3a1e36cd1f39685070f9ccf070e947c8374118782cfd04d8d8d64357fd",
          "linkedWithoutMetadata": "1afd5b3a1e36cd1f39685070f9ccf070e947c8374118782cfd04d8d8d64357fd"
        },
        "inherit": [
          "TenartAuction",
          "IERC721Receiver",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TenartAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts/mock/TenartAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}